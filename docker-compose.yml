version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: antispam
      POSTGRES_USER: antispam
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U antispam"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  antispam-bot:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_USERS=${ADMIN_USERS}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CAS_API_URL=${CAS_API_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RUN_MODE=${RUN_MODE:-both}
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    restart: unless-stopped
    command: ["python", "-m", "src.main"]

  # Nginx для проксирования (опционально)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - antispam-bot
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
