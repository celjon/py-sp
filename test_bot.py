#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ AntiSpam Bot
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_config():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from config.config import load_config
        config = load_config("development")
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.database.url}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_detectors():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        from domain.service.detector.heuristic import HeuristicDetector
        from domain.entity.message import Message
        
        heuristic = HeuristicDetector()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = [
            ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", False),  # –î–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
            ("üî•üî•üî• URGENT! Make $500 per day! üí∞üí∞üí∞", True),  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            ("–ö—É–ø–∏—Ç–µ –¥–µ—à–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—Å—ã–ª–∫–µ: http://spam.com", True),  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            ("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", False),  # –î–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        ]
        
        for text, expected_spam in test_messages:
            message = Message(
                id=1,
                user_id=123,
                chat_id=456,
                text=text,
                role="user"
            )
            
            result = await heuristic.check_message(message, None)
            status = "‚úÖ" if result.is_spam == expected_spam else "‚ùå"
            print(f"{status} '{text[:30]}...' ‚Üí –°–ø–∞–º: {result.is_spam} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_spam})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤: {e}")
        return False

async def test_ml_classifier():
    """–¢–µ—Å—Ç ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    
    try:
        from domain.service.detector.ml_classifier import MLClassifier
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥–µ–ª–µ–π
        models_dir = Path("models")
        models_dir.mkdir(exist_ok=True)
        
        ml = MLClassifier(models_dir, {"use_bert": False})  # –û—Ç–∫–ª—é—á–∞–µ–º BERT –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–æ–¥–µ–ª—å
        result = await ml.classify("üî•üî•üî• URGENT! Make $500 per day! üí∞üí∞üí∞")
        print(f"‚úÖ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.is_spam} (confidence: {result.confidence:.2f})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        return False

async def test_ensemble():
    """–¢–µ—Å—Ç –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
    
    try:
        from domain.service.detector.ensemble import EnsembleDetector
        
        ensemble = EnsembleDetector({
            "spam_threshold": 0.6,
            "high_confidence_threshold": 0.8
        })
        
        print(f"‚úÖ –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã: {await ensemble.get_available_detectors()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
        return False

async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    
    try:
        from lib.clients.postgres_client import PostgresClient
        from config.config import load_config
        
        config = load_config("development")
        client = PostgresClient(config.database.url)
        
        await client.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        await client.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

async def test_redis_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("\nüî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    
    try:
        from lib.clients.redis_client import RedisClient
        from config.config import load_config
        
        config = load_config("development")
        client = RedisClient(config.redis.url)
        
        await client.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        
        await client.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AntiSpam Bot...")
    print("=" * 50)
    
    tests = [
        test_config,
        test_detectors,
        test_ml_classifier,
        test_ensemble,
        test_database_connection,
        test_redis_connection
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = sum(results)
    total = len(results)
    
    for i, (test, result) in enumerate(zip(tests, results)):
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test.__name__}")
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: docker-compose up -d postgres redis")
        print("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ë–î: make init-db")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: make run")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ config/development.yaml")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∏ Redis –∑–∞–ø—É—â–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main())
