#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ CAS API
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_real_cas_api():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ CAS API"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ CAS API...")
    
    try:
        from src.lib.clients.http_client import HttpClient
        from src.adapter.gateway.cas_gateway import CASGateway
        
        # –°–æ–∑–¥–∞–µ–º mock Redis (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
        class MockRedisCache:
            async def get(self, key: str):
                return None
            
            async def set(self, key: str, value: str, ttl: int = 3600):
                pass
        
        # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
        http_client = HttpClient()
        
        # –°–æ–∑–¥–∞–µ–º mock Redis
        redis_cache = MockRedisCache()
        
        # –°–æ–∑–¥–∞–µ–º CAS Gateway
        cas_gateway = CASGateway(
            http_client=http_client,
            cache=redis_cache,
            config={
                "cas_api_url": "https://api.cas.chat",
                "timeout": 10,
                "cache_ttl": 3600
            }
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID)
        test_users = [
            (123456789, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1"),
            (987654321, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2"),
            (555666777, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3"),
        ]
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CAS...")
        
        for user_id, description in test_users:
            try:
                is_banned = await cas_gateway.check_cas(user_id)
                status = "üö® –ó–ê–ë–ê–ù–ï–ù" if is_banned else "‚úÖ –ß–∏—Å—Ç—ã–π"
                print(f"   {status} | ID: {user_id} | {description}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ID {user_id}: {e}")
        
        # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ø–∞–º–µ—Ä—ã)
        print("\nüö® –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤ –≤ CAS...")
        
        # –≠—Ç–∏ ID –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω—ã –≤ CAS (–≤–∑—è—Ç—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤)
        known_spammers = [
            (821871410, "–ò–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–∞–º–µ—Ä 1"),
            (1234567890, "–ò–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–∞–º–µ—Ä 2"),
            (9876543210, "–ò–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–∞–º–µ—Ä 3"),
        ]
        
        for user_id, description in known_spammers:
            try:
                is_banned = await cas_gateway.check_cas(user_id)
                status = "üö® –ó–ê–ë–ê–ù–ï–ù" if is_banned else "‚úÖ –ß–∏—Å—Ç—ã–π"
                print(f"   {status} | ID: {user_id} | {description}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ID {user_id}: {e}")
        
        # –¢–µ—Å—Ç CSV —ç–∫—Å–ø–æ—Ä—Ç–∞
        print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º CSV —ç–∫—Å–ø–æ—Ä—Ç...")
        try:
            csv_data = await cas_gateway.get_banned_users_csv()
            if csv_data:
                print(f"   ‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(csv_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {csv_data[:200]}...")
            else:
                print("   ‚ùå CSV —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        
        print("\nüìä –¢–µ—Å—Ç CAS API –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
        if 'http_client' in locals():
            await http_client.close()

if __name__ == "__main__":
    asyncio.run(test_real_cas_api())
