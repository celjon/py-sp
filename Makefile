# AntiSpam Bot Makefile
# –£–ø—Ä–æ—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–µ–ø–ª–æ—è

.PHONY: help install test clean run-telegram run-http run-both test-deployment test-http-api

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON = python
PIP = pip
ENV_FILE = .env
DOCKER_COMPOSE = docker-compose

# –ü–æ–º–æ—â—å
help:
	@echo "ü§ñ AntiSpam Bot - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo ""
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:"
	@echo "  make install          - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo "  make setup-env        - –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
	@echo "  make setup-db         - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–º–∏–≥—Ä–∞—Ü–∏–∏)"
	@echo ""
	@echo "üöÄ –ó–∞–ø—É—Å–∫:"
	@echo "  make run-telegram     - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç"
	@echo "  make run-http         - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ HTTP API"
	@echo "  make run-both         - –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram + HTTP"
	@echo ""
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
	@echo "  make test-deployment  - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"
	@echo "  make test-http-api    - –¢–µ—Å—Ç HTTP API (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)"
	@echo "  make test-detectors   - –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"
	@echo ""
	@echo "üê≥ Docker:"
	@echo "  make docker-build     - –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
	@echo "  make docker-up        - –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Docker Compose"
	@echo "  make docker-down      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Compose"
	@echo ""
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞:"
	@echo "  make clean            - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
	@echo "  make clean-cache      - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Python"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install:
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	$(PIP) install -r requirements.txt
	@echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
setup-env:
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."; \
		cp env.example $(ENV_FILE); \
		echo "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ env.example"; \
		echo "‚ö†Ô∏è  –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"; \
	else \
		echo "‚ÑπÔ∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; \
	fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup-db:
	@echo "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	@if [ -f alembic.ini ]; then \
		echo "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."; \
		alembic upgrade head; \
		echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"; \
	else \
		echo "‚ùå alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω"; \
	fi

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞
run-telegram:
	@echo "ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..."
	RUN_MODE=telegram $(PYTHON) src/main.py

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ HTTP API
run-http:
	@echo "üåê –ó–∞–ø—É—Å–∫ HTTP API..."
	RUN_MODE=http $(PYTHON) src/main.py

# –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
run-both:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ Telegram + HTTP..."
	RUN_MODE=both $(PYTHON) src/main.py

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
test-deployment:
	@echo "üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã..."
	@set PYTHONIOENCODING=utf-8 && $(PYTHON) test_deployment.py

# –¢–µ—Å—Ç HTTP API
test-http-api:
	@echo "üåê –¢–µ—Å—Ç HTTP API..."
	@set PYTHONIOENCODING=utf-8 && $(PYTHON) test_http_api.py

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check-deps:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	$(PYTHON) check_deps.py
test-detectors:
	@echo "üîç –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤..."
	@set PYTHONIOENCODING=utf-8 && $(PYTHON) -c "\
import asyncio; \
from src.domain.service.detector.ensemble import EnsembleDetector; \
from src.domain.entity.message import Message; \
async def test(): \
    detector = EnsembleDetector({'spam_threshold': 0.6, 'heuristic': {'spam_threshold': 0.6}}); \
    msg = Message(user_id=1, chat_id=1, text='üî•üî•üî• –ó–∞—Ä–∞–±–æ—Ç–æ–∫! –î–µ—Ç–∞–ª–∏ –≤ –õ–°!'); \
    result = await detector.detect(msg, {}); \
    print(f'–¢–µ—Å—Ç —Å–ø–∞–º-–¥–µ—Ç–µ–∫—Ü–∏–∏: {\"–°–ü–ê–ú\" if result.is_spam else \"–ù–ï –°–ü–ê–ú\"} (confidence: {result.overall_confidence:.2f})'); \
asyncio.run(test())"

# Docker –∫–æ–º–∞–Ω–¥—ã
docker-build:
	@echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
	docker build -t antispam-bot:latest .

docker-up:
	@echo "üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose..."
	$(DOCKER_COMPOSE) up -d
	@echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
	@echo "üìö API docs: http://localhost:8080/docs"

docker-down:
	@echo "üê≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
	$(DOCKER_COMPOSE) down

docker-logs:
	@echo "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	$(DOCKER_COMPOSE) logs -f

# –û—á–∏—Å—Ç–∫–∞
clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type f -name "*.pyo" -delete 2>/dev/null || true
	find . -type f -name "*.log" -delete 2>/dev/null || true
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

clean-cache:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Python..."
	$(PIP) cache purge
	@echo "‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
status:
	@echo "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
	@echo ""
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
	@if [ -f $(ENV_FILE) ]; then \
		echo "  ‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"; \
	else \
		echo "  ‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"; \
	fi
	@echo ""
	@echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:"
	@$(PYTHON) -c "import aiogram, fastapi, asyncpg; print('  ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')" 2>/dev/null || echo "  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo ""
	@echo "üê≥ Docker —Å—Ç–∞—Ç—É—Å:"
	@docker --version 2>/dev/null | sed 's/^/  ‚úÖ /' || echo "  ‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	@$(DOCKER_COMPOSE) --version 2>/dev/null | sed 's/^/  ‚úÖ /' || echo "  ‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
quick-setup: setup-env install setup-db
	@echo "üéâ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
	@echo ""
	@echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
	@echo "  1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
	@echo "  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make test-deployment"
	@echo "  3. –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏, –∑–∞–ø—É—Å—Ç–∏—Ç–µ: make run-both"

# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∑–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
dev:
	@echo "üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	@echo "  –§–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
	$(PYTHON) -m uvicorn src.delivery.http.app:create_app --reload --host 0.0.0.0 --port 8080

# –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π
deploy-prod:
	@echo "üöÄ Production –¥–µ–ø–ª–æ–π..."
	@echo "‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"
	@echo "  - .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è production"
	@echo "  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
	@echo "  - –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	make docker-build
	ENVIRONMENT=production $(DOCKER_COMPOSE) -f docker-compose.yml up -d

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è production)
backup-db:
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	@timestamp=$$(date +%Y%m%d_%H%M%S); \
	docker exec $$(docker-compose ps -q postgres) pg_dump -U antispam antispam_db > "backup_$$timestamp.sql"; \
	echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: backup_$$timestamp.sql"