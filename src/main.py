#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç–∞
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.config.config import load_config
from src.lib.clients.postgres_client import PostgresClient
from src.adapter.cache.redis_cache import RedisCache
from src.adapter.repository.message_repository import MessageRepository
from src.adapter.repository.user_repository import UserRepository
from src.adapter.gateway.telegram_gateway import TelegramGateway
from src.adapter.gateway.openai_gateway import OpenAIGateway
from src.adapter.gateway.cas_gateway import CASGateway
from src.lib.clients.http_client import HttpClient
from src.domain.service.detector.ensemble import EnsembleDetector
from src.domain.usecase.spam_detection.check_message import CheckMessageUseCase
from src.domain.usecase.spam_detection.ban_user import BanUserUseCase
from src.delivery.telegram.bot import AntiSpamBot


async def setup_dependencies(config):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=getattr(logging, config.log_level.upper()),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
    postgres_client = PostgresClient(config.database_url)
    redis_cache = RedisCache(config.redis_url)
    http_client = HttpClient()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    print("üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    await postgres_client.connect()
    await redis_cache.connect()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    message_repo = MessageRepository(postgres_client)
    user_repo = UserRepository(postgres_client)
    
    # –°–æ–∑–¥–∞–µ–º spam_samples_repository
    from src.adapter.repository.spam_samples_repository import SpamSamplesRepository
    spam_samples_repo = SpamSamplesRepository(postgres_client)
    
    # –°–æ–∑–¥–∞–µ–º —à–ª—é–∑—ã (gateways)
    telegram_gateway = TelegramGateway(None)  # Bot –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∑–∂–µ
    
    # OpenAI gateway (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    openai_gateway = None
    if config.openai_api_key:
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI...")
        openai_gateway = OpenAIGateway(
            api_key=config.openai_api_key,
            config={
                "model": config.openai.model,
                "max_tokens": config.openai.max_tokens,
                "temperature": 0.0
            }
        )
    else:
        print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # CAS gateway
    print("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CAS...")
    cas_gateway = CASGateway(
        http_client=http_client,
        cache=redis_cache,
        config={
            "cas_api_url": config.external_apis.get("cas", {}).get("api_url", "https://api.cas.chat"),
            "timeout": config.external_apis.get("cas", {}).get("timeout", 5),
            "cache_ttl": config.external_apis.get("cas", {}).get("cache_ttl", 3600)
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞
    print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ —Å–ø–∞–º–∞...")
    ensemble_config = config.spam_detection.ensemble
    ensemble_config.update({
        "heuristic": config.spam_detection.heuristic,
        "use_ruspam": config.spam_detection.get("use_ruspam", True),
        "ruspam_min_length": config.spam_detection.get("ruspam_min_length", 10)
    })
    
    spam_detector = EnsembleDetector(ensemble_config)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä
    spam_detector.add_cas_detector(cas_gateway)
    print("‚úÖ CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # –î–æ–±–∞–≤–ª—è–µ–º RUSpam –¥–µ—Ç–µ–∫—Ç–æ—Ä
    try:
        spam_detector.add_ruspam_detector()
        print("‚úÖ RUSpam –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è RUSpam –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º ML –¥–µ—Ç–µ–∫—Ç–æ—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    ml_config = config.spam_detection.get("ml", {})
    if ml_config.get("enabled", True):
        try:
            model_path = ml_config.get("model_path", "models")
            spam_detector.add_ml_detector(model_path, ml_config)
            print("‚úÖ ML –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è ML –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä
    if openai_gateway:
        spam_detector.add_openai_detector(openai_gateway)
        print("‚úÖ OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    spam_detector.configure({
        "openai_veto": ensemble_config.get("openai_veto", False),
        "skip_ml_if_detected": ensemble_config.get("skip_ml_if_detected", True),
        "spam_threshold": ensemble_config.get("spam_threshold", 0.6),
        "high_confidence_threshold": ensemble_config.get("high_confidence_threshold", 0.8)
    })
    
    # –°–æ–∑–¥–∞–µ–º use cases
    print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è use cases...")
    check_message_usecase = CheckMessageUseCase(
        message_repo=message_repo,
        user_repo=user_repo,
        spam_detector=spam_detector,
        spam_threshold=ensemble_config.get("spam_threshold", 0.6)
    )
    
    ban_user_usecase = BanUserUseCase(
        user_repo=user_repo,
        message_repo=message_repo,
        telegram_gateway=telegram_gateway
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤...")
    health = await spam_detector.health_check()
    available_detectors = await spam_detector.get_available_detectors()
    
    print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health['status']}")
    print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã: {', '.join(available_detectors)}")
    
    for detector_name, detector_health in health["detectors"].items():
        status = "‚úÖ" if detector_health["status"] == "healthy" else "‚ö†Ô∏è" if detector_health["status"] == "degraded" else "‚ùå"
        print(f"   {status} {detector_name}: {detector_health['status']}")
        if "error" in detector_health:
            print(f"      –û—à–∏–±–∫–∞: {detector_health['error']}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = {
        "postgres_client": postgres_client,
        "redis_cache": redis_cache,
        "http_client": http_client,
        "message_repository": message_repo,
        "user_repository": user_repo,
        "spam_samples_repository": spam_samples_repo,
        "telegram_gateway": telegram_gateway,
        "openai_gateway": openai_gateway,
        "cas_gateway": cas_gateway,
        "spam_detector": spam_detector,
        "check_message_usecase": check_message_usecase,
        "ban_user_usecase": ban_user_usecase,
        "admin_chat_id": config.admin_chat_id,
        "config": config,
        "health": health
    }
    
    return dependencies


async def run_telegram_bot(config, dependencies):
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = AntiSpamBot(
        bot_token=config.bot_token,
        redis_url=config.redis_url,
        dependencies=dependencies
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bot –≤ telegram_gateway
    dependencies["telegram_gateway"].bot = bot.bot
    
    print("‚úÖ Telegram bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print("üîÑ –ó–∞–ø—É—Å–∫ polling...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.start_polling()


async def run_http_server(config, dependencies):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        import uvicorn
        from src.delivery.http.app import create_app
        
        # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        app = create_app(dependencies)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        server_config = uvicorn.Config(
            app=app,
            host=config.http_server.get("host", "0.0.0.0"),
            port=config.http_server.get("port", 8080),
            workers=1,  # –î–ª—è async –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –≤–æ—Ä–∫–µ—Ä
            loop="asyncio",
            log_level=config.log_level.lower(),
            access_log=True
        )
        
        print(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {server_config.host}:{server_config.port}")
        print(f"üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://{server_config.host}:{server_config.port}/docs")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server = uvicorn.Server(server_config)
        await server.serve()
        
    except ImportError:
        print("‚ùå uvicorn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install uvicorn")
        print("‚ö†Ô∏è HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        print("üöÄ –ó–∞–ø—É—Å–∫ Anti-Spam Bot v2.0")
        print("=" * 50)
        print(f"üìä Bot token: {config.bot_token[:20]}...")
        print(f"üíæ Database: {config.database_url.split('@')[-1] if '@' in config.database_url else 'Local SQLite'}")
        print(f"üîë OpenAI: {'‚úÖ Enabled' if config.openai_api_key else '‚ùå Disabled'}")
        print(f"üõ°Ô∏è CAS: {'‚úÖ Enabled' if config.external_apis.get('cas') else '‚ùå Disabled'}")
        print(f"ü§ñ RUSpam: {'‚úÖ Enabled' if config.spam_detection.get('use_ruspam', True) else '‚ùå Disabled'}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        run_mode = os.getenv("RUN_MODE", "telegram").lower()
        print(f"üéØ –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {run_mode}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await setup_dependencies(config)
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if run_mode == "telegram":
            await run_telegram_bot(config, dependencies)
        elif run_mode == "http":
            await run_http_server(config, dependencies)
        elif run_mode == "both":
            # –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            print("üîÑ –ó–∞–ø—É—Å–∫ –≤ dual —Ä–µ–∂–∏–º–µ (Telegram + HTTP)...")
            
            telegram_task = asyncio.create_task(run_telegram_bot(config, dependencies))
            http_task = asyncio.create_task(run_http_server(config, dependencies))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [telegram_task, http_task], 
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {run_mode}")
            print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: telegram, http, both")
            sys.exit(1)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logging.exception("Fatal error")
        sys.exit(1)
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        try:
            if 'dependencies' in locals():
                if dependencies.get("postgres_client"):
                    await dependencies["postgres_client"].disconnect()
                    print("‚úÖ PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                if dependencies.get("redis_cache"):
                    await dependencies["redis_cache"].disconnect()
                    print("‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                if dependencies.get("http_client"):
                    await dependencies["http_client"].close()
                    print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    required_env_vars = ["BOT_TOKEN"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import aiogram
        import asyncpg
        import aioredis
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import fastapi
        import uvicorn
        print("‚úÖ HTTP –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ö†Ô∏è HTTP –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
        print("üí° –î–ª—è HTTP API —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install fastapi uvicorn")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    optional_deps = {
        "transformers": "RUSpam –∏ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
        "torch": "BERT –º–æ–¥–µ–ª–∏",
        "openai": "OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
        "ruSpamLib": "RUSpam –±–∏–±–ª–∏–æ—Ç–µ–∫–∞"
    }
    
    for dep, description in optional_deps.items():
        try:
            __import__(dep)
            print(f"‚úÖ {dep} –¥–æ—Å—Ç—É–ø–µ–Ω ({description})")
        except ImportError:
            print(f"‚ö†Ô∏è {dep} –Ω–µ –Ω–∞–π–¥–µ–Ω - {description} –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")


if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    check_environment()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(main())