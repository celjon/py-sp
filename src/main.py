#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç–∞
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.config.config import load_config
from src.lib.clients.postgres_client import PostgresClient
from src.adapter.cache.redis_cache import RedisCache
from src.adapter.repository.message_repository import MessageRepository
from src.adapter.repository.user_repository import UserRepository
from src.adapter.gateway.telegram_gateway import TelegramGateway
from src.adapter.gateway.openai_gateway import OpenAIGateway
from src.adapter.gateway.cas_gateway import CASGateway
from src.adapter.gateway.spamwatch_gateway import SpamWatchGateway
from src.lib.clients.http_client import HttpClient
from src.domain.service.detector.ensemble import EnsembleDetector
from src.domain.usecase.spam_detection.check_message import CheckMessageUseCase
from src.domain.usecase.spam_detection.ban_user import BanUserUseCase
from src.delivery.telegram.bot import AntiSpamBot


async def setup_dependencies(config):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=getattr(logging, config.log_level.upper()),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
    postgres_client = PostgresClient(config.database_url)
    redis_cache = RedisCache(config.redis_url)
    http_client = HttpClient()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    await postgres_client.connect()
    await redis_cache.connect()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    message_repo = MessageRepository(postgres_client)
    user_repo = UserRepository(postgres_client)
    
    # –°–æ–∑–¥–∞–µ–º spam_samples_repository
    from adapter.repository.spam_samples_repository import SpamSamplesRepository
    spam_samples_repo = SpamSamplesRepository(postgres_client)
    
    # –°–æ–∑–¥–∞–µ–º —à–ª—é–∑—ã (gateways)
    telegram_gateway = TelegramGateway(None)  # Bot –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∑–∂–µ
    
    # OpenAI gateway (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    openai_gateway = None
    if config.openai_api_key:
        openai_gateway = OpenAIGateway(
            api_key=config.openai_api_key,
            config={
                "model": config.openai_model,
                "max_tokens": 150,
                "temperature": 0.0
            }
        )
    
    # CAS gateway
    cas_gateway = CASGateway(
        http_client=http_client,
        cache=redis_cache,
        config={
            "cas_api_url": "https://api.cas.chat",
            "timeout": 5,
            "cache_ttl": 3600
        }
    )
    
    # SpamWatch gateway (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    spamwatch_gateway = None
    if config.spamwatch_api_key:
        spamwatch_gateway = SpamWatchGateway(
            api_token=config.spamwatch_api_key,
            http_client=http_client,
            cache=redis_cache,
            config={
                "timeout": 5,
                "cache_ttl": 3600
            }
        )
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞
    spam_detector = EnsembleDetector()
    spam_detector.add_cas_detector(cas_gateway)
    if spamwatch_gateway:
        spam_detector.add_spamwatch_detector(spamwatch_gateway)
    if openai_gateway:
        spam_detector.add_openai_detector(openai_gateway)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    spam_detector.configure({
        "openai_veto": False,  # OpenAI –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏, –Ω–µ –¥–ª—è veto
        "skip_ml_if_detected": True
    })
    
    # –°–æ–∑–¥–∞–µ–º use cases
    check_message_usecase = CheckMessageUseCase(
        message_repo=message_repo,
        user_repo=user_repo,
        spam_detector=spam_detector,
        spam_threshold=0.6
    )
    
    ban_user_usecase = BanUserUseCase(
        user_repo=user_repo,
        message_repo=message_repo,
        telegram_gateway=telegram_gateway
    )
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = {
        "postgres_client": postgres_client,
        "redis_cache": redis_cache,
        "http_client": http_client,
        "message_repository": message_repo,
        "user_repository": user_repo,
        "spam_samples_repository": spam_samples_repo,
        "telegram_gateway": telegram_gateway,
        "openai_gateway": openai_gateway,
        "cas_gateway": cas_gateway,
        "spamwatch_gateway": spamwatch_gateway,
        "spam_detector": spam_detector,
        "check_message_usecase": check_message_usecase,
        "ban_user_usecase": ban_user_usecase,
        "admin_chat_id": config.admin_chat_id,
    }
    
    return dependencies


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        print(f"üöÄ Starting Anti-Spam Bot...")
        print(f"üìä Bot token: {config.bot_token[:20]}...")
        print(f"üíæ Database: {config.database_url.split('@')[-1] if '@' in config.database_url else 'SQLite'}")
        print(f"üîë OpenAI: {'‚úÖ Enabled' if config.openai_api_key else '‚ùå Disabled'}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await setup_dependencies(config)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = AntiSpamBot(
            bot_token=config.bot_token,
            redis_url=config.redis_url,
            dependencies=dependencies
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bot –≤ telegram_gateway
        dependencies["telegram_gateway"].bot = bot.bot
        
        print("‚úÖ Bot dependencies initialized")
        print("ü§ñ Starting Telegram bot polling...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start_polling()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Error starting bot: {e}")
        logging.exception("Fatal error")
        sys.exit(1)
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("üßπ Cleaning up resources...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        try:
            if 'dependencies' in locals():
                if dependencies.get("postgres_client"):
                    await dependencies["postgres_client"].disconnect()
                if dependencies.get("redis_cache"):
                    await dependencies["redis_cache"].disconnect()
                if dependencies.get("http_client"):
                    await dependencies["http_client"].close()
        except Exception as e:
            print(f"‚ö†Ô∏è  Error during cleanup: {e}")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ["BOT_TOKEN"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Missing required environment variables: {', '.join(missing_vars)}")
        print("üí° Copy env.example to .env and fill in the required values")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(main())

