# src/main.py
"""
Production-Ready AntiSpam Bot v2.0 Main Application
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö production –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import sys
import asyncio
import logging
import signal
import traceback
import time
from contextlib import asynccontextmanager
from typing import Dict, Any, Optional

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # –ï—Å–ª–∏ python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä—É—á–Ω—É—é
    env_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value

import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, Response
from fastapi.staticfiles import StaticFiles

# Core imports
from .config.config import load_config
from .config.dependencies import (
    setup_production_services,
    validate_production_config,
    ProductionServices,
)

# HTTP routes - API —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç

# Services
from .domain.service.monitoring.prometheus_metrics import (
    PrometheusMetrics,
    MetricsMiddleware,
    create_prometheus_metrics,
)
# ErrorHandler —É–¥–∞–ª–µ–Ω

# Bot imports
from .delivery.telegram.bot import AntiSpamBot

# Global state
app_state = {
    "telegram_bot": None,
    "production_services": None,
    "metrics": None,
    "error_handler": None,
    "shutdown_event": asyncio.Event(),
}


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    logger = logging.getLogger(__name__)
    logger.info("[START] Starting AntiSpam Bot v2.0...")

    try:
        # Startup
        await startup_application()
        logger.info("[OK] Application started successfully")

        yield

    except Exception as e:
        logger.error(f"[ERROR] Startup failed: {e}")
        raise
    finally:
        # Shutdown
        logger.info("üõë Shutting down application...")
        try:
            await shutdown_application()
            logger.info("[OK] Application shutdown complete")
        except Exception as e:
            logger.error(f"[WARN] Shutdown error: {e}")


async def startup_application():
    """Application startup logic"""
    logger = logging.getLogger(__name__)

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Config –≤ –ø–ª–æ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        config_dict = config_to_dict(config)
        validated_config = validate_production_config(config_dict)
        logger.info("[OK] Configuration loaded and validated")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging(validated_config)
        logger.info("[OK] Logging configured")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production —Å–µ—Ä–≤–∏—Å–æ–≤
        production_services = await setup_production_services(validated_config)
        app_state["production_services"] = production_services
        logger.info("[OK] Production services initialized")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        metrics = create_prometheus_metrics()
        app_state["metrics"] = metrics

        # –ó–∞–ø—É—Å–∫ Prometheus —Å–µ—Ä–≤–µ—Ä–∞
        if validated_config.get("metrics", {}).get("enabled", True):
            metrics_port = validated_config.get("metrics", {}).get("prometheus_port", 9090)
            try:
                metrics.start_metrics_server(metrics_port)
                logger.info(f"[OK] Prometheus metrics server started on port {metrics_port}")
            except Exception as e:
                logger.warning(f"[WARN] Failed to start metrics server: {e}")

        # Error handler —É–¥–∞–ª–µ–Ω

        # HTTP API components –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        run_mode = os.getenv("RUN_MODE", "both").lower()
        logger.info(f"[INFO] Running in {run_mode} mode")

        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        if run_mode in ("telegram", "both"):
            await start_telegram_bot(validated_config, production_services)
            logger.info("[OK] Telegram bot started")

        logger.info("[SUCCESS] All services initialized successfully!")

    except Exception as e:
        logger.error(f"[ERROR] Startup failed: {e}")
        logger.error(traceback.format_exc())
        raise


async def shutdown_application():
    """Application shutdown logic"""
    logger = logging.getLogger(__name__)

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        app_state["shutdown_event"].set()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        if app_state["telegram_bot"]:
            try:
                await app_state["telegram_bot"].stop()
                logger.info("[OK] Telegram bot stopped")
            except Exception as e:
                logger.error(f"[WARN] Error stopping Telegram bot: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º production —Å–µ—Ä–≤–∏—Å—ã
        if app_state["production_services"]:
            services = app_state["production_services"]

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä
            if app_state["metrics"]:
                try:
                    app_state["metrics"].stop_metrics_server()
                    logger.info("[OK] Metrics server stopped")
                except Exception as e:
                    logger.warning(f"[WARN] Error stopping metrics server: {e}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º PostgreSQL
            if services.postgres_client:
                try:
                    await services.postgres_client.disconnect()
                    logger.info("[OK] PostgreSQL disconnected")
                except Exception as e:
                    logger.error(f"[WARN] Error disconnecting PostgreSQL: {e}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
            if services.redis_client:
                try:
                    await services.redis_client.disconnect()
                    logger.info("[OK] Redis disconnected")
                except Exception as e:
                    logger.error(f"[WARN] Error disconnecting Redis: {e}")

    except Exception as e:
        logger.error(f"[WARN] Shutdown error: {e}")
        logger.error(traceback.format_exc())


def setup_logging(config: Dict[str, Any]):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_config = config.get("logging", {})

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_file = log_config.get("file", "logs/antispam-bot.log")
    log_dir = os.path.dirname(log_file)
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir, exist_ok=True)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [logging.StreamHandler(sys.stdout)]

    if log_file:
        handlers.append(logging.FileHandler(log_file, encoding="utf-8"))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=getattr(logging, log_config.get("level", "INFO")),
        format=log_config.get("format", "%(asctime)s - %(name)s - %(levelname)s - %(message)s"),
        handlers=handlers,
        force=True,  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structured logging –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if log_config.get("structured", False):
        try:
            import structlog

            structlog.configure(
                processors=[
                    structlog.stdlib.filter_by_level,
                    structlog.stdlib.add_logger_name,
                    structlog.stdlib.add_log_level,
                    structlog.stdlib.PositionalArgumentsFormatter(),
                    structlog.processors.TimeStamper(fmt="iso"),
                    structlog.processors.JSONRenderer(),
                ],
                wrapper_class=structlog.stdlib.BoundLogger,
                logger_factory=structlog.stdlib.LoggerFactory(),
                cache_logger_on_first_use=True,
            )
            print("‚úÖ Structured logging configured")
        except ImportError:
            print("‚ö†Ô∏è structlog not available, using standard logging")


async def start_telegram_bot(config: Dict[str, Any], services: ProductionServices):
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    logger = logging.getLogger(__name__)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        bot_token = config.get("bot_token") or config.get("telegram", {}).get("token")
        if not bot_token:
            raise ValueError("BOT_TOKEN is required")

        # –ü–æ–ª—É—á–∞–µ–º Redis URL
        redis_url = config.get("redis_url") or config.get("redis", {}).get("url")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –±–æ—Ç–∞ - —Ç–æ–ª—å–∫–æ Telegram –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        bot_dependencies = {
            # Domain Services
            "ensemble_detector": services.ensemble_detector,

            # Repositories
            "user_repository": services.user_repo,
            "message_repository": services.message_repo,
            "spam_samples_repository": services.spam_samples_repo,
            "chat_repository": services.chat_repo,

            # Use Cases
            "check_message_usecase": services.check_message_usecase,
            "ban_user_usecase": services.ban_user_usecase,

            # Infrastructure
            "postgres_client": services.postgres_client,
            "redis_client": services.redis_client,
            "redis_cache": services.redis_cache,

            # Gateways
            "cas_gateway": services.cas_gateway,
            "bothub_gateway": services.bothub_gateway,

            # Configuration
            "config": config,
            "admin_chat_id": config.get("admin_chat_id"),
            "admin_users": config.get("admin_users", []),
        }

        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = AntiSpamBot(bot_token=bot_token, redis_url=redis_url, dependencies=bot_dependencies)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start_polling()
        app_state["telegram_bot"] = bot

        logger.info("[OK] Telegram bot started successfully")

    except Exception as e:
        logger.error(f"[ERROR] Failed to start Telegram bot: {e}")
        raise


def setup_middleware(
    app: FastAPI, services: ProductionServices, metrics: PrometheusMetrics, error_handler
):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è FastAPI"""

    # CORS middleware (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
    if os.getenv("ENVIRONMENT", "development") == "development":
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )

    # Metrics middleware
    app.add_middleware(MetricsMiddleware, metrics=metrics)

    # API Auth middleware —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç


def setup_basic_routes(app: FastAPI):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    # Health check endpoint
    @app.get("/health", tags=["System"])
    async def health_check():
        """Production health check endpoint"""
        try:
            health_data = {
                "status": "healthy",
                "version": "2.0.0",
                "timestamp": time.time(),
                "components": {},
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º production services
            if app_state.get("production_services"):
                try:
                    services_health = await app_state["production_services"].health_check()
                    health_data["components"]["production_services"] = services_health
                except Exception as e:
                    health_data["components"]["production_services"] = {"status": "error", "error": str(e)}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram bot
            if app_state.get("telegram_bot"):
                try:
                    bot_health = {
                        "status": "healthy" if app_state["telegram_bot"].is_running else "stopped"
                    }
                    health_data["components"]["telegram_bot"] = bot_health
                except Exception as e:
                    health_data["components"]["telegram_bot"] = {"status": "error", "error": str(e)}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if app_state.get("metrics"):
                try:
                    metrics_health = await app_state["metrics"].health_check() if hasattr(app_state["metrics"], "health_check") and callable(app_state["metrics"].health_check) else {"status": "healthy"}
                    health_data["components"]["metrics"] = metrics_health
                except Exception as e:
                    health_data["components"]["metrics"] = {"status": "error", "error": str(e)}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º error handler
            if app_state.get("error_handler"):
                try:
                    error_handler_health = await app_state["error_handler"].health_check() if hasattr(app_state["error_handler"], "health_check") and callable(app_state["error_handler"].health_check) else {"status": "healthy"}
                    health_data["components"]["error_handler"] = error_handler_health
                except Exception as e:
                    health_data["components"]["error_handler"] = {"status": "error", "error": str(e)}

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            overall_status = "healthy"
            for component_health in health_data["components"].values():
                if isinstance(component_health, dict):
                    if component_health.get("status") == "error":
                        overall_status = "error"
                        break
                    elif component_health.get("status") in ["degraded", "warning"]:
                        overall_status = "degraded"

            health_data["status"] = overall_status

            return health_data

        except Exception as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Health check failed: {e}")
            return JSONResponse(
                status_code=500,
                content={"status": "error", "timestamp": time.time(), "error": str(e)},
            )

    # Metrics endpoint
    @app.get("/metrics", tags=["System"])
    async def get_metrics():
        """Prometheus metrics endpoint"""
        try:
            if app_state.get("metrics"):
                metrics_data = app_state["metrics"].get_metrics()
                return Response(
                    content=metrics_data, media_type="text/plain; version=0.0.4; charset=utf-8"
                )
            else:
                return JSONResponse(status_code=503, content={"error": "Metrics not available"})
        except Exception as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Metrics endpoint failed: {e}")
            return JSONResponse(status_code=500, content={"error": "Internal server error"})

    print("[ROUTES] Basic routes configured")


def setup_routes(app: FastAPI):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–∫–ª—é—á–∞—è API"""
    # API routes
    # API —Ä–æ—É—Ç—ã —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç

    print("[ROUTES] Full API routes configured")


def config_to_dict(config) -> Dict[str, Any]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Config –æ–±—ä–µ–∫—Ç –≤ –ø–ª–æ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å"""
    result = {}

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    result["bot_token"] = os.getenv("BOT_TOKEN")
    result["database_url"] = os.getenv("DATABASE_URL")
    result["redis_url"] = os.getenv("REDIS_URL")
    # OpenRouter —É–¥–∞–ª–µ–Ω
    result["admin_chat_id"] = os.getenv("ADMIN_CHAT_ID")
    result["admin_users"] = (
        os.getenv("ADMIN_USERS", "").split(",") if os.getenv("ADMIN_USERS") else []
    )
    result["environment"] = os.getenv("ENVIRONMENT", "development")
    result["log_level"] = os.getenv("LOG_LEVEL", "INFO")
    result["jwt_secret"] = os.getenv("JWT_SECRET")
    result["api_secret"] = os.getenv("API_SECRET_KEY")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥ –æ–±—ä–µ–∫—Ç, –±–µ—Ä–µ–º –∏–∑ –Ω–µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if hasattr(config, "database") and hasattr(config.database, "url"):
        result["database_url"] = result["database_url"] or config.database.url
    if hasattr(config, "redis") and hasattr(config.redis, "url"):
        result["redis_url"] = config.redis.url
    if hasattr(config, "telegram") and hasattr(config.telegram, "token"):
        result["bot_token"] = result["bot_token"] or config.telegram.token

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–º –¥–µ—Ç–µ–∫—Ü–∏–∏
    if hasattr(config, "spam_detection"):
        result["spam_detection"] = (
            vars(config.spam_detection)
            if hasattr(config.spam_detection, "__dict__")
            else config.spam_detection
        )

    # OpenRouter —É–¥–∞–ª–µ–Ω

    # –í–Ω–µ—à–Ω–∏–µ API
    if hasattr(config, "external_apis"):
        result["external_apis"] = (
            vars(config.external_apis)
            if hasattr(config.external_apis, "__dict__")
            else config.external_apis
        )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if hasattr(config, "logging"):
        result["logging"] = (
            vars(config.logging) if hasattr(config.logging, "__dict__") else config.logging
        )

    # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è JWT
    result["api"] = {
        "auth": {
            "jwt_secret": result["jwt_secret"]
            or "development_jwt_secret_32_chars_minimum_length_required",
            "jwt_algorithm": "HS256",
            "access_token_expire_minutes": 30,
        },
        "rate_limit": {
            "default_requests_per_minute": 60,
            "default_requests_per_day": 5000,
            "burst_limit": 10,
        },
    }

    return result


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""

    def signal_handler(signum, frame):
        logger = logging.getLogger(__name__)
        logger.info(f"Received signal {signum}, initiating graceful shutdown...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if app_state["shutdown_event"]:
            app_state["shutdown_event"].set()

        # –î–ª—è synchronous contexts
        if hasattr(asyncio, "_get_running_loop"):
            try:
                loop = asyncio.get_running_loop()
                loop.create_task(shutdown_application())
            except RuntimeError:
                pass

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è UNIX —Å–∏–≥–Ω–∞–ª–æ–≤
    if hasattr(signal, "SIGTERM"):
        signal.signal(signal.SIGTERM, signal_handler)
    if hasattr(signal, "SIGINT"):
        signal.signal(signal.SIGINT, signal_handler)


# FastAPI app instance
def create_app() -> FastAPI:
    """Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = FastAPI(
        title="AntiSpam Detection API",
        description="Production-ready API –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞ –≤ Telegram",
        version="2.0.0",
        lifespan=lifespan,
        docs_url="/docs",
        redoc_url="/redoc",
        openapi_url="/openapi.json",
        # Production settings
        debug=os.getenv("DEBUG", "false").lower() == "true",
        # Security headers
        responses={
            422: {"description": "Validation Error"},
            429: {"description": "Rate Limit Exceeded"},
            500: {"description": "Internal Server Error"},
        },
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_basic_routes(app)

    return app


app = create_app()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ signal handlers
setup_signal_handlers()


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
async def setup_app_components():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ app state –ø–æ—Å–ª–µ startup
        services = app_state.get("production_services")
        metrics = app_state.get("metrics")
        error_handler = app_state.get("error_handler")

        if services and metrics and error_handler:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
            setup_middleware(app, services, metrics, error_handler)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
            setup_routes(app)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            # OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞

            logger.info("[OK] App components configured")

    except Exception as e:
        logger.error(f"[ERROR] Failed to setup app components: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        run_mode = os.getenv("RUN_MODE", "both").lower()
        environment = os.getenv("ENVIRONMENT", "development")

        logger.info(f"[START] Starting AntiSpam Bot v2.0 in {run_mode} mode ({environment})")

        if run_mode == "telegram":
            # –¢–æ–ª—å–∫–æ Telegram bot
            config = load_config()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Config –≤ –ø–ª–æ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            config_dict = config_to_dict(config)
            validated_config = validate_production_config(config_dict)
            setup_logging(validated_config)

            services = await setup_production_services(validated_config)
            await start_telegram_bot(validated_config, services)

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while not app_state["shutdown_event"].is_set():
                await asyncio.sleep(1)

        elif run_mode == "http":
            # –¢–æ–ª—å–∫–æ HTTP API
            await setup_app_components()

            # –ó–∞–ø—É—Å–∫ uvicorn —Å–µ—Ä–≤–µ—Ä–∞
            uvicorn_config = {
                "host": os.getenv("HOST", "0.0.0.0"),
                "port": int(os.getenv("PORT", 8080)),
                "reload": environment == "development",
                "log_level": "info",
                "access_log": True,
                "use_colors": environment == "development",
                "workers": 1 if environment == "development" else int(os.getenv("WORKERS", 4)),
            }

            logger.info(
                f"[WEB] Starting HTTP server on {uvicorn_config['host']}:{uvicorn_config['port']}"
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–º–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ reload –∏–ª–∏ workers > 1 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            if uvicorn_config.get("reload") or uvicorn_config.get("workers", 1) > 1:
                await uvicorn.run("src.main:app", **uvicorn_config)
            else:
                await uvicorn.run(app, **uvicorn_config)

        else:  # both
            # HTTP + Telegram - –∑–∞–ø—É—Å–∫–∞–µ–º uvicorn —Å lifespan
            uvicorn_config = uvicorn.Config(
                app=app,
                host=os.getenv("HTTP_HOST", os.getenv("HOST", "0.0.0.0")),
                port=int(os.getenv("HTTP_PORT", os.getenv("PORT", "8080"))),
                log_level=os.getenv("LOG_LEVEL", "info").lower(),
                access_log=True,
            )

            logger.info(f"[BOTH] Starting HTTP+Telegram in both mode")

            # –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn - lifespan –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç Telegram –±–æ—Ç–∞
            server = uvicorn.Server(uvicorn_config)
            await server.serve()

    except KeyboardInterrupt:
        logger.info("üëã Received KeyboardInterrupt, shutting down...")
    except Exception as e:
        logger.error(f"[ERROR] Application failed: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(main())
