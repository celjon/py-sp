# src/main.py
"""
Production-Ready AntiSpam Bot v2.0 Main Application
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö production –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import sys
import asyncio
import logging
import signal
from contextlib import asynccontextmanager
from typing import Dict, Any, Optional

import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles

# Core imports
from .config.config import load_config
from .config.dependencies import (
    setup_production_services, 
    integrate_with_fastapi_app,
    validate_production_config,
    ProductionServices
)

# HTTP routes
from .delivery.http.routes.auth_v2 import router as auth_router
from .delivery.http.routes.public_api_v2 import router as public_api_router
from .delivery.http.schema.openapi_generator import setup_openapi_documentation

# Services
from .domain.service.monitoring.prometheus_metrics import (
    PrometheusMetrics, 
    MetricsMiddleware,
    create_prometheus_metrics
)
from .domain.service.error_handling.error_handler import (
    ProductionErrorHandler,
    create_error_handler
)

# Bot imports
from .delivery.telegram.bot import TelegramBot
from .delivery.telegram.handlers import setup_handlers


# Global state
app_state = {
    "telegram_bot": None,
    "production_services": None,
    "metrics": None,
    "error_handler": None,
    "shutdown_event": asyncio.Event()
}


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    print("üöÄ Starting AntiSpam Bot v2.0...")
    
    try:
        # Startup
        await startup_application()
        print("‚úÖ Application started successfully")
        
        yield
        
    finally:
        # Shutdown
        print("üõë Shutting down application...")
        await shutdown_application()
        print("‚úÖ Application shutdown complete")


async def startup_application():
    """Application startup logic"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        validated_config = validate_production_config(config)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging(validated_config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production —Å–µ—Ä–≤–∏—Å–æ–≤
        production_services = await setup_production_services(validated_config)
        app_state["production_services"] = production_services
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        metrics = create_prometheus_metrics()
        app_state["metrics"] = metrics
        
        # –ó–∞–ø—É—Å–∫ Prometheus —Å–µ—Ä–≤–µ—Ä–∞
        if validated_config.get("metrics", {}).get("enabled", True):
            metrics_port = validated_config.get("metrics", {}).get("prometheus_port", 9090)
            metrics.start_metrics_server(metrics_port)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è error handler
        error_handler = create_error_handler(
            service_name="antispam-api",
            config=validated_config.get("error_handling", {})
        )
        app_state["error_handler"] = error_handler
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        run_mode = os.getenv("RUN_MODE", "both").lower()
        if run_mode in ["telegram", "both"]:
            await start_telegram_bot(validated_config, production_services)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å FastAPI
        integrate_with_fastapi_app(app, production_services, validated_config)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
        setup_middleware(app, production_services, metrics, error_handler)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
        setup_routes(app)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        setup_openapi_documentation(app)
        
        print("üéâ All services initialized successfully!")
        
    except Exception as e:
        print(f"‚ùå Startup failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


async def shutdown_application():
    """Application shutdown logic"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        app_state["shutdown_event"].set()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        if app_state["telegram_bot"]:
            await app_state["telegram_bot"].stop()
            print("‚úÖ Telegram bot stopped")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º production —Å–µ—Ä–≤–∏—Å—ã
        if app_state["production_services"]:
            services = app_state["production_services"]
            
            if services.postgres_client:
                await services.postgres_client.disconnect()
                print("‚úÖ PostgreSQL disconnected")
            
            if services.redis_client:
                await services.redis_client.disconnect()
                print("‚úÖ Redis disconnected")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Shutdown error: {e}")


def setup_logging(config: Dict[str, Any]):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_config = config.get("logging", {})
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=getattr(logging, log_config.get("level", "INFO")),
        format=log_config.get("format", "%(asctime)s - %(name)s - %(levelname)s - %(message)s"),
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler(log_config.get("file", "logs/antispam-bot.log"), encoding='utf-8')
        ] if log_config.get("file") else [logging.StreamHandler(sys.stdout)]
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structured logging –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if log_config.get("structured", False):
        try:
            import structlog
            structlog.configure(
                processors=[
                    structlog.stdlib.filter_by_level,
                    structlog.stdlib.add_logger_name,
                    structlog.stdlib.add_log_level,
                    structlog.stdlib.PositionalArgumentsFormatter(),
                    structlog.processors.TimeStamper(fmt="iso"),
                    structlog.processors.StackInfoRenderer(),
                    structlog.processors.format_exc_info,
                    structlog.processors.UnicodeDecoder(),
                    structlog.processors.JSONRenderer()
                ],
                context_class=dict,
                logger_factory=structlog.stdlib.LoggerFactory(),
                wrapper_class=structlog.stdlib.BoundLogger,
                cache_logger_on_first_use=True,
            )
            print("‚úÖ Structured logging enabled")
        except ImportError:
            print("‚ö†Ô∏è structlog not available, using standard logging")


async def start_telegram_bot(config: Dict[str, Any], production_services: ProductionServices):
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        if not config.get("bot_token"):
            print("‚ö†Ô∏è Bot token not configured, skipping Telegram bot")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        telegram_bot = TelegramBot(
            token=config["bot_token"],
            admin_chat_id=config.get("admin_chat_id"),
            production_services=production_services
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º handlers
        setup_handlers(
            telegram_bot,
            spam_detector=None,  # TODO: Inject from production_services
            admin_chat_id=config.get("admin_chat_id")
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(telegram_bot.start())
        app_state["telegram_bot"] = telegram_bot
        
        print("‚úÖ Telegram bot started")
        
    except Exception as e:
        print(f"‚ùå Failed to start Telegram bot: {e}")
        raise


def setup_middleware(
    app: FastAPI, 
    production_services: ProductionServices,
    metrics: PrometheusMetrics,
    error_handler: ProductionErrorHandler
):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
    
    # CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # –í production –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Metrics middleware
    app.add_middleware(MetricsMiddleware, metrics=metrics)
    
    # Global error handler
    @app.exception_handler(Exception)
    async def global_exception_handler(request: Request, exc: Exception):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        return await error_handler.handle_error(exc, request=request)
    
    @app.exception_handler(HTTPException)
    async def http_exception_handler(request: Request, exc: HTTPException):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –æ—à–∏–±–æ–∫"""
        return await error_handler.handle_error(exc, request=request)
    
    print("‚úÖ Middleware configured")


def setup_routes(app: FastAPI):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    
    # API routes
    app.include_router(
        auth_router,
        prefix="/api/v1/auth",
        tags=["Authentication"]
    )
    
    app.include_router(
        public_api_router,
        prefix="/api/v1",
        tags=["Public API"]
    )
    
    # Root endpoint
    @app.get("/", tags=["System"])
    async def root():
        """Root endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            "service": "AntiSpam Detection API",
            "version": "2.0.0",
            "status": "operational",
            "documentation": "/docs",
            "metrics": "/metrics",
            "health": "/health"
        }
    
    # Health check endpoint
    @app.get("/health", tags=["System"])
    async def health_check():
        """Comprehensive health check"""
        try:
            health_data = {
                "status": "healthy",
                "timestamp": asyncio.get_event_loop().time(),
                "version": "2.0.0",
                "components": {}
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º production —Å–µ—Ä–≤–∏—Å—ã
            if app_state["production_services"]:
                services_health = app_state["production_services"].health_check()
                health_data["components"]["services"] = services_health
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if app_state["metrics"]:
                metrics_health = app_state["metrics"].health_check()
                health_data["components"]["metrics"] = metrics_health
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º error handler
            if app_state["error_handler"]:
                error_handler_health = app_state["error_handler"].health_check()
                health_data["components"]["error_handler"] = error_handler_health
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            overall_status = "healthy"
            for component_health in health_data["components"].values():
                if isinstance(component_health, dict):
                    if component_health.get("status") == "error":
                        overall_status = "error"
                        break
                    elif component_health.get("status") in ["degraded", "warning"]:
                        overall_status = "degraded"
            
            health_data["status"] = overall_status
            
            return health_data
            
        except Exception as e:
            return {
                "status": "error",
                "timestamp": asyncio.get_event_loop().time(),
                "error": str(e)
            }
    
    # Metrics endpoint
    @app.get("/metrics", tags=["System"])
    async def get_metrics():
        """Prometheus metrics endpoint"""
        if app_state["metrics"]:
            metrics_data = app_state["metrics"].get_metrics()
            return JSONResponse(
                content=metrics_data.decode('utf-8'),
                media_type="text/plain"
            )
        else:
            return {"error": "Metrics not available"}
    
    print("‚úÖ Routes configured")


# FastAPI app instance
app = FastAPI(
    title="AntiSpam Detection API",
    description="Production-ready API –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞",
    version="2.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    def signal_handler(signum, frame):
        print(f"\nüõë Received signal {signum}, initiating graceful shutdown...")
        app_state["shutdown_event"].set()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def run_telegram_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞"""
    print("ü§ñ Starting Telegram bot only...")
    
    try:
        config = load_config()
        production_services = await setup_production_services(config)
        
        await start_telegram_bot(config, production_services)
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await app_state["shutdown_event"].wait()
        
    except KeyboardInterrupt:
        print("\nüõë Interrupted by user")
    finally:
        await shutdown_application()


async def run_http_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ HTTP API"""
    print("üåê Starting HTTP API only...")
    
    config = load_config()
    http_config = config.get("http_server", {})
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ uvicorn
    uvicorn_config = uvicorn.Config(
        app,
        host=http_config.get("host", "0.0.0.0"),
        port=http_config.get("port", 8080),
        workers=1,  # –í lifespan —Ä–µ–∂–∏–º–µ workers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1
        log_level=config.get("logging", {}).get("level", "info").lower(),
        access_log=True,
        use_colors=True
    )
    
    server = uvicorn.Server(uvicorn_config)
    
    try:
        await server.serve()
    except KeyboardInterrupt:
        print("\nüõë Interrupted by user")


async def run_both():
    """–ó–∞–ø—É—Å–∫ –∏ Telegram –±–æ—Ç–∞, –∏ HTTP API"""
    print("üöÄ Starting both Telegram bot and HTTP API...")
    
    config = load_config()
    http_config = config.get("http_server", {})
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ uvicorn –¥–ª—è combined —Ä–µ–∂–∏–º–∞
    uvicorn_config = uvicorn.Config(
        app,
        host=http_config.get("host", "0.0.0.0"),
        port=http_config.get("port", 8080),
        workers=1,
        log_level=config.get("logging", {}).get("level", "info").lower(),
        access_log=True,
        use_colors=True
    )
    
    server = uvicorn.Server(uvicorn_config)
    
    try:
        await server.serve()
    except KeyboardInterrupt:
        print("\nüõë Interrupted by user")


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    print("üîç Checking environment...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ required")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ["DATABASE_URL"]
    missing_vars = []
    
    for var in required_env_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Missing required environment variables: {', '.join(missing_vars)}")
        print("   Please check your .env file")
        sys.exit(1)
    
    print("‚úÖ Environment check passed")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("=" * 60)
    print("üõ°Ô∏è  ANTISPAM BOT v2.0 - PRODUCTION READY")
    print("üèóÔ∏è  Modern Architecture: CAS + RUSpam + OpenAI")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_environment()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ signal handlers
    setup_signal_handlers()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
    run_mode = os.getenv("RUN_MODE", "both").lower()
    
    print(f"üéØ Run mode: {run_mode}")
    
    try:
        if run_mode == "telegram":
            await run_telegram_only()
        elif run_mode == "http":
            await run_http_only()
        elif run_mode == "both":
            await run_both()
        else:
            print(f"‚ùå Invalid RUN_MODE: {run_mode}")
            print("   Valid options: telegram, http, both")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Application failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        sys.exit(1)