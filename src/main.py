# src/main.py
"""
Production-Ready AntiSpam Bot v2.0 Main Application
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö production –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import sys
import asyncio
import logging
import signal
from contextlib import asynccontextmanager
from typing import Dict, Any, Optional

import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles

# Core imports
from .config.config import load_config
from .config.dependencies import (
    setup_production_services, 
    integrate_with_fastapi_app,
    validate_production_config,
    ProductionServices
)

# HTTP routes
from .delivery.http.routes.auth_v2 import router as auth_router
from .delivery.http.routes.public_api_v2 import router as public_api_router
from .delivery.http.schema.openapi_generator import setup_openapi_documentation

# Services
from .domain.service.monitoring.prometheus_metrics import (
    PrometheusMetrics, 
    MetricsMiddleware,
    create_prometheus_metrics
)
from .domain.service.error_handling.error_handler import (
    ProductionErrorHandler,
    create_error_handler
)

# Bot imports
from .delivery.telegram.bot import TelegramBot
from .delivery.telegram.handlers import setup_handlers

# Global state
app_state = {
    "telegram_bot": None,
    "production_services": None,
    "metrics": None,
    "error_handler": None,
    "shutdown_event": asyncio.Event()
}


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    logger = logging.getLogger(__name__)
    logger.info("üöÄ Starting AntiSpam Bot v2.0...")
    
    try:
        # Startup
        await startup_application()
        logger.info("‚úÖ Application started successfully")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå Startup failed: {e}")
        raise
    finally:
        # Shutdown
        logger.info("üõë Shutting down application...")
        try:
            await shutdown_application()
            logger.info("‚úÖ Application shutdown complete")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Shutdown error: {e}")


async def startup_application():
    """Application startup logic"""
    logger = logging.getLogger(__name__)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        validated_config = validate_production_config(config)
        logger.info("‚úÖ Configuration loaded and validated")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging(validated_config)
        logger.info("‚úÖ Logging configured")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production —Å–µ—Ä–≤–∏—Å–æ–≤
        production_services = await setup_production_services(validated_config)
        app_state["production_services"] = production_services
        logger.info("‚úÖ Production services initialized")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        metrics = create_prometheus_metrics()
        app_state["metrics"] = metrics
        
        # –ó–∞–ø—É—Å–∫ Prometheus —Å–µ—Ä–≤–µ—Ä–∞
        if validated_config.get("metrics", {}).get("enabled", True):
            metrics_port = validated_config.get("metrics", {}).get("prometheus_port", 9090)
            try:
                metrics.start_metrics_server(metrics_port)
                logger.info(f"‚úÖ Prometheus metrics server started on port {metrics_port}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Failed to start metrics server: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è error handler
        error_handler = create_error_handler(
            service_name="antispam-api",
            config=validated_config.get("error_handling", {})
        )
        app_state["error_handler"] = error_handler
        logger.info("‚úÖ Error handler configured")
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        run_mode = os.getenv("RUN_MODE", "both").lower()
        if run_mode in ["telegram", "both"]:
            await start_telegram_bot(validated_config, production_services)
            logger.info("‚úÖ Telegram bot started")
        
        logger.info("üéâ All services initialized successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Startup failed: {e}")
        logger.error(traceback.format_exc())
        raise


async def shutdown_application():
    """Application shutdown logic"""
    logger = logging.getLogger(__name__)
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        app_state["shutdown_event"].set()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        if app_state["telegram_bot"]:
            try:
                await app_state["telegram_bot"].stop()
                logger.info("‚úÖ Telegram bot stopped")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è Error stopping Telegram bot: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º production —Å–µ—Ä–≤–∏—Å—ã
        if app_state["production_services"]:
            services = app_state["production_services"]
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä
            if app_state["metrics"]:
                try:
                    app_state["metrics"].stop_metrics_server()
                    logger.info("‚úÖ Metrics server stopped")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error stopping metrics server: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º PostgreSQL
            if services.postgres_client:
                try:
                    await services.postgres_client.disconnect()
                    logger.info("‚úÖ PostgreSQL disconnected")
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è Error disconnecting PostgreSQL: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
            if services.redis_client:
                try:
                    await services.redis_client.disconnect()
                    logger.info("‚úÖ Redis disconnected")
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è Error disconnecting Redis: {e}")
        
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Shutdown error: {e}")
        logger.error(traceback.format_exc())


def setup_logging(config: Dict[str, Any]):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_config = config.get("logging", {})
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_file = log_config.get("file", "logs/antispam-bot.log")
    log_dir = os.path.dirname(log_file)
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [logging.StreamHandler(sys.stdout)]
    
    if log_file:
        handlers.append(
            logging.FileHandler(log_file, encoding='utf-8')
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=getattr(logging, log_config.get("level", "INFO")),
        format=log_config.get(
            "format", 
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        ),
        handlers=handlers,
        force=True  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structured logging –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if log_config.get("structured", False):
        try:
            import structlog
            structlog.configure(
                processors=[
                    structlog.stdlib.filter_by_level,
                    structlog.stdlib.add_logger_name,
                    structlog.stdlib.add_log_level,
                    structlog.stdlib.PositionalArgumentsFormatter(),
                    structlog.processors.TimeStamper(fmt="iso"),
                    structlog.processors.JSONRenderer()
                ],
                wrapper_class=structlog.stdlib.BoundLogger,
                logger_factory=structlog.stdlib.LoggerFactory(),
                cache_logger_on_first_use=True,
            )
            print("‚úÖ Structured logging configured")
        except ImportError:
            print("‚ö†Ô∏è structlog not available, using standard logging")


async def start_telegram_bot(config: Dict[str, Any], services: ProductionServices):
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    logger = logging.getLogger(__name__)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = TelegramBot(
            token=config.get("bot_token") or config.get("telegram", {}).get("token"),
            config=config.get("telegram", {})
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(bot.dp, services)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start()
        app_state["telegram_bot"] = bot
        
        logger.info("‚úÖ Telegram bot started successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to start Telegram bot: {e}")
        raise


def setup_middleware(app: FastAPI, services: ProductionServices, metrics: PrometheusMetrics, error_handler):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è FastAPI"""
    
    # CORS middleware (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
    if os.getenv("ENVIRONMENT", "development") == "development":
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    
    # Metrics middleware
    app.add_middleware(MetricsMiddleware, metrics=metrics)
    
    # API Auth middleware (—Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ dependencies)
    auth_middleware = services.api_auth_middleware(app)
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: auth middleware –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ factory pattern –≤ dependencies


def setup_routes(app: FastAPI):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    # API routes
    app.include_router(auth_router, prefix="/api/v1", tags=["Authentication"])
    app.include_router(public_api_router, prefix="/api/v1", tags=["Detection"])
    
    # Health check endpoint
    @app.get("/health", tags=["System"])
    async def health_check():
        """Production health check endpoint"""
        try:
            health_data = {
                "status": "healthy",
                "version": "2.0.0",
                "timestamp": time.time(),
                "components": {}
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º production services
            if app_state["production_services"]:
                services_health = app_state["production_services"].health_check()
                health_data["components"]["production_services"] = services_health
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram bot
            if app_state["telegram_bot"]:
                bot_health = {
                    "status": "healthy" if app_state["telegram_bot"].is_running else "stopped"
                }
                health_data["components"]["telegram_bot"] = bot_health
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if app_state["metrics"]:
                metrics_health = app_state["metrics"].health_check()
                health_data["components"]["metrics"] = metrics_health
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º error handler
            if app_state["error_handler"]:
                error_handler_health = app_state["error_handler"].health_check()
                health_data["components"]["error_handler"] = error_handler_health
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            overall_status = "healthy"
            for component_health in health_data["components"].values():
                if isinstance(component_health, dict):
                    if component_health.get("status") == "error":
                        overall_status = "error"
                        break
                    elif component_health.get("status") in ["degraded", "warning"]:
                        overall_status = "degraded"
            
            health_data["status"] = overall_status
            
            return health_data
            
        except Exception as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Health check failed: {e}")
            return JSONResponse(
                status_code=500,
                content={
                    "status": "error",
                    "timestamp": time.time(),
                    "error": str(e)
                }
            )
    
    # Metrics endpoint
    @app.get("/metrics", tags=["System"])
    async def get_metrics():
        """Prometheus metrics endpoint"""
        try:
            if app_state["metrics"]:
                metrics_data = app_state["metrics"].get_metrics()
                return Response(
                    content=metrics_data,
                    media_type="text/plain; version=0.0.4; charset=utf-8"
                )
            else:
                return JSONResponse(
                    status_code=503,
                    content={"error": "Metrics not available"}
                )
        except Exception as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Metrics endpoint failed: {e}")
            return JSONResponse(
                status_code=500,
                content={"error": "Internal server error"}
            )

    print("‚úÖ Routes configured")


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    def signal_handler(signum, frame):
        logger = logging.getLogger(__name__)
        logger.info(f"Received signal {signum}, initiating graceful shutdown...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if app_state["shutdown_event"]:
            app_state["shutdown_event"].set()
        
        # –î–ª—è synchronous contexts
        if hasattr(asyncio, '_get_running_loop'):
            try:
                loop = asyncio.get_running_loop()
                loop.create_task(shutdown_application())
            except RuntimeError:
                pass
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è UNIX —Å–∏–≥–Ω–∞–ª–æ–≤
    if hasattr(signal, 'SIGTERM'):
        signal.signal(signal.SIGTERM, signal_handler)
    if hasattr(signal, 'SIGINT'):
        signal.signal(signal.SIGINT, signal_handler)


# FastAPI app instance
def create_app() -> FastAPI:
    """Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return FastAPI(
        title="AntiSpam Detection API",
        description="Production-ready API –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞ –≤ Telegram",
        version="2.0.0",
        lifespan=lifespan,
        docs_url="/docs",
        redoc_url="/redoc",
        openapi_url="/openapi.json",
        # Production settings
        debug=os.getenv("DEBUG", "false").lower() == "true",
        # Security headers
        responses={
            422: {"description": "Validation Error"},
            429: {"description": "Rate Limit Exceeded"},
            500: {"description": "Internal Server Error"}
        }
    )


app = create_app()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ signal handlers
setup_signal_handlers()

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
async def setup_app_components():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ app state –ø–æ—Å–ª–µ startup
        services = app_state.get("production_services")
        metrics = app_state.get("metrics")
        error_handler = app_state.get("error_handler")
        
        if services and metrics and error_handler:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
            setup_middleware(app, services, metrics, error_handler)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
            setup_routes(app)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            setup_openapi_documentation(app)
            
            logger.info("‚úÖ App components configured")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to setup app components: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        run_mode = os.getenv("RUN_MODE", "both").lower()
        environment = os.getenv("ENVIRONMENT", "development")
        
        logger.info(f"üöÄ Starting AntiSpam Bot v2.0 in {run_mode} mode ({environment})")
        
        if run_mode == "telegram":
            # –¢–æ–ª—å–∫–æ Telegram bot
            config = load_config()
            validated_config = validate_production_config(config)
            setup_logging(validated_config)
            
            services = await setup_production_services(validated_config)
            await start_telegram_bot(validated_config, services)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while not app_state["shutdown_event"].is_set():
                await asyncio.sleep(1)
                
        elif run_mode == "http":
            # –¢–æ–ª—å–∫–æ HTTP API
            setup_app_components()
            
            # –ó–∞–ø—É—Å–∫ uvicorn —Å–µ—Ä–≤–µ—Ä–∞
            uvicorn_config = {
                "host": os.getenv("HOST", "0.0.0.0"),
                "port": int(os.getenv("PORT", 8080)),
                "reload": environment == "development",
                "log_level": "info",
                "access_log": True,
                "use_colors": environment == "development",
                "workers": 1 if environment == "development" else int(os.getenv("WORKERS", 4))
            }
            
            logger.info(f"üåê Starting HTTP server on {uvicorn_config['host']}:{uvicorn_config['port']}")
            await uvicorn.run(app, **uvicorn_config)
            
        else:  # both
            # HTTP + Telegram
            await setup_app_components()
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            uvicorn_config = {
                "host": os.getenv("HOST", "0.0.0.0"),
                "port": int(os.getenv("PORT", 8080)),
                "reload": False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è production
                "log_level": "info",
                "access_log": True,
                "workers": 1  # –û–¥–∏–Ω worker –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            }
            
            server_task = asyncio.create_task(
                uvicorn.run(app, **uvicorn_config)
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await server_task
            except KeyboardInterrupt:
                logger.info("üëã Received shutdown signal")
                server_task.cancel()
                
                try:
                    await server_task
                except asyncio.CancelledError:
                    pass
    
    except KeyboardInterrupt:
        logger.info("üëã Received KeyboardInterrupt, shutting down...")
    except Exception as e:
        logger.error(f"‚ùå Application failed: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(main())
