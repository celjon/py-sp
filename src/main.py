#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç–∞ —Å –ø—É–±–ª–∏—á–Ω—ã–º API
Production-ready –∫–æ–¥ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π: CAS + RUSpam + OpenAI
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.config.config import load_config
from src.lib.clients.postgres_client import PostgresClient
from src.adapter.cache.redis_cache import RedisCache
from src.adapter.repository.message_repository import MessageRepository
from src.adapter.repository.user_repository import UserRepository
from src.adapter.repository.api_key_repository import ApiKeyRepository
from src.adapter.repository.usage_repository import UsageRepository
from src.adapter.gateway.telegram_gateway import TelegramGateway
from src.adapter.gateway.openai_gateway import OpenAIGateway
from src.adapter.gateway.cas_gateway import CASGateway
from src.lib.clients.http_client import HttpClient
from src.domain.service.detector.ensemble import EnsembleDetector
from src.domain.usecase.spam_detection.check_message import CheckMessageUseCase
from src.domain.usecase.spam_detection.ban_user import BanUserUseCase
from src.delivery.telegram.bot import AntiSpamBot


async def setup_dependencies(config):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è production —Å–∏—Å—Ç–µ–º—ã
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: CAS + RUSpam + OpenAI (–ë–ï–ó —ç–≤—Ä–∏—Å—Ç–∏–∫ –∏ ML)
    """
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=getattr(logging, config.log_level.upper()),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    print("üéØ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: CAS + RUSpam + OpenAI")
    print("‚ùå –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ: —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ + ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
    postgres_client = PostgresClient(config.database_url)
    redis_cache = RedisCache(config.redis_url)
    http_client = HttpClient()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    print("üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    await postgres_client.connect()
    await redis_cache.connect()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    message_repo = MessageRepository(postgres_client)
    user_repo = UserRepository(postgres_client)
    api_key_repo = ApiKeyRepository(postgres_client)
    usage_repo = UsageRepository(postgres_client)
    
    # –°–æ–∑–¥–∞–µ–º spam_samples_repository
    from src.adapter.repository.spam_samples_repository import SpamSamplesRepository
    spam_samples_repo = SpamSamplesRepository(postgres_client)
    
    # –°–æ–∑–¥–∞–µ–º —à–ª—é–∑—ã (gateways)
    telegram_gateway = TelegramGateway(None)  # Bot –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∑–∂–µ
    
    # === OPENAI GATEWAY ===
    openai_gateway = None
    if config.openai_api_key and not config.openai_api_key.startswith("${"):
        print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI LLM...")
        openai_gateway = OpenAIGateway(
            api_key=config.openai_api_key,
            config={
                "model": config.openai.model,
                "max_tokens": config.openai.max_tokens,
                "temperature": getattr(config.openai, 'temperature', 0.0),
                "system_prompt": getattr(config.openai, 'system_prompt', None)
            }
        )
        print("‚úÖ OpenAI LLM –≥–æ—Ç–æ–≤")
    else:
        print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # === CAS GATEWAY ===
    print("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CAS —Å–∏—Å—Ç–µ–º—ã...")
    cas_gateway = CASGateway(
        http_client=http_client,
        cache=redis_cache,
        config={
            "cas_api_url": config.external_apis.get("cas", {}).get("api_url", "https://api.cas.chat/check"),
            "timeout": config.external_apis.get("cas", {}).get("timeout", 5),
            "cache_ttl": config.external_apis.get("cas", {}).get("cache_ttl", 3600),
            "retry_attempts": config.external_apis.get("cas", {}).get("retry_attempts", 2)
        }
    )
    print("‚úÖ CAS —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
    
    # === –°–û–ó–î–ê–ï–ú –°–û–í–†–ï–ú–ï–ù–ù–´–ô –ê–ù–°–ê–ú–ë–õ–ï–í–´–ô –î–ï–¢–ï–ö–¢–û–† ===
    print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ø–∞–º-–¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
    ensemble_config = config.spam_detection.ensemble
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–µ–∫—Ü–∏–π
    if hasattr(config, 'ruspam') and config.ruspam:
        ensemble_config.update({
            "ruspam_model_name": config.ruspam.model_name,
            "ruspam_cache_results": config.ruspam.cache_results,
            "ruspam_cache_ttl": config.ruspam.cache_ttl
        })
    
    spam_detector = EnsembleDetector(ensemble_config)
    
    # === –î–û–ë–ê–í–õ–Ø–ï–ú –î–ï–¢–ï–ö–¢–û–†–´ ===
    
    # 1. CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    spam_detector.add_cas_detector(cas_gateway)
    print("‚úÖ CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # 2. RUSpam BERT –¥–µ—Ç–µ–∫—Ç–æ—Ä
    try:
        spam_detector.add_ruspam_detector()
        print("‚úÖ RUSpam BERT –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è RUSpam BERT –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install torch transformers ruSpam")
    
    # 3. OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if openai_gateway:
        spam_detector.add_openai_detector(openai_gateway)
        print("‚úÖ OpenAI LLM –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        print("‚ö†Ô∏è OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)")
    
    # –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã!
    # ‚ùå spam_detector.add_ml_detector() - –£–î–ê–õ–ï–ù–û
    # ‚ùå HeuristicDetector - –£–î–ê–õ–ï–ù
    # ‚ùå MLClassifier - –£–î–ê–õ–ï–ù
    
    # === –ü–†–û–í–ï–†–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´ ===
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤...")
    health = await spam_detector.health_check()
    available_detectors = await spam_detector.get_available_detectors()
    
    print(f"üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {health.get('architecture', 'modern')}")
    print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã: {', '.join(available_detectors)}")
    print(f"üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['status']}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    for detector_name, detector_health in health["detectors"].items():
        if detector_health["status"] == "healthy":
            status_icon = "‚úÖ"
        elif detector_health["status"] == "degraded":
            status_icon = "‚ö†Ô∏è"
        else:
            status_icon = "‚ùå"
        
        print(f"   {status_icon} {detector_name}: {detector_health['status']}")
        if "error" in detector_health:
            print(f"      –û—à–∏–±–∫–∞: {detector_health['error']}")
        if detector_health.get("type"):
            print(f"      –¢–∏–ø: {detector_health['type']}")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    if "recommendations" in health:
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in health["recommendations"]:
            print(f"   - {rec}")
    
    # === –°–û–ó–î–ê–ï–ú USE CASES ===
    
    # Telegram use cases
    check_message_usecase = CheckMessageUseCase(
        message_repo=message_repo,
        user_repo=user_repo,
        spam_detector=spam_detector,
        spam_threshold=config.spam_detection.ensemble.get("spam_threshold", 0.6)
    )
    
    ban_user_usecase = BanUserUseCase(
        user_repo=user_repo,
        message_repo=message_repo
    )
    
    # API use cases
    try:
        from src.domain.usecase.api.detect_spam import DetectSpamUseCase
        from src.domain.usecase.api.batch_detect import BatchDetectUseCase  
        from src.domain.usecase.api.manage_api_keys import ManageApiKeysUseCase
        
        detect_spam_usecase = DetectSpamUseCase(
            spam_detector=spam_detector,
            usage_repo=usage_repo,
            api_key_repo=api_key_repo
        )
        
        batch_detect_usecase = BatchDetectUseCase(
            spam_detector=spam_detector,
            usage_repo=usage_repo,
            api_key_repo=api_key_repo,
            max_batch_size=config.api.get("max_batch_size", 100) if config.api else 100
        )
        
        manage_api_keys_usecase = ManageApiKeysUseCase(
            api_key_repo=api_key_repo,
            usage_repo=usage_repo
        )
        
        print("‚úÖ API use cases –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except ImportError as e:
        print(f"‚ö†Ô∏è API use cases –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {e}")
        detect_spam_usecase = None
        batch_detect_usecase = None
        manage_api_keys_usecase = None
    
    # === –°–û–ë–ò–†–ê–ï–ú –í–°–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ===
    dependencies = {
        # –ö–ª–∏–µ–Ω—Ç—ã –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        "postgres_client": postgres_client,
        "redis_cache": redis_cache,
        "http_client": http_client,
        
        # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        "message_repository": message_repo,
        "user_repository": user_repo,
        "spam_samples_repository": spam_samples_repo,
        "api_key_repository": api_key_repo,
        "usage_repository": usage_repo,
        
        # –®–ª—é–∑—ã
        "telegram_gateway": telegram_gateway,
        "openai_gateway": openai_gateway,
        "cas_gateway": cas_gateway,
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä (–ë–ï–ó —ç–≤—Ä–∏—Å—Ç–∏–∫ –∏ ML)
        "spam_detector": spam_detector,
        
        # Use cases (Telegram)
        "check_message_usecase": check_message_usecase,
        "ban_user_usecase": ban_user_usecase,
        
        # Use cases (API)
        "detect_spam_usecase": detect_spam_usecase,
        "batch_detect_usecase": batch_detect_usecase,
        "manage_api_keys_usecase": manage_api_keys_usecase,
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        "admin_chat_id": config.admin_chat_id,
        "config": config,
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        "system_health": health,
        "available_detectors": available_detectors
    }
    
    print("‚úÖ Production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    print(f"üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –î–µ—Ç–µ–∫—Ç–æ—Ä—ã: {len(available_detectors)}")
    
    return dependencies


async def start_telegram_bot(dependencies):
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        from aiogram import Bot, Dispatcher
        
        config = dependencies["config"]
        bot = Bot(token=config.bot_token)
        dp = Dispatcher()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º telegram_gateway —Å –±–æ—Ç–æ–º
        telegram_gateway = dependencies["telegram_gateway"]
        telegram_gateway.bot = bot
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç
        antispam_bot = AntiSpamBot(
            bot=bot,
            dispatcher=dp,
            check_message_usecase=dependencies["check_message_usecase"],
            ban_user_usecase=dependencies["ban_user_usecase"],
            admin_chat_id=config.admin_chat_id
        )
        
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await antispam_bot.start()
        
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiogram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        raise


async def start_http_server(dependencies):
    """–ó–∞–ø—É—Å–∫ HTTP API —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        import uvicorn
        from src.delivery.http.app import create_app
        
        config = dependencies["config"]
        
        # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app(dependencies)
        
        print("üåê –ó–∞–ø—É—Å–∫ HTTP API —Å–µ—Ä–≤–µ—Ä–∞...")
        server_config = uvicorn.Config(
            app,
            host=config.http_server.get("host", "0.0.0.0"),
            port=config.http_server.get("port", 8080),
            workers=config.http_server.get("workers", 1),
            log_level=config.log_level.lower()
        )
        
        server = uvicorn.Server(server_config)
        await server.serve()
        
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install fastapi uvicorn")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise


async def create_default_api_key(dependencies):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        manage_keys_usecase = dependencies.get("manage_api_keys_usecase")
        api_key_repo = dependencies.get("api_key_repository")
        
        if not manage_keys_usecase or not api_key_repo:
            print("‚ö†Ô∏è API keys use case –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ API –∫–ª—é—á–∏
        existing_keys = await api_key_repo.get_active_api_keys()
        if existing_keys:
            print(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(existing_keys)} –∞–∫—Ç–∏–≤–Ω—ã—Ö API –∫–ª—é—á–µ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from src.domain.usecase.api.manage_api_keys import CreateApiKeyRequest
        from src.domain.entity.api_key import ApiKeyPlan
        
        request = CreateApiKeyRequest(
            client_name="Default Test Client",
            contact_email="test@example.com",
            plan=ApiKeyPlan.BASIC,
            requests_per_minute=60,
            requests_per_day=5000,
            metadata={"created_by": "auto_setup", "purpose": "testing"}
        )
        
        result = await manage_keys_usecase.create_api_key(request)
        
        print("üîë –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   Client: {result.api_key.client_name}")
        print(f"   API Key: {result.raw_key}")
        print(f"   Plan: {result.api_key.plan.value}")
        print(f"   ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        print("üöÄ –ó–∞–ø—É—Å–∫ Anti-Spam Bot v2.0")
        print("üéØ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: CAS + RUSpam + OpenAI")
        print("=" * 60)
        print(f"üìä Bot token: {config.bot_token[:20] if config.bot_token else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}...")
        print(f"üíæ Database: {config.database_url.split('@')[-1] if '@' in config.database_url else 'Local'}")
        print(f"üîë OpenAI: {'‚úÖ Enabled' if config.openai_api_key and not config.openai_api_key.startswith('${') else '‚ùå Disabled'}")
        print(f"üõ°Ô∏è CAS: {'‚úÖ Enabled' if config.external_apis.get('cas') else '‚ùå Disabled'}")
        print(f"ü§ñ RUSpam: {'‚úÖ Enabled' if config.spam_detection.ensemble.get('use_ruspam', True) else '‚ùå Disabled'}")
        print(f"üåê HTTP API: {'‚úÖ Enabled' if config.http_server.get('enabled', True) else '‚ùå Disabled'}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        run_mode = os.getenv("RUN_MODE", "both").lower()
        print(f"üéØ –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {run_mode}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = await setup_dependencies(config)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await create_default_api_key(dependencies)
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if run_mode == "telegram":
            print("\nü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞...")
            await start_telegram_bot(dependencies)
        elif run_mode == "http":
            print("\nüåê –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ HTTP API...")
            await start_http_server(dependencies)
        elif run_mode == "both":
            print("\nüöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ + HTTP API...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                start_telegram_bot(dependencies),
                start_http_server(dependencies)
            )
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {run_mode}")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: telegram, http, –∏–ª–∏ both")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ production –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ë–ï–ó —ç–≤—Ä–∏—Å—Ç–∏–∫ –∏ ML)"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ production –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import aiogram
        import asyncpg
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: aiogram, asyncpg")
    except ImportError as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiogram asyncpg")
        sys.exit(1)
    
    # HTTP API –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import fastapi
        import uvicorn
        print("‚úÖ HTTP API: fastapi, uvicorn")
    except ImportError as e:
        print(f"‚ùå HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üí° –î–ª—è API —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install fastapi uvicorn")
    
    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
    production_deps = {
        "transformers": "RUSpam BERT –º–æ–¥–µ–ª—å",
        "torch": "PyTorch –¥–ª—è BERT",
        "openai": "OpenAI LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
        "redis": "Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è production"
    }
    
    critical_missing = []
    
    for dep, description in production_deps.items():
        try:
            __import__(dep)
            print(f"‚úÖ {dep}: {description}")
        except ImportError:
            print(f"‚ö†Ô∏è {dep} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - {description}")
            if dep in ["redis"]:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–ª—è production
                critical_missing.append(dep)
    
    if critical_missing:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {critical_missing}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è production —Ä–∞–±–æ—Ç—ã")
    
    # –£–î–ê–õ–Ø–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
    # ‚ùå scikit-learn, pandas, scipy, joblib - –±–æ–ª—å—à–µ –ù–ï –ù–£–ñ–ù–´!
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    check_environment()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(main())