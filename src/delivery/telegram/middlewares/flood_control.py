import time
from datetime import datetime, timedelta
from typing import Dict, Any, Callable, Awaitable, List, Optional
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message
import logging

logger = logging.getLogger(__name__)


class FloodControlMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞ (–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥)

    –õ–æ–≥–∏–∫–∞:
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    - –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç
    - –£–¥–∞–ª—è–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è
    """

    def __init__(
        self,
        max_messages: int = 5,
        time_window: int = 5,  # —Å–µ–∫—É–Ω–¥
        mute_duration: int = 30,  # —Å–µ–∫—É–Ω–¥ –º—É—Ç–∞
        enabled: bool = True
    ):
        """
        Args:
            max_messages: –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ time_window
            time_window: –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)
            mute_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)
            enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ flood control
        """
        self.max_messages = max_messages
        self.time_window = time_window
        self.mute_duration = mute_duration
        self.enabled = enabled

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ: user_id -> —Å–ø–∏—Å–æ–∫ timestamp'–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.user_messages: Dict[int, List[float]] = {}

        # –ú—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: user_id -> timestamp –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞
        self.muted_users: Dict[int, float] = {}

        logger.info(f"üõ°Ô∏è FloodControl: {max_messages} —Å–æ–æ–±—â–µ–Ω–∏–π/{time_window}—Å–µ–∫ = –º—É—Ç {mute_duration}—Å–µ–∫")

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ middleware"""

        if not self.enabled or not isinstance(event, Message):
            return await handler(event, data)

        # –¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø (–Ω–µ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤)
        if event.chat.type not in ['group', 'supergroup']:
            return await handler(event, data)

        user_id = event.from_user.id if event.from_user else None
        if user_id is None:
            return await handler(event, data)

        current_time = time.time()

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –º—É—Ç—ã
        self._cleanup_expired_mutes(current_time)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º—É—Ç
        if self._is_user_muted(user_id, current_time):
            logger.debug(f"[FLOOD] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –º—É—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await event.delete()
            except Exception:
                pass
            return  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._update_user_messages(user_id, current_time)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª—É–¥
        if self._check_flood(user_id, current_time):
            await self._handle_flood(event, user_id, current_time, data)
            return  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ

        return await handler(event, data)

    def _cleanup_expired_mutes(self, current_time: float) -> None:
        """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –º—É—Ç—ã"""
        expired_users = [
            user_id for user_id, mute_end in self.muted_users.items()
            if current_time >= mute_end
        ]
        for user_id in expired_users:
            del self.muted_users[user_id]

    def _is_user_muted(self, user_id: int, current_time: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤ –º—É—Ç–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        mute_end = self.muted_users.get(user_id)
        return mute_end is not None and current_time < mute_end

    def _update_user_messages(self, user_id: int, current_time: float) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_messages:
            self.user_messages[user_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.user_messages[user_id].append(current_time)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–Ω–µ –æ–∫–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏)
        cutoff_time = current_time - self.time_window
        self.user_messages[user_id] = [
            msg_time for msg_time in self.user_messages[user_id]
            if msg_time > cutoff_time
        ]

        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if len(self.user_messages) > 1000:
            self._cleanup_old_users(current_time)

    def _cleanup_old_users(self, current_time: float) -> None:
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        cutoff_time = current_time - 3600  # 1 —á–∞—Å
        users_to_remove = []

        for user_id, messages in self.user_messages.items():
            if not messages or max(messages) < cutoff_time:
                users_to_remove.append(user_id)

        for user_id in users_to_remove:
            del self.user_messages[user_id]

    def _check_flood(self, user_id: int, current_time: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
        messages = self.user_messages.get(user_id, [])
        return len(messages) > self.max_messages

    async def _handle_flood(self, message: Message, user_id: int, current_time: float, data: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–ª—É–¥"""
        logger.warning(f"üö® [FLOOD] –§–ª—É–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(self.user_messages[user_id])} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {self.time_window}—Å–µ–∫")

        # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mute_end_time = current_time + self.mute_duration
        self.muted_users[user_id] = mute_end_time

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ª–æ–∂–∏—Ç—å –º—É—Ç —á–µ—Ä–µ–∑ Telegram API
        telegram_gateway = data.get('telegram_gateway')
        if telegram_gateway:
            mute_until = datetime.now() + timedelta(seconds=self.mute_duration)
            success = await telegram_gateway.restrict_user(
                chat_id=message.chat.id,
                user_id=user_id,
                until_date=mute_until
            )

            if success:
                logger.info(f"‚úÖ [FLOOD] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {self.mute_duration}—Å–µ–∫ —á–µ—Ä–µ–∑ Telegram API")
            else:
                logger.warning(f"‚ö†Ô∏è [FLOOD] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å {user_id} —á–µ—Ä–µ–∑ API (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤)")

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
            logger.debug(f"üóëÔ∏è [FLOOD] –£–¥–∞–ª–µ–Ω–æ —Ñ–ª—É–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [FLOOD] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ—Ç—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)
        await self._delete_recent_flood_messages(message, user_id, data)

    async def _delete_recent_flood_messages(self, current_message: Message, user_id: int, data: Dict[str, Any]) -> None:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–ª—É–¥–µ—Ä–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # (—ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º message_id)
            chat_id = current_message.chat.id
            current_msg_id = current_message.message_id

            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å 3-5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            deleted_count = 0
            for offset in range(1, 6):  # –æ—Ç -1 –¥–æ -5 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–∑–∞–¥
                try:
                    await current_message.bot.delete_message(
                        chat_id=chat_id,
                        message_id=current_msg_id - offset
                    )
                    deleted_count += 1
                except Exception:
                    break  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è

            if deleted_count > 0:
                logger.info(f"üßπ [FLOOD] –£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ñ–ª—É–¥–µ—Ä–∞ {user_id}")

        except Exception as e:
            logger.debug(f"[FLOOD] –†–µ—Ç—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É flood control"""
        current_time = time.time()
        active_users = len([
            user_id for user_id, messages in self.user_messages.items()
            if messages and max(messages) > current_time - 60  # –∞–∫—Ç–∏–≤–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        ])

        active_mutes = len([
            user_id for user_id, mute_end in self.muted_users.items()
            if current_time < mute_end
        ])

        return {
            "enabled": self.enabled,
            "max_messages": self.max_messages,
            "time_window": self.time_window,
            "mute_duration": self.mute_duration,
            "active_users": active_users,
            "active_mutes": active_mutes,
            "total_tracked_users": len(self.user_messages)
        }