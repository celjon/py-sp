# src/delivery/telegram/middlewares/chat_isolation.py
"""
Middleware –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —á–∞—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
"""

import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject

from ....domain.entity.user import User
from ....adapter.repository.chat_repository import ChatRepository

logger = logging.getLogger(__name__)


class ChatIsolationMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —á–∞—Ç–æ–≤
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –≥—Ä—É–ø–ø–æ–π
    """

    def __init__(self, chat_repository: ChatRepository):
        self.chat_repository = chat_repository
        logger.info("üîí Chat Isolation Middleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é —á–∞—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        user: User = data.get("user")
        if not user:
            logger.warning("No user in data, skipping chat isolation check")
            return await handler(event, data)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback –∑–∞–ø—Ä–æ—Å—ã
        if isinstance(event, (Message, CallbackQuery)):
            chat_id = None
            
            if isinstance(event, Message):
                chat_id = event.chat.id
            elif isinstance(event, CallbackQuery):
                chat_id = event.message.chat.id if event.message else None

            if chat_id is None:
                logger.warning("No chat_id found in event")
                return await handler(event, data)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
            if isinstance(event, Message) and event.chat.type == "private":
                return await handler(event, data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
            is_owner = await self.chat_repository.is_chat_owned_by_user(chat_id, user.telegram_id)
            
            if not is_owner:
                logger.warning(
                    f"User {user.telegram_id} attempted to access chat {chat_id} without ownership"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if isinstance(event, Message):
                    await event.reply(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π.\n\n"
                        "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_chats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø."
                    )
                elif isinstance(event, CallbackQuery):
                    await event.answer(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π.",
                        show_alert=True
                    )
                
                return  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–ª—å—à–µ

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –¥–∞–Ω–Ω—ã–µ
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(chat_id, user.telegram_id)
            if chat:
                data["chat"] = chat
                logger.debug(f"Chat {chat_id} ownership verified for user {user.telegram_id}")

        return await handler(event, data)


class ChatOwnershipMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —á–∞—Ç–æ–º
    –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ—Ç, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç
    """

    def __init__(self, chat_repository: ChatRepository):
        self.chat_repository = chat_repository
        logger.info("üîç Chat Ownership Middleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–µ —á–∞—Ç–æ–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–∞–Ω–Ω—ã–µ
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        user: User = data.get("user")
        if not user:
            return await handler(event, data)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if isinstance(event, Message):
            chat_id = event.chat.id

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
            if event.chat.type == "private":
                return await handler(event, data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
            is_owner = await self.chat_repository.is_chat_owned_by_user(chat_id, user.telegram_id)
            
            if is_owner:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –¥–∞–Ω–Ω—ã–µ
                chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(chat_id, user.telegram_id)
                if chat:
                    data["chat"] = chat
                    data["is_chat_owner"] = True
                    logger.debug(f"Chat {chat_id} ownership verified for user {user.telegram_id}")
            else:
                data["is_chat_owner"] = False
                logger.debug(f"User {user.telegram_id} is not owner of chat {chat_id}")

        return await handler(event, data)
