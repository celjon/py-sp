import time
import asyncio
from typing import Dict, Callable, Any
from fastapi import Request, Response, HTTPException
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse


class RateLimitMiddleware(BaseHTTPMiddleware):
    """
    Rate limiting middleware –¥–ª—è HTTP API
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞
    """

    def __init__(
        self,
        app,
        calls: int = 100,  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
        period: int = 60,  # –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        cleanup_interval: int = 300,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    ):
        super().__init__(app)
        self.calls = calls
        self.period = period
        self.cleanup_interval = cleanup_interval

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤: {ip: [(timestamp, path), ...]}
        self.requests: Dict[str, list] = {}
        self.last_cleanup = time.time()

        print(f"üö¶ Rate limiting: {calls} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ {period} —Å–µ–∫—É–Ω–¥")

    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ middleware"""

        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
        client_ip = self._get_client_ip(request)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if not await self._check_rate_limit(client_ip, request.url.path):
            return JSONResponse(
                status_code=429,
                content={
                    "error": "Rate limit exceeded",
                    "message": f"–ú–∞–∫—Å–∏–º—É–º {self.calls} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ {self.period} —Å–µ–∫—É–Ω–¥",
                    "retry_after": self.period,
                    "timestamp": time.time(),
                },
                headers={"Retry-After": str(self.period)},
            )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        await self._record_request(client_ip, request.url.path)

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        await self._cleanup_old_requests()

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        response = await call_next(request)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ rate limit
        remaining = await self._get_remaining_requests(client_ip)
        response.headers["X-RateLimit-Limit"] = str(self.calls)
        response.headers["X-RateLimit-Remaining"] = str(remaining)
        response.headers["X-RateLimit-Reset"] = str(int(time.time()) + self.period)

        return response

    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç reverse proxy
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)
            return forwarded_for.split(",")[0].strip()

        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip.strip()

        # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if request.client:
            return request.client.host

        return "unknown"

    async def _check_rate_limit(self, client_ip: str, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ rate limit –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ IP"""
        current_time = time.time()
        cutoff_time = current_time - self.period

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ IP
        client_requests = self.requests.get(client_ip, [])

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        recent_requests = [
            (timestamp, req_path)
            for timestamp, req_path in client_requests
            if timestamp > cutoff_time
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è IP
        self.requests[client_ip] = recent_requests

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        return len(recent_requests) < self.calls

    async def _record_request(self, client_ip: str, path: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
        current_time = time.time()

        if client_ip not in self.requests:
            self.requests[client_ip] = []

        self.requests[client_ip].append((current_time, path))

    async def _get_remaining_requests(self, client_ip: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è IP"""
        current_time = time.time()
        cutoff_time = current_time - self.period

        client_requests = self.requests.get(client_ip, [])
        recent_requests = [timestamp for timestamp, _ in client_requests if timestamp > cutoff_time]

        return max(0, self.calls - len(recent_requests))

    async def _cleanup_old_requests(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
        current_time = time.time()

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ cleanup_interval —Å–µ–∫—É–Ω–¥
        if current_time - self.last_cleanup < self.cleanup_interval:
            return

        self.last_cleanup = current_time
        cutoff_time = current_time - self.period * 2  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 2x –ø–µ—Ä–∏–æ–¥–∞

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö IP
        for ip in list(self.requests.keys()):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            recent_requests = [
                (timestamp, path)
                for timestamp, path in self.requests[ip]
                if timestamp > cutoff_time
            ]

            if recent_requests:
                self.requests[ip] = recent_requests
            else:
                # –£–¥–∞–ª—è–µ–º IP –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                del self.requests[ip]

        print(f"üßπ Rate limit cleanup: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(self.requests)} IP –∞–¥—Ä–µ—Å–æ–≤")


class IPWhitelistMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è whitelist IP –∞–¥—Ä–µ—Å–æ–≤
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ production –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω API
    """

    def __init__(self, app, whitelist: list = None, admin_paths: list = None):
        super().__init__(app)
        self.whitelist = set(whitelist or [])
        self.admin_paths = admin_paths or ["/api/v1/admin"]

        if self.whitelist:
            print(f"üõ°Ô∏è IP whitelist –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø—É—Ç–µ–π: {self.admin_paths}")
            print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP: {', '.join(self.whitelist)}")

    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç IP –∞–¥—Ä–µ—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—É—Ç–µ–π"""

        # –ï—Å–ª–∏ whitelist –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not self.whitelist:
            return await call_next(request)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—É—Ç–∏
        path = request.url.path
        is_admin_path = any(path.startswith(admin_path) for admin_path in self.admin_paths)

        if not is_admin_path:
            return await call_next(request)

        # –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞
        client_ip = self._get_client_ip(request)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        if client_ip not in self.whitelist:
            return JSONResponse(
                status_code=403,
                content={
                    "error": "Access denied",
                    "message": f"IP –∞–¥—Ä–µ—Å {client_ip} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω API",
                    "timestamp": time.time(),
                },
            )

        return await call_next(request)

    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–∫–æ–ø–∏—è –∏–∑ RateLimitMiddleware)"""
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()

        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip.strip()

        if request.client:
            return request.client.host

        return "unknown"


class RequestLoggingMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """

    def __init__(self, app, log_body: bool = False):
        super().__init__(app)
        self.log_body = log_body

    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã"""
        start_time = time.time()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        client_ip = self._get_client_ip(request)
        method = request.method
        path = request.url.path
        query = str(request.url.query) if request.url.query else ""
        user_agent = request.headers.get("User-Agent", "Unknown")

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        print(f"üìù {method} {path}{('?' + query) if query else ''} from {client_ip}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            response = await call_next(request)

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = (time.time() - start_time) * 1000

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            status_emoji = (
                "‚úÖ" if response.status_code < 400 else "‚ö†Ô∏è" if response.status_code < 500 else "‚ùå"
            )
            print(
                f"{status_emoji} {response.status_code} | {processing_time:.1f}ms | {method} {path}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            response.headers["X-Processing-Time"] = f"{processing_time:.1f}ms"

            return response

        except Exception as e:
            processing_time = (time.time() - start_time) * 1000
            print(f"‚ùå 500 | {processing_time:.1f}ms | {method} {path} | Error: {str(e)}")
            raise

    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞"""
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()

        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip.strip()

        if request.client:
            return request.client.host

        return "unknown"
