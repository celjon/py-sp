import asyncio
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
from .handlers import message, admin, callback, detector_integration, modern_features, bothub_settings, chat_management, auto_chat_detection
from .middlewares.throttling import ThrottlingMiddleware
from .middlewares.auth import AuthMiddleware
from .middlewares.dependency import DependencyMiddleware
from .middlewares.chat_isolation import ChatOwnershipMiddleware


class AntiSpamBot:
    def __init__(self, bot_token: str, redis_url: str, dependencies: dict):
        self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

        # Redis storage for FSM
        storage = RedisStorage.from_url(redis_url)
        self.dp = Dispatcher(storage=storage)

        # –°–æ–∑–¥–∞–µ–º TelegramChatGateway
        from ...adapter.gateway.telegram_chat_gateway import TelegramChatGateway
        telegram_chat_gateway = TelegramChatGateway(self.bot)

        # –°–æ–∑–¥–∞–µ–º TelegramGateway –¥–ª—è BanUserUseCase
        from ...adapter.gateway.telegram_gateway import TelegramGateway
        telegram_gateway = TelegramGateway(self.bot)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_gateway –≤ ban_user_usecase
        if "ban_user_usecase" in dependencies:
            dependencies["ban_user_usecase"].telegram_gateway = telegram_gateway

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers
        self.dp["deps"] = dependencies
        self.dp["deps"]["telegram_chat_gateway"] = telegram_chat_gateway
        self.dp["deps"]["telegram_gateway"] = telegram_gateway

        # –ò–∑–≤–ª–µ–∫–∞–µ–º admin_users –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        config = dependencies.get("config", {})
        admin_users = []

        if isinstance(config, dict):
            admin_users = config.get("admin_users", [])
        elif hasattr(config, "telegram") and hasattr(config.telegram, "admin_users"):
            admin_users = config.telegram.admin_users

        # –°–ù–ê–ß–ê–õ–ê —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middlewares (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
        # 1. –°–Ω–∞—á–∞–ª–∞ dependency injection
        self.dp.message.middleware(DependencyMiddleware())
        # 2. –ü–æ—Ç–æ–º throttling
        self.dp.message.middleware(ThrottlingMiddleware())
        # 3. –ü–æ—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        self.dp.message.middleware(AuthMiddleware(admin_user_ids=admin_users))
        # 4. –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è —á–∞—Ç–æ–º (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        # self.dp.message.middleware(ChatOwnershipMiddleware(self.dp["deps"]["chat_repository"]))

        # –¢–∞–∫–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è callback queries
        self.dp.callback_query.middleware(DependencyMiddleware())
        self.dp.callback_query.middleware(ThrottlingMiddleware())
        self.dp.callback_query.middleware(AuthMiddleware(admin_user_ids=admin_users))
        # self.dp.callback_query.middleware(ChatOwnershipMiddleware(self.dp["deps"]["chat_repository"]))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è my_chat_member (—Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞)
        self.dp.my_chat_member.middleware(DependencyMiddleware())

        # –ü–û–¢–û–ú —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers (–ø–æ—Å–ª–µ middlewares –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        import logging
        logger = logging.getLogger(__name__)
        
        try:
            logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            message.register_handlers(self.dp)
            logger.info("‚úÖ Message handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

            # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
            admin.register_handlers(self.dp)
            logger.info("‚úÖ Admin handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

            # Callback buttons
            callback.register_handlers(self.dp)
            logger.info("‚úÖ Callback handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞–º–∏ (CAS, RuSpam, BotHub)
            detector_integration.register_handlers(self.dp)
            logger.info("‚úÖ Detector integration handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub
            bothub_settings.register_bothub_settings_handlers(self.dp)
            logger.info("‚úÖ BotHub settings handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
            chat_management.register_chat_management_handlers(
                self.dp, 
                self.dp["deps"]["user_repository"], 
                self.dp["deps"]["chat_repository"]
            )
            logger.info("‚úÖ Chat management handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤
            auto_chat_detection.register_auto_chat_detection_handlers(
                self.dp,
                self.dp["deps"]["user_repository"],
                self.dp["deps"]["chat_repository"],
                self.dp["deps"]["telegram_chat_gateway"]
            )
            logger.info("‚úÖ Auto chat detection handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Telegram API
            modern_features.register_handlers(self.dp)
            logger.info("‚úÖ Modern features handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            logger.info("üéâ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            print("Starting bot...")

            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            try:
                await self.bot.delete_webhook(drop_pending_updates=True)
                print("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

            await self.dp.start_polling(self.bot, skip_updates=True)
        finally:
            await self.bot.session.close()
