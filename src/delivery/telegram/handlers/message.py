import time
from aiogram import Router, types, F
from aiogram.filters import Command
from typing import Dict, Any

router = Router()


@router.message(Command("start"), F.chat.type == "private")
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç.\n\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏ —É–¥–∞–ª—è—é —Å–ø–∞–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


@router.message(Command("help"), F.chat.type == "private")
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>–ê–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç - –∫–æ–º–∞–Ω–¥—ã:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ):</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º):</b>
/stats <chat_id> [hours] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/banned <chat_id> - –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/unban <user_id> <chat_id> - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

<b>–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (–≤ –≥—Ä—É–ø–ø–∞—Ö):</b>
/ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/approve - –û–¥–æ–±—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)
/spam - –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–ø–∞–º (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è)

<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
–í –≥—Ä—É–ø–ø–µ: –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /ban –∏–ª–∏ /approve
–í –ª–∏—á–∫–µ: /banned -1001234567890
–í –ª–∏—á–∫–µ: /unban 123456789 -1001234567890

üîí –í—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    await message.reply(help_text)


@router.message(Command("banned"), F.chat.type == "private")
async def cmd_banned(message: types.Message, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ)"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repo = deps.get("user_repository")

    if not user_repo:
        await message.reply("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []

    if not args:
        await message.reply(
            "üìã <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/banned <chat_id>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/banned -1001234567890\n\n"
            "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ."
        )
        return

    try:
        chat_id = int(args[0])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        banned_users = await user_repo.get_banned_users(chat_id)

        if not banned_users:
            await message.reply(f"‚úÖ –í —á–∞—Ç–µ <code>{chat_id}</code> –Ω–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        response_lines = [f"üìã <b>–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–∞—Ç–µ</b> <code>{chat_id}</code>:\n"]

        for i, user in enumerate(banned_users[:20], 1):  # –ú–∞–∫—Å–∏–º—É–º 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            username = user.get("username", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            user_id = user.get("user_id")
            banned_at = user.get("banned_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            reason = user.get("ban_reason", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            last_message = user.get("last_message", "")

            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(last_message) > 50:
                last_message = last_message[:50] + "..."

            response_lines.append(
                f"üö´ <b>{i}. {username}</b>\n"
                f"   ID: <code>{user_id}</code>\n"
                f"   –ó–∞–±–∞–Ω–µ–Ω: {banned_at}\n"
                f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f'   –°–æ–æ–±—â–µ–Ω–∏–µ: "{last_message}"\n'
                f"   üëâ /unban {user_id} {chat_id}\n"
            )

        if len(banned_users) > 20:
            response_lines.append(f"\n... –∏ –µ—â–µ {len(banned_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        response_text = "\n".join(response_lines)

        await message.reply(response_text)

    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}")


@router.message(Command("unban"), F.chat.type == "private")
async def cmd_unban(message: types.Message, **kwargs):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ)"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repo = deps.get("user_repository")

    if not user_repo:
        await message.reply("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []

    if len(args) < 2:
        await message.reply(
            "üîì <b>–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/unban <user_id> <chat_id>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/unban 123456789 -1001234567890\n\n"
            "–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫."
        )
        return

    try:
        user_id = int(args[0])
        chat_id = int(args[1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await user_repo.get_user_info(user_id)
        username = user_info.get("username", f"ID {user_id}") if user_info else f"ID {user_id}"

        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –≤ Telegram
        try:
            await message.bot.unban_chat_member(
                chat_id=chat_id, user_id=user_id, only_if_banned=True
            )
            telegram_unban = "‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω –≤ Telegram"
        except Exception as e:
            telegram_unban = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –≤ Telegram: {e}"

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        await user_repo.unban_user(user_id, chat_id)
        await user_repo.add_to_approved(user_id)

        response_text = (
            f"üîì <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ä–∞–∑–±–∞–Ω–µ–Ω</b>\n\n"
            f"üÜî User ID: <code>{user_id}</code>\n"
            f"üí¨ Chat ID: <code>{chat_id}</code>\n"
            f"{telegram_unban}\n"
            f"‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö\n"
            f"üõ°Ô∏è –î–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"
        )

        await message.reply(response_text)

    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ chat_id")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {str(e)}")


@router.message(F.new_chat_members)
async def handle_new_members(message: types.Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repo = deps.get("user_repository")

    if not user_repo or not message.new_chat_members:
        return

    for new_member in message.new_chat_members:
        try:
            user_id = new_member.id
            username = new_member.full_name

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
            is_banned = await user_repo.is_user_banned(user_id, message.chat.id)

            if is_banned:
                print(
                    f"üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ —á–∞—Ç {message.chat.id}"
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                admin_chat_id = deps.get("config", {}).get("admin_chat_id")
                if admin_chat_id:
                    try:
                        notification_text = (
                            f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                            f"üÜî ID: <code>{user_id}</code>\n"
                            f"üí¨ –ß–∞—Ç: <code>{message.chat.id}</code>\n"
                            f"üì± –ß–∞—Ç: {message.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n\n"
                            f"‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ"
                        )

                        await message.bot.send_message(admin_chat_id, notification_text)
                    except Exception as e:
                        print(f"Failed to send admin notification: {e}")

                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±–∞–Ω–∏–º —Å–Ω–æ–≤–∞
                try:
                    await message.bot.ban_chat_member(
                        chat_id=message.chat.id, user_id=user_id, revoke_messages=True
                    )
                    print(f"‚úÖ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–±–∞–Ω–µ–Ω")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                print(
                    f"üëã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {username} ({user_id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É {message.chat.id}"
                )

                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ CAS –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∞–Ω—Ç–∏—Å–ø–∞–º –±–∞–∑—ã

        except Exception as e:
            print(f"Error processing new member {new_member.id}: {e}")


@router.message(F.left_chat_member)
async def handle_left_member(message: types.Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not message.left_chat_member:
        return

    left_member = message.left_chat_member
    username = left_member.full_name
    user_id = left_member.id

    print(f"üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç: {username} ({user_id}) –∏–∑ —á–∞—Ç–∞ {message.chat.id}")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏


@router.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_message(message: types.Message, **kwargs):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    deps: Dict[str, Any] = kwargs.get("deps", {})

    # –ü–æ–ª—É—á–∞–µ–º use case –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    check_message_usecase = deps.get("check_message_usecase")
    ban_user_usecase = deps.get("ban_user_usecase")

    if not check_message_usecase:
        return

    # –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å Message
    from ....domain.entity.message import Message as DomainMessage

    domain_message = DomainMessage(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        text=message.text or "",
        has_links="http" in (message.text or "").lower(),
        has_mentions="@" in (message.text or ""),
        has_images=bool(message.photo or message.sticker),
        is_forward=bool(message.forward_from or message.forward_from_chat),
        emoji_count=len([c for c in (message.text or "") if ord(c) > 0x1F600]),
    )

    try:
        start_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º
        detection_result = await check_message_usecase.execute(domain_message)

        processing_time = (time.time() - start_time) * 1000

        # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º - –ø—Ä–∏–Ω–∏–º–∞–µ–º –º–µ—Ä—ã
        if detection_result.is_spam:
            print(
                f"üö® Spam detected from user {message.from_user.id}: {detection_result.primary_reason.value}"
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if detection_result.should_delete:
                try:
                    await message.delete()
                except Exception as e:
                    print(f"Failed to delete spam message: {e}")

            # –ë–∞–Ω–∏–º/–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if detection_result.should_ban or detection_result.should_restrict:
                ban_type = "permanent" if detection_result.should_ban else "restrict"

                ban_result = await ban_user_usecase.execute(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    detection_result=detection_result,
                    ban_type=ban_type,
                )

                if ban_result["banned"]:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    admin_message = (
                        f"üö® <b>–°–ø–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                        f"üÜî ID: {message.from_user.id}\n"
                        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {detection_result.primary_reason.value}\n"
                        f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {detection_result.overall_confidence:.2f}\n"
                        f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}ms\n"
                        f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {ban_result['messages_deleted']}"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
                    admin_chat_id = deps.get("admin_chat_id")
                    if admin_chat_id:
                        try:
                            await message.bot.send_message(admin_chat_id, admin_message)
                        except Exception as e:
                            print(f"Failed to send admin notification: {e}")
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–µ - –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print(
                f"‚úÖ Clean message from user {message.from_user.id} (confidence: {detection_result.overall_confidence:.3f}, time: {processing_time:.1f}ms)"
            )

    except Exception as e:
        print(f"Error processing message: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    dp.include_router(router)
