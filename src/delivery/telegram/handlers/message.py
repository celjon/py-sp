import time
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, Any

logger = logging.getLogger(__name__)

router = Router()


class UnbanCallback(CallbackData, prefix="owner_unban"):
    """Callback data –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id: int
    chat_id: int
    add_to_whitelist: bool = False


@router.chat_member()
async def handle_chat_member_update(chat_member: types.ChatMemberUpdated, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ chat_member updates (–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ)"""
    pass


@router.message(F.new_chat_members)
async def handle_new_members_with_cas(message: types.Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π CAS"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repo = deps.get("user_repository")
    ensemble_detector = deps.get("ensemble_detector")

    if not message.new_chat_members:
        return

    for new_member in message.new_chat_members:
        try:
            user_id = new_member.id
            username = new_member.full_name

            if ensemble_detector and hasattr(ensemble_detector, 'cas_detector') and ensemble_detector.cas_detector:
                try:
                    from ....domain.entity.message import Message as DomainMessage

                    dummy_message = DomainMessage(
                        user_id=user_id,
                        chat_id=message.chat.id,
                        text="",
                        username=new_member.username,
                        first_name=new_member.first_name,
                        last_name=new_member.last_name
                    )

                    cas_result = await ensemble_detector._check_cas(dummy_message, {"user_id": user_id})

                    if cas_result and cas_result.is_spam:
                        logger.info(f"üö´ CAS: User {user_id} ({username}) banned - found in CAS database")
                        await message.bot.ban_chat_member(
                            chat_id=message.chat.id,
                            user_id=user_id,
                            revoke_messages=True
                        )
                        continue
                except Exception as e:
                    pass

            if user_repo:
                is_banned = await user_repo.is_user_banned(user_id, message.chat.id)
                if is_banned:
                    await message.bot.ban_chat_member(
                        chat_id=message.chat.id, user_id=user_id, revoke_messages=True
                    )
                    continue

                existing_user = await user_repo.get_user(user_id)
                if not existing_user:
                    await user_repo.create_user(
                        telegram_id=user_id,
                        username=new_member.username,
                        first_name=new_member.first_name,
                        last_name=new_member.last_name
                    )

        except Exception as e:
            pass

    try:
        await message.delete()
    except Exception as e:
        pass


@router.message(
    F.chat.type.in_({"group", "supergroup"}) & (
        F.left_chat_member |
        F.new_chat_title |
        F.new_chat_photo |
        F.delete_chat_photo |
        F.group_chat_created |
        F.supergroup_chat_created |
        F.pinned_message |
        F.message_auto_delete_timer_changed |
        F.forum_topic_created |
        F.forum_topic_edited |
        F.forum_topic_closed |
        F.forum_topic_reopened |
        F.video_chat_scheduled |
        F.video_chat_started |
        F.video_chat_ended
    )
)
async def delete_all_service_messages(message: types.Message, **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await message.delete()
        service_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ"
        if message.left_chat_member:
            service_type = f"–≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.left_chat_member.full_name}"
        elif message.new_chat_title:
            service_type = "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"
        elif message.pinned_message:
            service_type = "–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

        pass
    except Exception as e:
        pass


@router.message(Command("start"), F.chat.type == "private")
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç.\n\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏ —É–¥–∞–ª—è—é —Å–ø–∞–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


@router.message(Command("help"), F.chat.type == "private")
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>–ê–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç - –∫–æ–º–∞–Ω–¥—ã:</b>

<b>üí´ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ):</b>
/manage - üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é:
   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç—ã
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ —Å–ø–∞–º–∞ (0.0 - 1.0)
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–±–∞–Ω–æ–º
   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –±–∞–Ω–∞—Ö
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ò–ò

/bothub - ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ BotHub –ò–ò (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)

<b>üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ):</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>üõ°Ô∏è –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (–≤ –≥—Ä—É–ø–ø–∞—Ö):</b>
/ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)

<b>üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ CAS + RUSpam + BotHub –ò–ò
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.7)
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã –æ –±–∞–Ω–∞—Ö —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–±–∞–Ω–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
‚Ä¢ –í—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω—é –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ

<b>ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ BotHub:</b>
BotHub - —ç—Ç–æ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ò–ò.
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.

üîó <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ BotHub:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://bothub.chat
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ API
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

<b>üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
–í –≥—Ä—É–ø–ø–µ: –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /ban
–í –ª–∏—á–∫–µ: /manage - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
–í –ª–∏—á–∫–µ: /bothub - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏

üîí –í—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚ö†Ô∏è –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ BotHub –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç!
    """
    await message.reply(help_text, parse_mode="HTML")







@router.message(F.chat.type.in_({"group", "supergroup", "channel"}) & ~F.text.startswith('/'))
async def handle_group_message(message: types.Message, **kwargs):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö (–∏—Å–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã)"""

    logger.info(f"[HANDLER] Processing message from user {message.from_user.id} in chat {message.chat.id}: '{message.text or ''}'")

    deps: Dict[str, Any] = kwargs.get("deps", {})

    check_message_usecase = deps.get("check_message_usecase")
    ban_user_usecase = deps.get("ban_user_usecase")
    chat_repository = deps.get("chat_repository")

    logger.info(f"[HANDLER] Dependencies - check_message_usecase: {bool(check_message_usecase)}, chat_repository: {bool(chat_repository)}")

    if not check_message_usecase:
        logger.warning(f"[HANDLER] Missing check_message_usecase, skipping message processing")
        return

    chat = None
    if chat_repository:
        try:
            chat = await chat_repository.get_chat_by_telegram_id(message.chat.id)
            logger.info(f"[HANDLER] Chat found: {bool(chat)}, monitored: {chat.is_monitored if chat else 'N/A'}")
        except Exception as e:
            logger.warning(f"[HANDLER] Error getting chat: {e}")

    if chat and not chat.is_monitored:
        logger.info(f"[HANDLER] Chat {message.chat.id} is not monitored, skipping")
        return

    from ....domain.entity.message import Message as DomainMessage

    domain_message = DomainMessage(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        text=message.text or "",
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        has_links="http" in (message.text or "").lower(),
        has_mentions="@" in (message.text or ""),
        has_images=bool(message.photo or message.sticker),
        is_forward=bool(message.forward_from or message.forward_from_chat),
        emoji_count=len([c for c in (message.text or "") if ord(c) > 0x1F600]),
        telegram_message_id=message.message_id,
    )

    try:
        start_time = time.time()

        detection_result = await check_message_usecase.execute(domain_message, chat=chat)

        processing_time = (time.time() - start_time) * 1000

        if detection_result.is_spam:
            logger.info(
                f"üö® Spam detected - User: {message.from_user.id} | Chat: {message.chat.id} | "
                f"Confidence: {detection_result.overall_confidence:.3f} | Detector: {detection_result.primary_reason.value}"
            )

            current_message_deleted = False
            if detection_result.should_delete:
                try:
                    await message.delete()
                    current_message_deleted = True
                except Exception as e:
                    pass

            if detection_result.should_ban or detection_result.should_restrict:
                ban_type = "permanent" if detection_result.should_ban else "restrict"

                ban_result = await ban_user_usecase.execute(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    detection_result=detection_result,
                    ban_type=ban_type,
                )

                if ban_result["banned"]:
                    total_deleted = ban_result['messages_deleted']
                    if current_message_deleted:
                        total_deleted += 1

                    if chat and chat.owner_user_id and chat.ban_notifications_enabled:
                        try:
                            banned_text = (message.text or "")[:200]
                            if len(message.text or "") > 200:
                                banned_text += "..."

                            owner_message = (
                                f"üö® <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º</b>\n\n"
                                f"üí¨ <b>–ì—Ä—É–ø–ø–∞:</b> {chat.display_name}\n"
                                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.full_name}\n"
                                f"üÜî <b>ID:</b> <code>{message.from_user.id}</code>\n"
                                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {detection_result.primary_reason.value}\n"
                                f"üìä <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {detection_result.overall_confidence:.2f}\n"
                                f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {total_deleted}\n\n"
                                f"üìÑ <b>–ó–∞–±–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
                                f"<code>{banned_text}</code>\n\n"
                                f"‚è∞ {time.strftime('%H:%M:%S %d.%m.%Y')}"
                            )

                            unban_simple = UnbanCallback(
                                user_id=message.from_user.id,
                                chat_id=message.chat.id,
                                add_to_whitelist=False
                            )
                            unban_whitelist = UnbanCallback(
                                user_id=message.from_user.id,
                                chat_id=message.chat.id,
                                add_to_whitelist=True
                            )

                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(
                                    text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å",
                                    callback_data=unban_simple.pack()
                                )],
                                [InlineKeyboardButton(
                                    text="‚≠ê –†–∞–∑–±–∞–Ω–∏—Ç—å + –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫",
                                    callback_data=unban_whitelist.pack()
                                )]
                            ])

                            await message.bot.send_message(
                                chat_id=chat.owner_user_id,
                                text=owner_message,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )

                        except Exception as e:
                            pass

                    admin_chat_id = deps.get("admin_chat_id")
                    if admin_chat_id:
                        try:
                            admin_message = (
                                f"üö® <b>–°–ø–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                                f"üÜî ID: {message.from_user.id}\n"
                                f"üí¨ –ì—Ä—É–ø–ø–∞: {chat.display_name if chat else 'Unknown'}\n"
                                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {detection_result.primary_reason.value}\n"
                                f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {detection_result.overall_confidence:.2f}\n"
                                f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}ms\n"
                                f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_deleted}"
                            )
                            await message.bot.send_message(admin_chat_id, admin_message, parse_mode="HTML")
                        except Exception as e:
                            pass
        else:
            pass

    except Exception as e:
        pass


@router.callback_query(UnbanCallback.filter())
async def handle_unban_callback(callback_query: types.CallbackQuery, callback_data: UnbanCallback, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repository = deps.get("user_repository")
    chat_repository = deps.get("chat_repository")

    if not user_repository or not chat_repository:
        await callback_query.answer("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    try:
        chat = await chat_repository.get_chat_by_telegram_id_and_owner(
            callback_data.chat_id, callback_query.from_user.id
        )
        if not chat:
            await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç —Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return

        user_info = await user_repository.get_user_info(callback_data.user_id)
        username = user_info.get("username", f"ID {callback_data.user_id}") if user_info else f"ID {callback_data.user_id}"

        try:
            await callback_query.bot.unban_chat_member(
                chat_id=callback_data.chat_id,
                user_id=callback_data.user_id
            )
            telegram_unban = "‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω –≤ Telegram"
            logger.info(f"[UNBAN] Successfully unbanned user {callback_data.user_id} from chat {callback_data.chat_id}")
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –≤ —á–∞—Ç–µ
            if "user not found" in str(e).lower() or "not restricted" in str(e).lower() or "bad request" in str(e).lower():
                telegram_unban = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω"
                logger.info(f"[UNBAN] User {callback_data.user_id} was not banned in chat {callback_data.chat_id}")
            else:
                telegram_unban = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –≤ Telegram: {e}"
                logger.warning(f"[UNBAN] Failed to unban user {callback_data.user_id} from chat {callback_data.chat_id}: {e}")

        try:
            await user_repository.unban_user(callback_data.user_id, callback_data.chat_id)
            logger.info(f"[UNBAN] Successfully unbanned user {callback_data.user_id} from chat {callback_data.chat_id} in database")
        except Exception as e:
            logger.error(f"[UNBAN] Failed to unban user {callback_data.user_id} from chat {callback_data.chat_id} in database: {e}")

        action_text = ""
        if callback_data.add_to_whitelist:
            try:
                await user_repository.add_to_approved(callback_data.user_id, callback_data.chat_id)
                action_text = " –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"
                logger.info(f"[UNBAN] Successfully added user {callback_data.user_id} to whitelist for chat {callback_data.chat_id}")
            except Exception as e:
                logger.error(f"[UNBAN] Failed to add user {callback_data.user_id} to whitelist for chat {callback_data.chat_id}: {e}")
                action_text = " (–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)"

        updated_text = callback_query.message.text + f"\n\n‚úÖ <b>–†–ê–ó–ë–ê–ù–ï–ù</b> –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã{action_text}\nüïê {time.strftime('%H:%M:%S')}"

        await callback_query.message.edit_text(
            updated_text,
            parse_mode="HTML"
        )

        await callback_query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ä–∞–∑–±–∞–Ω–µ–Ω")

    except Exception as e:
        logger.error(f"[UNBAN] General error in unban handler: {e}", exc_info=True)
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ", show_alert=True)


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    dp.include_router(router)
