import time
from aiogram import Router, types, F
from aiogram.filters import Command
from typing import Dict, Any

router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç.\n\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏ —É–¥–∞–ª—è—é —Å–ø–∞–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>–ê–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç - –∫–æ–º–∞–Ω–¥—ã:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

<b>–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:</b>
/ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/unban - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/approve - –û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫)
/spam - –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–ø–∞–º (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è)
/ham - –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ —Å–ø–∞–º

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
/mystats - –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/chatstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
    """
    await message.reply(help_text)

@router.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_message(message: types.Message, **kwargs):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    
    # –ü–æ–ª—É—á–∞–µ–º use case –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    check_message_usecase = deps.get("check_message_usecase")
    ban_user_usecase = deps.get("ban_user_usecase")
    
    if not check_message_usecase:
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å Message
    from ...domain.entity.message import Message as DomainMessage
    
    domain_message = DomainMessage(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        text=message.text or "",
        has_links="http" in (message.text or "").lower(),
        has_mentions="@" in (message.text or ""),
        has_images=bool(message.photo or message.sticker),
        is_forward=bool(message.forward_from or message.forward_from_chat),
        emoji_count=len([c for c in (message.text or "") if ord(c) > 0x1F600])
    )
    
    try:
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º
        detection_result = await check_message_usecase(domain_message)
        
        processing_time = (time.time() - start_time) * 1000
        
        # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º - –ø—Ä–∏–Ω–∏–º–∞–µ–º –º–µ—Ä—ã
        if detection_result.is_spam:
            print(f"üö® Spam detected from user {message.from_user.id}: {detection_result.primary_reason.value}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if detection_result.should_delete:
                try:
                    await message.delete()
                except Exception as e:
                    print(f"Failed to delete spam message: {e}")
            
            # –ë–∞–Ω–∏–º/–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if detection_result.should_ban or detection_result.should_restrict:
                ban_type = "permanent" if detection_result.should_ban else "restrict"
                
                ban_result = await ban_user_usecase(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    detection_result=detection_result,
                    ban_type=ban_type
                )
                
                if ban_result["banned"]:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    admin_message = (
                        f"üö® <b>–°–ø–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                        f"üÜî ID: {message.from_user.id}\n"
                        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {detection_result.primary_reason.value}\n"
                        f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {detection_result.overall_confidence:.2f}\n"
                        f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}ms\n"
                        f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {ban_result['messages_deleted']}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
                    admin_chat_id = deps.get("admin_chat_id")
                    if admin_chat_id:
                        try:
                            await message.bot.send_message(admin_chat_id, admin_message)
                        except Exception as e:
                            print(f"Failed to send admin notification: {e}")
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–µ - –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print(f"‚úÖ Clean message from user {message.from_user.id} (confidence: {detection_result.overall_confidence:.3f}, time: {processing_time:.1f}ms)")
            
    except Exception as e:
        print(f"Error processing message: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    dp.include_router(router)



