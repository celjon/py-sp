# src/delivery/telegram/handlers/auto_chat_detection.py
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞
"""

import logging
from typing import Dict, Any, Optional
from aiogram import Router, types, F
from aiogram.filters import ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER
from aiogram.types import ChatMemberUpdated

from ....domain.entity.user import User
from ....domain.entity.chat import Chat, ChatType
from ....adapter.repository.user_repository import UserRepository
from ....adapter.repository.chat_repository import ChatRepository
from ....adapter.gateway.telegram_chat_gateway import TelegramChatGateway

logger = logging.getLogger(__name__)
router = Router()


class AutoChatDetectionHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã"""

    def __init__(
        self, 
        user_repository: UserRepository, 
        chat_repository: ChatRepository,
        telegram_chat_gateway: TelegramChatGateway
    ):
        self.user_repository = user_repository
        self.chat_repository = chat_repository
        self.telegram_chat_gateway = telegram_chat_gateway
        logger.info("ü§ñ Auto Chat Detection Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def handle_bot_added_to_group(
        self,
        event: ChatMemberUpdated,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω (—Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è)
            if event.new_chat_member.status in ["member", "administrator"]:
                chat_id = event.chat.id
                
                logger.info(f"Bot added to group {chat_id}: {event.chat.title}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = await self.telegram_chat_gateway.get_chat_info(chat_id)
                if not chat_info:
                    logger.error(f"Could not get chat info for {chat_id}")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞
                owner_info = await self.telegram_chat_gateway.get_chat_owner(chat_id)
                if not owner_info:
                    logger.warning(f"No owner found for chat {chat_id}")
                    await self._send_no_owner_message(chat_id)
                    return
                
                owner_user_id = owner_info["user_id"]
                logger.info(f"Chat {chat_id} owner: {owner_user_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ
                existing_chat = await self.chat_repository.get_chat_by_telegram_id(chat_id)
                if existing_chat:
                    logger.info(f"Chat {chat_id} already exists, owner: {existing_chat.owner_user_id}")
                    if existing_chat.owner_user_id != owner_user_id:
                        await self._send_ownership_conflict_message(chat_id, existing_chat.owner_user_id, owner_user_id)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞
                user = await self.user_repository.get_user(owner_user_id)
                if not user:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = await self.user_repository.create_user(
                        telegram_id=owner_user_id,
                        username=owner_info.get("username"),
                        first_name=owner_info.get("first_name"),
                        last_name=owner_info.get("last_name")
                    )
                    logger.info(f"Created new user: {owner_user_id}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ
                chat = Chat(
                    telegram_id=chat_id,
                    owner_user_id=owner_user_id,
                    title=chat_info.get("title"),
                    type=ChatType(chat_info.get("type", "group")),
                    description=chat_info.get("description"),
                    username=chat_info.get("username"),
                    is_monitored=True,
                    spam_threshold=0.6,
                    is_active=True,
                )
                
                await self.chat_repository.create_chat(chat)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–õ–ê–î–ï–õ–¨–¶–£ –≤ –ª–∏—á–∫—É
                await self._send_welcome_message_to_owner(chat_id, owner_user_id, chat_info.get("title"))
                
                logger.info(f"Chat {chat_id} automatically registered for user {owner_user_id}")
                
        except Exception as e:
            logger.error(f"Error in handle_bot_added_to_group: {e}")

    async def handle_bot_removed_from_group(
        self,
        event: ChatMemberUpdated,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω
            if event.new_chat_member.status in ["left", "kicked"]:
                chat_id = event.chat.id
                
                logger.info(f"Bot removed from group {chat_id}: {event.chat.title}")
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç –≤ –ë–î
                chat = await self.chat_repository.get_chat_by_telegram_id(chat_id)
                if chat:
                    chat.deactivate()
                    await self.chat_repository.update_chat(chat)
                    logger.info(f"Chat {chat_id} deactivated")
                
        except Exception as e:
            logger.error(f"Error in handle_bot_removed_from_group: {e}")

    async def handle_new_member(
        self,
        message: types.Message,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É
        –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
        """
        try:
            if message.new_chat_members:
                chat_id = message.chat.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                chat = await self.chat_repository.get_chat_by_telegram_id(chat_id)
                if not chat or not chat.is_active:
                    return
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                for member in message.new_chat_members:
                    if not member.is_bot:
                        logger.info(f"New member {member.id} joined chat {chat_id}")
                
        except Exception as e:
            logger.error(f"Error in handle_new_member: {e}")

    async def _send_welcome_message_to_owner(self, chat_id: int, owner_user_id: int, chat_title: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –≤ –ª–∏—á–∫—É"""
        try:
            welcome_text = f"""
üéâ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!</b>

üìã <b>–ì—Ä—É–ø–ø–∞:</b> {chat_title}
üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /my_chats - –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã
‚Ä¢ /chat_settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
‚Ä¢ /bothub_token - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ BotHub
‚Ä¢ /bothub_status - —Å—Ç–∞—Ç—É—Å BotHub

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –î–ª—è —Ä–∞–±–æ—Ç—ã –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω BotHub –∫–æ–º–∞–Ω–¥–æ–π /bothub_token

ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
            """

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –í–õ–ê–î–ï–õ–¨–¶–£ –≤ –ª–∏—á–∫—É
            await self.telegram_chat_gateway.bot.send_message(owner_user_id, welcome_text, parse_mode="HTML")

        except Exception as e:
            logger.error(f"Error sending welcome message to owner: {e}")

    async def _send_no_owner_message(self, chat_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        try:
            error_text = """
‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã.
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–º–µ–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ (creator).

–ë–æ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.
            """

            await self.telegram_chat_gateway.bot.send_message(chat_id, error_text, parse_mode="HTML")
            
            # –ü–æ–∫–∏–¥–∞–µ–º –≥—Ä—É–ø–ø—É
            await self.telegram_chat_gateway.leave_chat(chat_id)
            
        except Exception as e:
            logger.error(f"Error sending no owner message: {e}")

    async def _send_ownership_conflict_message(
        self,
        chat_id: int,
        existing_owner_id: int,
        new_owner_id: int
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –≤–ª–∞–¥–µ–Ω–∏—è"""
        try:
            conflict_text = f"""
‚ö†Ô∏è <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–ª–∞–¥–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π</b>

–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
–¢–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü: <a href="tg://user?id={existing_owner_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>

–ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
            """

            await self.telegram_chat_gateway.bot.send_message(chat_id, conflict_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error sending ownership conflict message: {e}")


def register_auto_chat_detection_handlers(
    dp: Router,
    user_repository: UserRepository,
    chat_repository: ChatRepository,
    telegram_chat_gateway: TelegramChatGateway
):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤"""
    handler = AutoChatDetectionHandler(user_repository, chat_repository, telegram_chat_gateway)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º my_chat_member, –∞ –Ω–µ message)
    dp.my_chat_member.register(
        handler.handle_bot_added_to_group,
        ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER)
    )

    dp.my_chat_member.register(
        handler.handle_bot_removed_from_group,
        ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER)
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—ç—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ message)
    dp.message.register(
        handler.handle_new_member,
        F.new_chat_members
    )

    logger.info("ü§ñ Auto chat detection handlers registered")
