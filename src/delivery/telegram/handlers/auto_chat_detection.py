"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞
"""

import logging
from typing import Dict, Any, Optional
from aiogram import Router, types, F
from aiogram.filters import ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER
from aiogram.types import ChatMemberUpdated

from ....domain.entity.user import User
from ....domain.entity.chat import Chat, ChatType
from ....adapter.repository.user_repository import UserRepository
from ....adapter.repository.chat_repository import ChatRepository
from ....adapter.gateway.telegram_chat_gateway import TelegramChatGateway

logger = logging.getLogger(__name__)
router = Router()


class AutoChatDetectionHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã"""

    def __init__(
        self, 
        user_repository: UserRepository, 
        chat_repository: ChatRepository,
        telegram_chat_gateway: TelegramChatGateway
    ):
        self.user_repository = user_repository
        self.chat_repository = chat_repository
        self.telegram_chat_gateway = telegram_chat_gateway
        logger.info("ü§ñ Auto Chat Detection Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def handle_bot_added_to_group(
        self,
        event: ChatMemberUpdated,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î
        """
        try:
            if event.new_chat_member.status in ["member", "administrator"]:
                chat_id = event.chat.id
                
                logger.info(f"Bot added to group {chat_id}: {event.chat.title}")
                
                chat_info = await self.telegram_chat_gateway.get_chat_info(chat_id)
                if not chat_info:
                    logger.error(f"Could not get chat info for {chat_id}")
                    return
                
                owner_info = await self.telegram_chat_gateway.get_chat_owner(chat_id)
                if not owner_info:
                    logger.warning(f"No owner found for chat {chat_id}")
                    await self._send_no_owner_message(chat_id)
                    return
                
                owner_user_id = owner_info["user_id"]
                logger.info(f"Chat {chat_id} owner: {owner_user_id}")
                
                existing_chat = await self.chat_repository.get_chat_by_telegram_id(chat_id)
                if existing_chat:
                    logger.info(f"Chat {chat_id} already exists, owner: {existing_chat.owner_user_id} - skipping creation")
                    if existing_chat.owner_user_id != owner_user_id:
                        await self._send_ownership_conflict_message(chat_id, existing_chat.owner_user_id, owner_user_id)
                    else:
                        if not existing_chat.is_active:
                            existing_chat.is_active = True
                            await self.chat_repository.update_chat(existing_chat)
                            logger.info(f"Chat {chat_id} reactivated")
                    return
                
                user = await self.user_repository.get_user(owner_user_id)
                if not user:
                    user = await self.user_repository.create_user(
                        telegram_id=owner_user_id,
                        username=owner_info.get("username"),
                        first_name=owner_info.get("first_name"),
                        last_name=owner_info.get("last_name")
                    )
                    logger.info(f"Created new user: {owner_user_id}")
                
                initial_system_prompt = None
                if user.bothub_configured and user.system_prompt:
                    initial_system_prompt = user.system_prompt

                chat = Chat(
                    telegram_id=chat_id,
                    owner_user_id=owner_user_id,
                    title=chat_info.get("title"),
                    type=ChatType(chat_info.get("type", "group")),
                    description=chat_info.get("description"),
                    username=chat_info.get("username"),
                    is_monitored=True,
                    spam_threshold=0.6,
                    is_active=True,
                    system_prompt=initial_system_prompt,
                )
                
                await self.chat_repository.create_chat(chat)
                
                await self._send_welcome_message_to_owner(chat_id, owner_user_id, chat_info.get("title"))
                
                logger.info(f"Chat {chat_id} automatically registered for user {owner_user_id}")
                
        except Exception as e:
            logger.error(f"Error in handle_bot_added_to_group: {e}")

    async def handle_bot_removed_from_group(
        self,
        event: ChatMemberUpdated,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
        """
        try:
            if event.new_chat_member.status in ["left", "kicked"]:
                chat_id = event.chat.id
                
                logger.info(f"Bot removed from group {chat_id}: {event.chat.title}")
                
                chat = await self.chat_repository.get_chat_by_telegram_id(chat_id)
                if chat:
                    chat.deactivate()
                    await self.chat_repository.update_chat(chat)
                    logger.info(f"Chat {chat_id} deactivated")
                
        except Exception as e:
            logger.error(f"Error in handle_bot_removed_from_group: {e}")

    async def handle_new_member(
        self,
        message: types.Message,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É
        –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
        """
        try:
            if message.new_chat_members:
                chat_id = message.chat.id

                chat = await self.chat_repository.get_chat_by_telegram_id(chat_id)
                if not chat or not chat.is_active:
                    return

                for member in message.new_chat_members:
                    if not member.is_bot:
                        logger.info(f"New member {member.id} joined chat {chat_id}")

            try:
                await message.delete()
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏")
            except Exception as e:
                logger.debug(f"Could not delete service message: {e}")

        except Exception as e:
            logger.error(f"Error in handle_new_member: {e}")

    async def handle_group_to_supergroup_migration(
        self,
        message: types.Message,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
        –û–±–Ω–æ–≤–ª—è–µ—Ç chat_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            old_chat_id = message.chat.id
            new_chat_id = message.migrate_to_chat_id

            logger.info(f"Group migration detected: {old_chat_id} -> {new_chat_id}")

            old_chat = await self.chat_repository.get_chat_by_telegram_id(old_chat_id)
            if old_chat:
                old_chat.telegram_id = new_chat_id
                old_chat.type = ChatType.SUPERGROUP

                await self.chat_repository.update_chat(old_chat)
                logger.info(f"Chat {old_chat_id} migrated to supergroup {new_chat_id}")
            else:
                logger.warning(f"Chat {old_chat_id} not found in database during migration")

        except Exception as e:
            logger.error(f"Error handling group migration: {e}")

    async def _send_welcome_message_to_owner(self, chat_id: int, owner_user_id: int, chat_title: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –≤ –ª–∏—á–∫—É"""
        try:
            welcome_text = f"""
üéâ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!</b>

üìã <b>–ì—Ä—É–ø–ø–∞:</b> {chat_title}
üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. üëë <b>–ù–∞–∑–Ω–∞—á–∏—Ç—å –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> –≤ –≥—Ä—É–ø–ø–µ (–¥–ª—è –±–∞–Ω–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
2. üîë <b>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω BotHub</b> –∫–æ–º–∞–Ω–¥–æ–π /bothub (–¥–ª—è –ò–ò –¥–µ—Ç–µ–∫—Ü–∏–∏)

<b>üí´ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ):</b>
/manage - üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é:
   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç—ã
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ —Å–ø–∞–º–∞ (0.0 - 1.0)
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–±–∞–Ω–æ–º
   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –±–∞–Ω–∞—Ö
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ò–ò

/bothub - ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ BotHub –ò–ò (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)

<b>üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ CAS + RUSpam + BotHub –ò–ò
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.7)
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã –æ –±–∞–Ω–∞—Ö —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–±–∞–Ω–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
‚Ä¢ –í—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω—é –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ

<b>ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ BotHub:</b>
BotHub - —ç—Ç–æ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ò–ò.
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.

üîó <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ BotHub:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://bothub.chat
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ API
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
            """

            await self.telegram_chat_gateway.bot.send_message(owner_user_id, welcome_text, parse_mode="HTML")

        except Exception as e:
            logger.error(f"Error sending welcome message to owner: {e}")

    async def _send_no_owner_message(self, chat_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        try:
            error_text = """
‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã.
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–º–µ–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ (creator).

–ë–æ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.
            """

            await self.telegram_chat_gateway.bot.send_message(chat_id, error_text, parse_mode="HTML")
            
            await self.telegram_chat_gateway.leave_chat(chat_id)
            
        except Exception as e:
            logger.error(f"Error sending no owner message: {e}")

    async def _send_ownership_conflict_message(
        self,
        chat_id: int,
        existing_owner_id: int,
        new_owner_id: int
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –≤–ª–∞–¥–µ–Ω–∏—è"""
        try:
            conflict_text = f"""
‚ö†Ô∏è <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–ª–∞–¥–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π</b>

–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
–¢–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü: <a href="tg://user?id={existing_owner_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>

–ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
            """

            await self.telegram_chat_gateway.bot.send_message(chat_id, conflict_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error sending ownership conflict message: {e}")


def register_auto_chat_detection_handlers(
    dp: Router,
    user_repository: UserRepository,
    chat_repository: ChatRepository,
    telegram_chat_gateway: TelegramChatGateway
):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤"""
    handler = AutoChatDetectionHandler(user_repository, chat_repository, telegram_chat_gateway)

    dp.my_chat_member.register(
        handler.handle_bot_added_to_group,
        ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER)
    )

    dp.my_chat_member.register(
        handler.handle_bot_removed_from_group,
        ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER)
    )

    dp.message.register(
        handler.handle_new_member,
        F.new_chat_members
    )

    dp.message.register(
        handler.handle_group_to_supergroup_migration,
        F.migrate_to_chat_id
    )

    logger.info("ü§ñ Auto chat detection handlers registered")
