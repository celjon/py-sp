"""
–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞–º–∏: CAS, RuSpam, BotHub
–ë–µ–∑ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from typing import Dict, Any, Optional
import logging
import asyncio

logger = logging.getLogger(__name__)
router = Router()


@router.message((F.chat.type == "group") & (~F.text.startswith('/')))
async def spam_detection_integration(message: types.Message, **kwargs):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞–º–∏: CAS, RuSpam, BotHub
    –ü–µ—Ä–µ–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–µ–∑ —ç–≤—Ä–∏—Å—Ç–∏–∫
    """
    deps: Dict[str, Any] = kwargs.get("deps", {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ —á–∞—Ç–æ–º
    is_chat_owner = kwargs.get("is_chat_owner", False)
    if not is_chat_owner:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–∞—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π use case –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    check_message_usecase = deps.get("check_message_usecase")

    if not check_message_usecase:
        # –ï—Å–ª–∏ use case –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return

    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ EnsembleDetector
    # –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ CAS, RuSpam –∏ BotHub
    # –ù–∏–∫–∞–∫–∏—Ö —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤!


@router.message(Command("detector_status"))
async def cmd_detector_status(message: types.Message, **kwargs):
    """–°—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
    deps: Dict[str, Any] = kwargs.get("deps", {})

    try:
        ensemble_detector = deps.get("ensemble_detector")
        if not ensemble_detector:
            await message.reply("‚ùå –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        status_text = "üîç <b>–°—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤</b>\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CAS
        cas_gateway = deps.get("cas_gateway")
        if cas_gateway:
            try:
                # –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CAS
                test_result = await cas_gateway.health_check() if hasattr(cas_gateway, 'health_check') else {"status": "unknown"}
                cas_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if test_result.get("status") != "error" else "üî¥ –û—à–∏–±–∫–∞"
            except Exception:
                cas_status = "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            cas_status = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

        status_text += f"üõ°Ô∏è CAS (Combot Anti-Spam): {cas_status}\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º BotHub
        bothub_gateway = deps.get("bothub_gateway")
        if bothub_gateway:
            try:
                bothub_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
            except Exception:
                bothub_status = "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            bothub_status = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

        status_text += f"ü§ñ BotHub: {bothub_status}\n"

        # RuSpam –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
        status_text += f"üá∑üá∫ RuSpam: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"

        status_text += f"\nüìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã</b>: –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —ç–≤—Ä–∏—Å—Ç–∏–∫"

        await message.reply(status_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Detector status error: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤")


@router.message(Command("antispam_stats"))
async def cmd_antispam_stats(message: types.Message, **kwargs):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º—ã"""
    deps: Dict[str, Any] = kwargs.get("deps", {})

    try:
        message_repo = deps.get("message_repository")

        if message_repo:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            try:
                stats = await message_repo.get_chat_stats(message.chat.id, hours=24)
                stats_text = (
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Anti-Spam</b>\n\n"
                    f"üïê <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
                    f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∞–º–∞: {stats.get('spam_messages', 0)}\n"
                    f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('banned_users', 0)}\n"
                    f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∞–º–∞: {stats.get('spam_percentage', 0):.1f}%\n\n"
                    f"üõ°Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã:</b>\n"
                    f"‚Ä¢ CAS (Combot Anti-Spam): ‚úÖ\n"
                    f"‚Ä¢ RuSpam: ‚úÖ\n"
                    f"‚Ä¢ BotHub LLM: ‚úÖ\n\n"
                    f"‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {stats.get('avg_processing_time', 0):.1f}ms"
                )
            except Exception as e:
                logger.error(f"Failed to get real stats: {e}")
                stats_text = (
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Anti-Spam</b>\n\n"
                    "üõ°Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã:</b>\n"
                    "‚Ä¢ CAS (Combot Anti-Spam): ‚úÖ\n"
                    "‚Ä¢ RuSpam: ‚úÖ\n"
                    "‚Ä¢ BotHub LLM: ‚úÖ\n\n"
                    "‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                )
        else:
            stats_text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Anti-Spam</b>\n\n"
                "üõ°Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã:</b>\n"
                "‚Ä¢ CAS (Combot Anti-Spam): ‚úÖ\n"
                "‚Ä¢ RuSpam: ‚úÖ\n"
                "‚Ä¢ BotHub LLM: ‚úÖ\n\n"
                "‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )

        await message.reply(stats_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Antispam stats error: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
    dp.include_router(router)