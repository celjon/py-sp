# src/delivery/telegram/handlers/chat_management.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
from typing import Dict, Any, Optional
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ....domain.entity.user import User
from ....domain.entity.chat import Chat, ChatType
from ....adapter.repository.user_repository import UserRepository
from ....adapter.repository.chat_repository import ChatRepository

logger = logging.getLogger(__name__)
router = Router()


class ChatManagementState(StatesGroup):
    waiting_for_chat_title = State()
    waiting_for_spam_threshold = State()


class ChatManagementHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""

    def __init__(self, user_repository: UserRepository, chat_repository: ChatRepository):
        self.user_repository = user_repository
        self.chat_repository = chat_repository
        logger.info("üè† Chat Management Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def cmd_my_chats(
        self,
        message: types.Message,
        user: User,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /my_chats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            chats = await self.chat_repository.get_user_chats(user.telegram_id, active_only=True)
            
            if not chats:
                await message.reply(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n\n"
                    "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                    "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É\n"
                    "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∞—Å –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞!\n\n"
                    "üí° <b>–°–æ–≤–µ—Ç:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º (owner) –≥—Ä—É–ø–ø—ã.",
                    parse_mode="HTML"
                )
                return

            text = "üè† <b>–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:</b>\n\n"
            
            for i, chat in enumerate(chats, 1):
                status_emoji = "üü¢" if chat.is_active else "üî¥"
                monitor_emoji = "üëÅÔ∏è" if chat.is_monitored else "üö´"
                
                text += f"{i}. {status_emoji} {monitor_emoji} <b>{chat.display_name}</b>\n"
                text += f"   ID: <code>{chat.telegram_id}</code>\n"
                text += f"   –¢–∏–ø: {chat.type.value}\n"
                text += f"   –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞: {chat.spam_threshold}\n"
                
                if chat.username:
                    text += f"   @{chat.username}\n"
                
                text += "\n"

            text += f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(chats)}"
            
            await message.reply(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in cmd_my_chats: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.")

    async def cmd_auto_setup_info(
        self,
        message: types.Message,
        user: User,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /auto_setup - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        """
        await message.reply(
            "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞</b>\n\n"
            "‚úÖ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É\n"
            "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∞—Å –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞!\n\n"
            "üîç <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º (owner) –≥—Ä—É–ø–ø—ã\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π\n\n"
            "üí° <b>–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω BotHub –∫–æ–º–∞–Ω–¥–æ–π /bothub_token\n\n"
            "‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã - —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_chats –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
            parse_mode="HTML"
        )

    async def cmd_remove_chat(
        self,
        message: types.Message,
        user: User,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /remove_chat - —É–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if message.chat.type == "private":
            await message.reply(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_chats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø."
            )
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                message.chat.id, user.telegram_id
            )
            
            if not chat:
                await message.reply(
                    "‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_chats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø."
                )
                return

            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
            success = await self.chat_repository.delete_chat(message.chat.id, user.telegram_id)
            
            if success:
                await message.reply(
                    f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{chat.display_name}</b> —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.\n\n"
                    "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É.",
                    parse_mode="HTML"
                )
                logger.info(f"Chat {message.chat.id} removed by user {user.telegram_id}")
            else:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
                
        except Exception as e:
            logger.error(f"Error in cmd_remove_chat: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")

    async def cmd_chat_settings(
        self,
        message: types.Message,
        user: User,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /chat_settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
        """
        if message.chat.type == "private":
            await message.reply(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_chats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø."
            )
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                message.chat.id, user.telegram_id
            )
            
            if not chat:
                await message.reply(
                    "‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_chat –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã."
                )
                return

            status_emoji = "üü¢" if chat.is_active else "üî¥"
            monitor_emoji = "üëÅÔ∏è" if chat.is_monitored else "üö´"
            
            text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:</b> {chat.display_name}\n\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {'–ê–∫—Ç–∏–≤–Ω–∞' if chat.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
            text += f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_emoji} {'–í–∫–ª—é—á–µ–Ω' if chat.is_monitored else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            text += f"üéØ –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞: {chat.spam_threshold}\n"
            text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {chat.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            text += "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            text += "‚Ä¢ /toggle_monitoring - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            text += "‚Ä¢ /set_spam_threshold - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Å–ø–∞–º–∞\n"
            text += "‚Ä¢ /chat_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã\n"
            
            await message.reply(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in cmd_chat_settings: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã.")

    async def cmd_toggle_monitoring(
        self,
        message: types.Message,
        user: User,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /toggle_monitoring - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã
        """
        if message.chat.type == "private":
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                message.chat.id, user.telegram_id
            )
            
            if not chat:
                await message.reply("‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                return

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            chat.is_monitored = not chat.is_monitored
            await self.chat_repository.update_chat(chat)
            
            status = "–≤–∫–ª—é—á–µ–Ω" if chat.is_monitored else "–≤—ã–∫–ª—é—á–µ–Ω"
            emoji = "üëÅÔ∏è" if chat.is_monitored else "üö´"
            
            await message.reply(
                f"{emoji} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã <b>{chat.display_name}</b> {status}.",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"Error in cmd_toggle_monitoring: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")

    async def cmd_set_spam_threshold(
        self,
        message: types.Message,
        user: User,
        state: FSMContext,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /set_spam_threshold - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ —Å–ø–∞–º–∞
        """
        if message.chat.type == "private":
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                message.chat.id, user.telegram_id
            )
            
            if not chat:
                await message.reply("‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                return

            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            
            if args:
                try:
                    threshold = float(args[0])
                    if 0.0 <= threshold <= 1.0:
                        chat.spam_threshold = threshold
                        await self.chat_repository.update_chat(chat)
                        
                        await message.reply(
                            f"‚úÖ –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{chat.display_name}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold}",
                            parse_mode="HTML"
                        )
                    else:
                        await message.reply("‚ùå –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
                except ValueError:
                    await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_spam_threshold 0.7")
            else:
                await message.reply(
                    f"üìä –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ —Å–ø–∞–º–∞: {chat.spam_threshold}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_spam_threshold 0.7"
                )
                
        except Exception as e:
            logger.error(f"Error in cmd_set_spam_threshold: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —Å–ø–∞–º–∞.")

    async def cmd_chat_stats(
        self,
        message: types.Message,
        user: User,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /chat_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã
        """
        if message.chat.type == "private":
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                message.chat.id, user.telegram_id
            )
            
            if not chat:
                await message.reply("‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
            stats = await self.chat_repository.get_chat_stats(user.telegram_id)
            
            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:</b> {chat.display_name}\n\n"
            text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {chat.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–í–∫–ª—é—á–µ–Ω' if chat.is_monitored else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            text += f"üéØ –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞: {chat.spam_threshold}\n\n"
            
            text += f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {stats.get('total_chats', 0)}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_chats', 0)}\n"
            text += f"‚Ä¢ –° –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º: {stats.get('monitored_chats', 0)}\n"
            
            await message.reply(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in cmd_chat_stats: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã.")


def register_chat_management_handlers(
    dp: Router, 
    user_repository: UserRepository, 
    chat_repository: ChatRepository
):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
    handler = ChatManagementHandler(user_repository, chat_repository)

    dp.message.register(handler.cmd_my_chats, Command("my_chats"))
    dp.message.register(handler.cmd_auto_setup_info, Command("auto_setup"))
    dp.message.register(handler.cmd_remove_chat, Command("remove_chat"))
    dp.message.register(handler.cmd_chat_settings, Command("chat_settings"))
    dp.message.register(handler.cmd_toggle_monitoring, Command("toggle_monitoring"))
    dp.message.register(handler.cmd_set_spam_threshold, Command("set_spam_threshold"))
    dp.message.register(handler.cmd_chat_stats, Command("chat_stats"))

    logger.info("üè† Chat management handlers registered")
