# src/delivery/telegram/handlers/chat_management.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
"""

import logging
from typing import List
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData

from ....domain.entity.user import User
from ....domain.entity.chat import Chat
from ....adapter.repository.user_repository import UserRepository
from ....adapter.repository.chat_repository import ChatRepository

logger = logging.getLogger(__name__)
router = Router()


class ChatCallback(CallbackData, prefix="chat"):
    """Callback data –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
    action: str
    chat_id: int = 0
    value: str = ""


class ChatManagementState(StatesGroup):
    waiting_for_threshold_value = State()
    waiting_for_system_prompt = State()


class ChatManagementHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""

    def __init__(self, user_repository: UserRepository, chat_repository: ChatRepository):
        self.user_repository = user_repository
        self.chat_repository = chat_repository
        logger.info("üè† Chat Management Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _create_chat_list_keyboard(self, chats: List[Chat]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø"""
        buttons = []

        for chat in chats:
            status_emoji = "üü¢" if chat.is_active else "üî¥"
            monitor_emoji = "üëÅÔ∏è" if chat.is_monitored else "üö´"

            button_text = f"{status_emoji}{monitor_emoji} {chat.display_name[:30]}"
            buttons.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=ChatCallback(action="select", chat_id=chat.telegram_id).pack()
                )
            ])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def _create_chat_menu_keyboard(self, chat: Chat) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
        monitor_text = "üö´ –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" if chat.is_monitored else "üëÅÔ∏è –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"

        buttons = [
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=ChatCallback(action="stats", chat_id=chat.telegram_id).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data=ChatCallback(action="settings", chat_id=chat.telegram_id).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text=monitor_text,
                    callback_data=ChatCallback(action="toggle_monitoring", chat_id=chat.telegram_id).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Å–ø–∞–º–∞",
                    callback_data=ChatCallback(action="set_threshold", chat_id=chat.telegram_id).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
                    callback_data=ChatCallback(action="system_prompt", chat_id=chat.telegram_id).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
                    callback_data=ChatCallback(action="delete_confirm", chat_id=chat.telegram_id).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data=ChatCallback(action="back_to_list").pack()
                )
            ]
        ]

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def _create_delete_confirm_keyboard(self, chat_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        buttons = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=ChatCallback(action="delete", chat_id=chat_id).pack()
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=ChatCallback(action="select", chat_id=chat_id).pack()
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    async def cmd_manage(self, message: types.Message, user: User, **kwargs) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /manage - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        try:
            chats = await self.chat_repository.get_user_chats(user.telegram_id, active_only=True)

            if not chats:
                await message.reply(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n\n"
                    "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                    "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É\n"
                    "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∞—Å –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞!\n\n"
                    "üí° <b>–°–æ–≤–µ—Ç:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º (owner) –≥—Ä—É–ø–ø—ã.",
                    parse_mode="HTML"
                )
                return

            text = "üè† <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
            text += f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(chats)}"

            keyboard = self._create_chat_list_keyboard(chats)
            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            logger.error(f"Error in cmd_manage: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.")

    async def cmd_my_chats(self, message: types.Message, user: User, **kwargs) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /my_chats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (–∞–ª–∏–∞—Å –¥–ª—è /manage)"""
        await self.cmd_manage(message, user, **kwargs)

    async def callback_select_chat(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, **kwargs) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                callback_data.chat_id, user.telegram_id
            )

            if not chat:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            status_emoji = "üü¢" if chat.is_active else "üî¥"
            monitor_emoji = "üëÅÔ∏è" if chat.is_monitored else "üö´"

            text = f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π:</b> {chat.display_name}\n\n"
            text += f"üí¨ Chat ID: <code>{chat.telegram_id}</code>\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {'–ê–∫—Ç–∏–≤–Ω–∞' if chat.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
            text += f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_emoji} {'–í–∫–ª—é—á–µ–Ω' if chat.is_monitored else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            text += f"üéØ –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞: {chat.spam_threshold}\n"
            text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {chat.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            keyboard = self._create_chat_menu_keyboard(chat)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in callback_select_chat: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    async def callback_stats(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, **kwargs) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã"""
        try:
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                callback_data.chat_id, user.telegram_id
            )

            if not chat:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            stats = await self.chat_repository.get_chat_stats(user.telegram_id)

            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:</b> {chat.display_name}\n\n"
            text += f"üí¨ Chat ID: <code>{chat.telegram_id}</code>\n"
            text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {chat.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–í–∫–ª—é—á–µ–Ω' if chat.is_monitored else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            text += f"üéØ –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞: {chat.spam_threshold}\n\n"
            text += f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {stats.get('total_chats', 0)}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_chats', 0)}\n"
            text += f"‚Ä¢ –° –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º: {stats.get('monitored_chats', 0)}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=ChatCallback(action="select", chat_id=chat.telegram_id).pack()
                )
            ]])

            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in callback_stats: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    async def callback_settings(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, **kwargs) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã"""
        await self.callback_select_chat(callback, callback_data, user, **kwargs)

    async def callback_toggle_monitoring(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, **kwargs) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                callback_data.chat_id, user.telegram_id
            )

            if not chat:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            chat.is_monitored = not chat.is_monitored
            await self.chat_repository.update_chat(chat)

            status = "–≤–∫–ª—é—á–µ–Ω" if chat.is_monitored else "–≤—ã–∫–ª—é—á–µ–Ω"
            await callback.answer(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {status}", show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            await self.callback_select_chat(callback, callback_data, user, **kwargs)

        except Exception as e:
            logger.error(f"Error in callback_toggle_monitoring: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    async def callback_set_threshold(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, state: FSMContext, **kwargs) -> None:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ —Å–ø–∞–º–∞"""
        try:
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                callback_data.chat_id, user.telegram_id
            )

            if not chat:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            await state.update_data(chat_id=chat.telegram_id)
            await state.set_state(ChatManagementState.waiting_for_threshold_value)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=ChatCallback(action="select", chat_id=chat.telegram_id).pack()
                )
            ]])

            text = (
                f"üéØ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ —Å–ø–∞–º–∞ –¥–ª—è:</b> {chat.display_name}\n\n"
                f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: {chat.spam_threshold}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.0 –¥–æ 1.0:"
            )

            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in callback_set_threshold: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    async def handle_threshold_input(self, message: types.Message, user: User, state: FSMContext, **kwargs) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ —Å–ø–∞–º–∞"""
        try:
            data = await state.get_data()
            chat_id = data.get("chat_id")

            if not chat_id:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
                await state.clear()
                return

            try:
                threshold = float(message.text)
                if not (0.0 <= threshold <= 1.0):
                    await message.reply("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
                    return
            except ValueError:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
                return

            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(chat_id, user.telegram_id)
            if not chat:
                await message.reply("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            chat.spam_threshold = threshold
            await self.chat_repository.update_chat(chat)

            text = f"‚úÖ –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞ –¥–ª—è <b>{chat.display_name}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold}\n\n"
            text += f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π:</b> {chat.display_name}\n\n"
            text += f"üí¨ Chat ID: <code>{chat.telegram_id}</code>\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if chat.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
            text += f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –í–∫–ª—é—á–µ–Ω' if chat.is_monitored else 'üö´ –í—ã–∫–ª—é—á–µ–Ω'}\n"
            text += f"üéØ –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞: {chat.spam_threshold}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            keyboard = self._create_chat_menu_keyboard(chat)
            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
            await state.clear()

        except Exception as e:
            logger.error(f"Error in handle_threshold_input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞")
            await state.clear()

    async def callback_system_prompt(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, state: FSMContext, **kwargs) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        try:
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                callback_data.chat_id, user.telegram_id
            )

            if not chat:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            await state.update_data(chat_id=chat.telegram_id)
            await state.set_state(ChatManagementState.waiting_for_system_prompt)

            from ....domain.service.prompt_factory import PromptFactory
            default_prompt = PromptFactory.get_default_user_instructions()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
                        callback_data=ChatCallback(action="clear_prompt", chat_id=chat.telegram_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=ChatCallback(action="select", chat_id=chat.telegram_id).pack()
                    )
                ]
            ])

            text = f"üìù <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è:</b> {chat.display_name}\n\n"

            if chat.system_prompt:
                text += f"üìù <b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>\n{chat.system_prompt}\n\n"
            else:
                text += f"üìÑ <b>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n{default_prompt}\n\n"

            text += "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—á–∏—Å—Ç–∏—Ç—å' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."

            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in callback_system_prompt: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    async def callback_delete_confirm(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, **kwargs) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
        try:
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                callback_data.chat_id, user.telegram_id
            )

            if not chat:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</b>\n\n"
            text += f"–ì—Ä—É–ø–ø–∞: {chat.display_name}\n"
            text += f"Chat ID: <code>{chat.telegram_id}</code>\n\n"
            text += "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É."

            keyboard = self._create_delete_confirm_keyboard(chat.telegram_id)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in callback_delete_confirm: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    async def callback_delete(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, **kwargs) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
        try:
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                callback_data.chat_id, user.telegram_id
            )

            if not chat:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            success = await self.chat_repository.delete_chat(callback_data.chat_id, user.telegram_id)

            if success:
                await callback.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ {chat.display_name} —É–¥–∞–ª–µ–Ω–∞", show_alert=True)

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø
                chats = await self.chat_repository.get_user_chats(user.telegram_id, active_only=True)

                if not chats:
                    await callback.message.edit_text(
                        "üì≠ –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø.\n\n"
                        "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                    )
                else:
                    text = "üè† <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
                    text += f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(chats)}"
                    keyboard = self._create_chat_list_keyboard(chats)
                    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

        except Exception as e:
            logger.error(f"Error in callback_delete: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    async def handle_system_prompt_input(self, message: types.Message, user: User, state: FSMContext, **kwargs) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            data = await state.get_data()
            chat_id = data.get("chat_id")

            if not chat_id:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
                await state.clear()
                return

            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(chat_id, user.telegram_id)
            if not chat:
                await message.reply("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            chat.system_prompt = message.text.strip()
            await self.chat_repository.update_chat(chat)

            text = f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è <b>{chat.display_name}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
            text += f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π:</b> {chat.display_name}\n\n"
            text += f"üí¨ Chat ID: <code>{chat.telegram_id}</code>\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if chat.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
            text += f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –í–∫–ª—é—á–µ–Ω' if chat.is_monitored else 'üö´ –í—ã–∫–ª—é—á–µ–Ω'}\n"
            text += f"üéØ –ü–æ—Ä–æ–≥ —Å–ø–∞–º–∞: {chat.spam_threshold}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            keyboard = self._create_chat_menu_keyboard(chat)
            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
            await state.clear()

        except Exception as e:
            logger.error(f"Error in handle_system_prompt_input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞")
            await state.clear()

    async def callback_clear_prompt(self, callback: types.CallbackQuery, callback_data: ChatCallback, user: User, state: FSMContext, **kwargs) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        try:
            chat = await self.chat_repository.get_chat_by_telegram_id_and_owner(
                callback_data.chat_id, user.telegram_id
            )

            if not chat:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            chat.system_prompt = None
            await self.chat_repository.update_chat(chat)
            await state.clear()

            await callback.answer("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—á–∏—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            await self.callback_select_chat(callback, callback_data, user, **kwargs)

        except Exception as e:
            logger.error(f"Error in callback_clear_prompt: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    async def callback_back_to_list(self, callback: types.CallbackQuery, user: User, **kwargs) -> None:
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø"""
        try:
            chats = await self.chat_repository.get_user_chats(user.telegram_id, active_only=True)

            if not chats:
                await callback.message.edit_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø.")
                await callback.answer()
                return

            text = "üè† <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
            text += f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(chats)}"

            keyboard = self._create_chat_list_keyboard(chats)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in callback_back_to_list: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


def register_chat_management_handlers(
    dp: Router,
    user_repository: UserRepository,
    chat_repository: ChatRepository
):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
    handler = ChatManagementHandler(user_repository, chat_repository)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    dp.message.register(handler.cmd_manage, Command("manage"))
    dp.message.register(handler.cmd_my_chats, Command("my_chats"))

    # Callback handlers
    dp.callback_query.register(
        handler.callback_select_chat,
        ChatCallback.filter(F.action == "select")
    )
    dp.callback_query.register(
        handler.callback_stats,
        ChatCallback.filter(F.action == "stats")
    )
    dp.callback_query.register(
        handler.callback_settings,
        ChatCallback.filter(F.action == "settings")
    )
    dp.callback_query.register(
        handler.callback_toggle_monitoring,
        ChatCallback.filter(F.action == "toggle_monitoring")
    )
    dp.callback_query.register(
        handler.callback_set_threshold,
        ChatCallback.filter(F.action == "set_threshold")
    )
    dp.callback_query.register(
        handler.callback_system_prompt,
        ChatCallback.filter(F.action == "system_prompt")
    )
    dp.callback_query.register(
        handler.callback_delete_confirm,
        ChatCallback.filter(F.action == "delete_confirm")
    )
    dp.callback_query.register(
        handler.callback_delete,
        ChatCallback.filter(F.action == "delete")
    )
    dp.callback_query.register(
        handler.callback_back_to_list,
        ChatCallback.filter(F.action == "back_to_list")
    )

    dp.callback_query.register(
        handler.callback_clear_prompt,
        ChatCallback.filter(F.action == "clear_prompt")
    )

    # FSM handlers
    dp.message.register(
        handler.handle_threshold_input,
        ChatManagementState.waiting_for_threshold_value
    )
    dp.message.register(
        handler.handle_system_prompt_input,
        ChatManagementState.waiting_for_system_prompt
    )

    logger.info("üè† Chat management handlers registered")