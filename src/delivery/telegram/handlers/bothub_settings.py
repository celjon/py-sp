"""
Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub
"""

import logging
from typing import Dict, Any, Optional
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.callback_data import CallbackData

from ....domain.entity.user import User
from ....adapter.gateway.bothub_gateway import BotHubGateway
from ....domain.service.prompt_factory import PromptFactory

logger = logging.getLogger(__name__)


class BotHubCallback(CallbackData, prefix="bothub"):
    """Callback data –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è BotHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    action: str
    value: str = ""


class BotHubSettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub"""
    waiting_for_token = State()
    waiting_for_prompt = State()
    waiting_for_model = State()


class BotHubSettingsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub"""
    
    def __init__(self):
        self.default_user_instructions = PromptFactory.get_default_user_instructions()

    def _clear_bothub_cache_for_user(self, user_id: int, deps: dict = None, action: str = "setting update") -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à BotHub –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not deps:
            return

        ensemble_detector = deps.get("ensemble_detector")
        if ensemble_detector and hasattr(ensemble_detector, 'clear_bothub_cache_for_user'):
            ensemble_detector.clear_bothub_cache_for_user(user_id)
            logger.info(f"[CACHE] Cleared BotHub cache for user {user_id} after {action}")

    def _create_main_menu_keyboard(self, user: User) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BotHub –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        token_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if user.bothub_token else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        prompt_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if user.system_prompt else "üìÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        model_status = user.bothub_model or "gpt-5-nano"

        buttons = [
            [
                InlineKeyboardButton(
                    text=f"üîë –¢–æ–∫–µ–Ω: {token_status}",
                    callback_data=BotHubCallback(action="token_menu").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"ü§ñ –ü—Ä–æ–º–ø—Ç: {prompt_status}",
                    callback_data=BotHubCallback(action="prompt_menu").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üéØ –ú–æ–¥–µ–ª—å: {model_status}",
                    callback_data=BotHubCallback(action="model_menu").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=BotHubCallback(action="status").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="üÜò –°–ø—Ä–∞–≤–∫–∞",
                    callback_data=BotHubCallback(action="help").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë",
                    callback_data=BotHubCallback(action="reset_confirm").pack()
                )
            ]
        ]

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def _create_token_menu_keyboard(self, has_token: bool) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–º"""
        if has_token:
            buttons = [
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω",
                        callback_data=BotHubCallback(action="update_token").pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω",
                        callback_data=BotHubCallback(action="delete_token").pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                        callback_data=BotHubCallback(action="main_menu").pack()
                    )
                ]
            ]
        else:
            buttons = [
                [
                    InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω",
                        callback_data=BotHubCallback(action="add_token").pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                        callback_data=BotHubCallback(action="main_menu").pack()
                    )
                ]
            ]

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def _create_prompt_menu_keyboard(self, has_prompt: bool) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–º"""
        buttons = [
            [
                InlineKeyboardButton(
                    text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π",
                    callback_data=BotHubCallback(action="show_prompt").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=BotHubCallback(action="edit_prompt").pack()
                )
            ]
        ]

        if has_prompt:
            buttons.append([
                InlineKeyboardButton(
                    text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é",
                    callback_data=BotHubCallback(action="reset_prompt").pack()
                )
            ])

        buttons.append([
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data=BotHubCallback(action="main_menu").pack()
            )
        ])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def _create_model_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é"""
        buttons = [
            [
                InlineKeyboardButton(
                    text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏",
                    callback_data=BotHubCallback(action="list_models").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
                    callback_data=BotHubCallback(action="enter_model").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    callback_data=BotHubCallback(action="main_menu").pack()
                )
            ]
        ]

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    async def cmd_bothub(self, message: types.Message, **kwargs) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /bothub - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ BotHub"""
        user = kwargs.get("user")
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        is_group_owner = kwargs.get("is_group_owner", False)
        if not is_group_owner:
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
            return

        try:
            keyboard = self._create_main_menu_keyboard(user)

            status_emoji = "‚úÖ" if user.bothub_configured else "‚ùå"
            text = f"{status_emoji} <b>BotHub - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</b>\n\n"

            if user.bothub_configured:
                text += "üü¢ BotHub –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
            else:
                text += "üî¥ BotHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n\n"

            text += "üìã <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            text += f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if user.bothub_token else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if user.system_prompt else 'üìÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}\n"
            text += f"üéØ –ú–æ–¥–µ–ª—å: {user.bothub_model or 'gpt-5-nano (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            logger.error(f"Error in cmd_bothub: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é BotHub")

    
    async def handle_token_input(
        self,
        message: types.Message,
        user: User = None,
        state: FSMContext = None,
        deps: dict = None,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            deps: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        """
        try:
            if not user or not state:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            user_repository = deps.get("user_repository") if deps else None
            if not user_repository:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            token = message.text.strip()
            
            if not token:
                await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            try:
                test_gateway = BotHubGateway(token, self.default_user_instructions)
                health = await test_gateway.health_check()
                
                if health.get("status") != "healthy":
                    await message.reply(
                        f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω BotHub</b>\n\n"
                        f"–û—à–∏–±–∫–∞: {health.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        parse_mode="HTML"
                    )
                    return
                
            except Exception as e:
                await message.reply(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML"
                )
                return
            
            user.bothub_token = token
            user.bothub_configured = True

            if not user.system_prompt:
                user.system_prompt = self.default_user_instructions

            await user_repository.update_user(user)

            self._clear_bothub_cache_for_user(user.telegram_id, deps, "token update")

            await state.clear()
            
            keyboard = self._create_main_menu_keyboard(user)

            text = "‚úÖ <b>–¢–æ–∫–µ–Ω BotHub —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            text += f"üîó –°—Ç–∞—Ç—É—Å API: {health.get('status', 'unknown')}\n"
            text += f"ü§ñ –ú–æ–¥–µ–ª—å: {health.get('model', 'unknown')}\n"
            text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 0):.0f}ms\n\n"
            text += "üü¢ BotHub –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
            text += "üìã <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            text += f"üîë –¢–æ–∫–µ–Ω: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω\n"
            text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if user.system_prompt else 'üìÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}\n"
            text += f"üéØ –ú–æ–¥–µ–ª—å: {user.bothub_model or 'gpt-5-nano (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error handling token input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
            await state.clear()
    
    
    
    
    async def handle_prompt_input(
        self,
        message: types.Message,
        user: User,
        state: FSMContext,
        deps: Dict[str, Any],
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            user_repository = deps.get("user_repository")
            if not user_repository:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await state.clear()
                return

            prompt = message.text.strip()

            if not prompt:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            if len(prompt) < 50:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            if len(prompt) > 4000:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            user.system_prompt = prompt
            await user_repository.update_user(user)

            self._clear_bothub_cache_for_user(user.telegram_id, deps, "prompt update")

            await state.clear()
            
            keyboard = self._create_prompt_menu_keyboard(True)

            text = "‚úÖ <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            text += f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç\n"
            text += f"üìè –î–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            text += "–ü—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–ø–∞–º.\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error handling prompt input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞")
            await state.clear()
    

    async def handle_model_input(
        self,
        message: types.Message,
        user: User,
        state: FSMContext,
        deps: Dict[str, Any],
        **kwargs
    ) -> None:
        try:
            user_repository = deps.get("user_repository")
            if not user_repository:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await state.clear()
                return

            model_name = message.text.strip()

            if not model_name:
                await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return

            models = await BotHubGateway.get_available_models(user.bothub_token)

            model_found = None
            for model in models:
                if model['id'] == model_name or model['label'] == model_name:
                    model_found = model
                    break

            if not model_found:
                await message.reply(
                    f"‚ùå <b>–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_model –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π",
                    parse_mode="HTML"
                )
                return

            user.bothub_model = model_found['id']
            await user_repository.update_user(user)

            self._clear_bothub_cache_for_user(user.telegram_id, deps, "model update")

            await state.clear()

            keyboard = self._create_model_menu_keyboard()

            text = f"‚úÖ <b>–ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            text += f"üìã –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{model_found['id']}</code>\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞\n"
            text += f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {model_found['label']}\n"
            text += f"üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_found.get('owned_by', 'unknown')}\n"
            text += f"üìè –ö–æ–Ω—Ç–µ–∫—Å—Ç: {model_found.get('context_length', 'N/A')}\n\n"
            text += "–ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞.\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            logger.error(f"Error handling model input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏")
            await state.clear()

    
    async def handle_callback_query(
        self,
        callback_query: types.CallbackQuery,
        callback_data: BotHubCallback,
        **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è BotHub"""
        user = kwargs.get("user")
        state = kwargs.get("state")
        deps = kwargs.get("deps", {})

        if not user:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_repository = deps.get("user_repository")
        if not user_repository:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        try:
            action = callback_data.action

            if action == "main_menu":
                await self._show_main_menu(callback_query, user)

            elif action == "token_menu":
                await self._show_token_menu(callback_query, user)
            elif action == "add_token" or action == "update_token":
                await self._start_token_input(callback_query, state)
            elif action == "delete_token":
                await self._delete_token(callback_query, user, user_repository, deps)

            elif action == "prompt_menu":
                await self._show_prompt_menu(callback_query, user)
            elif action == "show_prompt":
                await self._show_current_prompt(callback_query, user)
            elif action == "edit_prompt":
                await self._start_prompt_input(callback_query, state)
            elif action == "reset_prompt":
                await self._reset_prompt(callback_query, user, user_repository)

            elif action == "model_menu":
                await self._show_model_menu(callback_query, user)
            elif action == "list_models":
                await self._show_models_list(callback_query, user)
            elif action == "enter_model":
                await self._start_model_input(callback_query, state)

            elif action == "status":
                await self._show_status(callback_query, user)
            elif action == "help":
                await self._show_help(callback_query)

            elif action == "reset_confirm":
                await self._confirm_reset(callback_query)
            elif action == "reset_all":
                await self._reset_all_settings(callback_query, user, user_repository, deps)
            elif action == "cancel_reset":
                await self._cancel_reset(callback_query, user)

            else:
                await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

        except Exception as e:
            logger.error(f"Error handling callback query: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


    async def _show_main_menu(self, callback_query: types.CallbackQuery, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = self._create_main_menu_keyboard(user)

        status_emoji = "‚úÖ" if user.bothub_configured else "‚ùå"
        text = f"{status_emoji} <b>BotHub - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</b>\n\n"

        if user.bothub_configured:
            text += "üü¢ BotHub –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        else:
            text += "üî¥ BotHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n\n"

        text += "üìã <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        text += f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if user.bothub_token else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if user.system_prompt else 'üìÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}\n"
        text += f"üéØ –ú–æ–¥–µ–ª—å: {user.bothub_model or 'gpt-5-nano (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

    async def _show_token_menu(self, callback_query: types.CallbackQuery, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–º"""
        keyboard = self._create_token_menu_keyboard(bool(user.bothub_token))

        text = "üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º BotHub</b>\n\n"

        if user.bothub_token:
            text += "‚úÖ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
            text += "–¢–æ–∫–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ API BotHub –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text += "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
            text += "–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ BotHub API.\n"
            text += "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –Ω–∞: https://bothub.chat\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

    async def _start_token_input(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞"""
        await state.set_state(BotHubSettingsStates.waiting_for_token)

        text = "üîë <b>–í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ BotHub</b>\n\n"
        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ BotHub API.\n\n"
        text += "üìç –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: https://bothub.chat\n"
        text += "‚ö†Ô∏è –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"

        await callback_query.message.edit_text(text, parse_mode="HTML")
        await callback_query.answer()

    async def _delete_token(self, callback_query: types.CallbackQuery, user: User, user_repository, deps: dict = None):
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω"""
        user.bothub_token = None
        user.bothub_configured = False
        await user_repository.update_user(user)

        self._clear_bothub_cache_for_user(user.telegram_id, deps, "token deletion")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data=BotHubCallback(action="main_menu").pack()
            )
        ]])

        text = "‚úÖ <b>–¢–æ–∫–µ–Ω BotHub —É–¥–∞–ª–µ–Ω</b>\n\n"
        text += "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BotHub –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer("–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω", show_alert=True)

    async def _show_prompt_menu(self, callback_query: types.CallbackQuery, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–º"""
        keyboard = self._create_prompt_menu_keyboard(bool(user.system_prompt))

        text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º</b>\n\n"

        if user.system_prompt:
            text += f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç\n"
            text += f"üìè –î–ª–∏–Ω–∞: {len(user.system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        else:
            text += f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            text += f"üìè –î–ª–∏–Ω–∞: {len(self.default_user_instructions)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"

        text += "–ü—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–ø–∞–º.\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

    async def _show_current_prompt(self, callback_query: types.CallbackQuery, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç"""
        current_instructions = user.system_prompt or self.default_user_instructions
        prompt_type = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π" if user.system_prompt else "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"

        display_instructions = current_instructions
        if len(display_instructions) > 3000:
            display_instructions = display_instructions[:3000] + "...\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è]"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–º–ø—Ç—É",
                callback_data=BotHubCallback(action="prompt_menu").pack()
            )
        ]])

        text = f"üëÅÔ∏è <b>–¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç</b>\n\n"
        text += f"üìã –¢–∏–ø: {prompt_type}\n"
        text += f"üìè –î–ª–∏–Ω–∞: {len(current_instructions)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        text += f"<code>{display_instructions}</code>"

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

    async def _start_prompt_input(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞"""
        await state.set_state(BotHubSettingsStates.waiting_for_prompt)

        text = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞</b>\n\n"
        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.\n\n"
        text += "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        text += "‚Ä¢ –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
        text += "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤\n"
        text += "‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò\n\n"
        text += "‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ BotHub"

        await callback_query.message.edit_text(text, parse_mode="HTML")
        await callback_query.answer()

    async def _reset_prompt(self, callback_query: types.CallbackQuery, user: User, user_repository):
        """–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ —É–º–æ–ª—á–∞–Ω–∏—é"""
        user.system_prompt = None
        await user_repository.update_user(user)

        deps = getattr(callback_query.message, 'deps', None)
        self._clear_bothub_cache_for_user(user.telegram_id, deps, "prompt reset")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–º–ø—Ç—É",
                callback_data=BotHubCallback(action="prompt_menu").pack()
            )
        ]])

        text = f"‚úÖ <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω</b>\n\n"
        text += f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n"
        text += f"–î–ª–∏–Ω–∞: {len(self.default_user_instructions)} —Å–∏–º–≤–æ–ª–æ–≤"

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer("–ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω", show_alert=True)

    async def _show_model_menu(self, callback_query: types.CallbackQuery, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é"""
        keyboard = self._create_model_menu_keyboard()

        current_model = user.bothub_model or "gpt-5-nano"
        model_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞" if user.bothub_model else "üìÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"

        text = "üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é BotHub</b>\n\n"
        text += f"üìã –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{current_model}</code>\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {model_status}\n\n"
        text += "–ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞.\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

    async def _show_models_list(self, callback_query: types.CallbackQuery, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not user.bothub_token:
            await callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω", show_alert=True)
            return

        try:
            models = await BotHubGateway.get_available_models(user.bothub_token)

            if not models:
                text = "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π</b>\n\n"
                text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            else:
                text = "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n\n"
                for i, model in enumerate(models[:15]):
                    text += f"{i+1}. <code>{model['id']}</code>\n"
                    text += f"   {model.get('label', 'N/A')}\n\n"

                if len(models) > 15:
                    text += f"<i>...–∏ –µ—â—ë {len(models) - 15} –º–æ–¥–µ–ª–µ–π</i>\n\n"

                text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
                        callback_data=BotHubCallback(action="enter_model").pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥–µ–ª–∏",
                        callback_data=BotHubCallback(action="model_menu").pack()
                    )
                ]
            ])

            await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback_query.answer()

        except Exception as e:
            await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

    async def _start_model_input(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –º–æ–¥–µ–ª–∏"""
        await state.set_state(BotHubSettingsStates.waiting_for_model)

        text = "‚úèÔ∏è <b>–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏</b>\n\n"
        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (ID –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ).\n\n"
        text += "üìù –ü—Ä–∏–º–µ—Ä: <code>gpt-5-nano</code>\n"
        text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏"

        await callback_query.message.edit_text(text, parse_mode="HTML")
        await callback_query.answer()

    async def _show_status(self, callback_query: types.CallbackQuery, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=BotHubCallback(action="status").pack()
            ),
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data=BotHubCallback(action="main_menu").pack()
            )
        ]])

        if not user.bothub_token:
            text = "‚ùå <b>BotHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
            text += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω."
        else:
            try:
                gateway = BotHubGateway(user.bothub_token, user.system_prompt or self.default_user_instructions, user.bothub_model)
                health = await gateway.health_check()

                status_emoji = "‚úÖ" if health.get("status") == "healthy" else "‚ùå"

                text = f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å BotHub</b>\n\n"
                text += f"üîó API: {health.get('status', 'unknown')}\n"
                text += f"ü§ñ –ú–æ–¥–µ–ª—å: {health.get('model', user.bothub_model or 'gpt-5-nano')}\n"
                text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 0):.0f}ms\n\n"

                text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                text += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {user.bothub_total_requests}\n"

                avg_time = 0
                if user.bothub_total_requests > 0:
                    avg_time = (user.bothub_total_time / user.bothub_total_requests) * 1000

                text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.0f}ms\n"

                if user.bothub_last_request:
                    from datetime import datetime, timezone
                    last_request_local = user.bothub_last_request.strftime("%d.%m.%Y %H:%M")
                    text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {last_request_local}\n"
                text += "\n"

                prompt_info = "–ù–∞—Å—Ç—Ä–æ–µ–Ω" if user.system_prompt else "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                prompt_length = len(user.system_prompt or self.default_user_instructions)
                text += f"ü§ñ <b>–ü—Ä–æ–º–ø—Ç:</b> {prompt_info} ({prompt_length} —Å–∏–º–≤–æ–ª–æ–≤)"

            except Exception as e:
                text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                text += f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

    async def _show_help(self, callback_query: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data=BotHubCallback(action="main_menu").pack()
            )
        ]])

        text = "üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ BotHub</b>\n\n"

        text += "üîë <b>–¢–æ–∫–µ–Ω:</b>\n"
        text += "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://bothub.chat\n"
        text += "‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ API\n"
        text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"

        text += "ü§ñ <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b>\n"
        text += "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò –º–æ–¥–µ–ª–∏\n"
        text += "‚Ä¢ –í–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–∏\n"
        text += "‚Ä¢ –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã\n\n"

        text += "üéØ <b>–ú–æ–¥–µ–ª—å:</b>\n"
        text += "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞\n"
        text += "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å\n"
        text += "‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: gpt-5-nano\n\n"

        text += "üìä <b>–°—Ç–∞—Ç—É—Å:</b>\n"
        text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n"
        text += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        text += "‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API"

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

    async def _confirm_reset(self, callback_query: types.CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë",
                    callback_data=BotHubCallback(action="reset_all").pack()
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=BotHubCallback(action="cancel_reset").pack()
                )
            ]
        ])

        text = "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞</b>\n\n"
        text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BotHub:\n\n"
        text += "üîë ‚Ä¢ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
        text += "ü§ñ ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        text += "üéØ ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏\n\n"
        text += "‚ùó –ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞!\n\n"
        text += "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

    async def _reset_all_settings(self, callback_query: types.CallbackQuery, user: User, user_repository, deps: dict = None):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        user.bothub_token = None
        user.bothub_configured = False
        user.system_prompt = None
        user.bothub_model = None
        await user_repository.update_user(user)

        self._clear_bothub_cache_for_user(user.telegram_id, deps, "settings reset")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data=BotHubCallback(action="main_menu").pack()
            )
        ]])

        text = "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ BotHub —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
        text += "–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        text += "‚Ä¢ –¢–æ–∫–µ–Ω BotHub\n"
        text += "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏\n\n"
        text += "üî¥ –ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer("–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã", show_alert=True)

    async def _cancel_reset(self, callback_query: types.CallbackQuery, user: User):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Å–±—Ä–æ—Å"""
        await self._show_main_menu(callback_query, user)
        await callback_query.answer("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")


def register_bothub_settings_handlers(router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ BotHub"""

    handler = BotHubSettingsHandler()

    router.message.register(handler.cmd_bothub, Command("bothub"))

    router.message.register(handler.handle_token_input, BotHubSettingsStates.waiting_for_token)
    router.message.register(handler.handle_prompt_input, BotHubSettingsStates.waiting_for_prompt)
    router.message.register(handler.handle_model_input, BotHubSettingsStates.waiting_for_model)

    router.callback_query.register(
        handler.handle_callback_query,
        BotHubCallback.filter()
    )

    logger.info("ü§ñ BotHub settings handlers registered")
