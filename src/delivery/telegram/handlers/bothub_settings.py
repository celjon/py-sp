# src/delivery/telegram/handlers/bothub_settings.py
"""
Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub
"""

import logging
from typing import Dict, Any, Optional
from aiogram import types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ....domain.entity.user import User
from ....adapter.gateway.bothub_gateway import BotHubGateway

logger = logging.getLogger(__name__)


class BotHubSettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub"""
    waiting_for_token = State()
    waiting_for_prompt = State()


class BotHubSettingsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub"""
    
    def __init__(self):
        self.default_system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Å–ø–∞–º–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —á–∞—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ.

–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º.

–°–ü–ê–ú —ç—Ç–æ:
- –†–µ–∫–ª–∞–º–∞ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
- –ü—Ä–∏–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è "–∑–∞—Ä–∞–±–æ—Ç–∫–∞"
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—Ö–µ–º—ã –∏ "–±—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏"
- –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∫–æ–ø–∏–ø–∞—Å—Ç–∞
- –ù–∞–≤—è–∑—á–∏–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ñ–æ—Ä–µ–∫—Å–∞

–ù–ï –°–ü–ê–ú —ç—Ç–æ:
- –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–ø—Ä–æ—Å—ã
- –û–±–º–µ–Ω –æ–ø—ã—Ç–æ–º –ø–æ —Ç–µ–º–µ —á–∞—Ç–∞
- –ú–µ–º—ã, —à—É—Ç–∫–∏, —Ä–µ–∞–∫—Ü–∏–∏
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞
- –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ —Ç–µ–º–µ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Ç–æ–ª—å–∫–æ JSON):
{
  "is_spam": boolean,
  "confidence": float (0.0-1.0),
  "reason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"
}

–ë—É–¥—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º - –ø—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–∞–∫ –ù–ï —Å–ø–∞–º."""
    
    async def cmd_bothub_token(
        self,
        message: types.Message,
        user: User = None,
        state: FSMContext = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /bothub_token - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ BotHub

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –≥—Ä—É–ø–ø
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
            if user.bothub_token:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="bothub_update_token")],
                    [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="bothub_delete_token")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="bothub_status")]
                ])
                
                await message.reply(
                    "üîë <b>–¢–æ–∫–µ–Ω BotHub —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await state.set_state(BotHubSettingsStates.waiting_for_token)
                await message.reply(
                    "üîë <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ BotHub</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ BotHub API.\n\n"
                    "–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞: https://bothub.chat\n\n"
                    "‚ö†Ô∏è <i>–¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</i>",
                    parse_mode="HTML"
                )
            
        except Exception as e:
            logger.error(f"Error in bothub_token command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞")
    
    async def handle_token_input(
        self,
        message: types.Message,
        user: User,
        state: FSMContext,
        user_repository,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
        
        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            token = message.text.strip()
            
            if not token:
                await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω, —Å–æ–∑–¥–∞–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π gateway
            try:
                test_gateway = BotHubGateway(token, self.default_system_prompt)
                health = await test_gateway.health_check()
                
                if health.get("status") != "healthy":
                    await message.reply(
                        f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω BotHub</b>\n\n"
                        f"–û—à–∏–±–∫–∞: {health.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        parse_mode="HTML"
                    )
                    return
                
            except Exception as e:
                await message.reply(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            user.bothub_token = token
            user.bothub_configured = True
            
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not user.system_prompt:
                user.system_prompt = self.default_system_prompt
            
            await user_repository.update_user(user)
            await state.clear()
            
            await message.reply(
                "‚úÖ <b>–¢–æ–∫–µ–Ω BotHub —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                f"üîó –°—Ç–∞—Ç—É—Å API: {health.get('status', 'unknown')}\n"
                f"ü§ñ –ú–æ–¥–µ–ª—å: {health.get('model', 'unknown')}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 0):.0f}ms\n\n"
                "–¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BotHub –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"Error handling token input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
            await state.clear()
    
    async def cmd_system_prompt(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /system_prompt - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
        """
        try:
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return
            
            current_prompt = user.system_prompt or self.default_system_prompt
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="bothub_edit_prompt")],
                [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="bothub_reset_prompt")],
                [InlineKeyboardButton(text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="bothub_show_prompt")]
            ])
            
            await message.reply(
                "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º</b>\n\n"
                f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if user.system_prompt else '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}\n"
                f"–î–ª–∏–Ω–∞: {len(current_prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error in system_prompt command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–º")
    
    async def cmd_bothub_status(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /bothub_status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è BotHub

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –≥—Ä—É–ø–ø
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return
            
            if not user.bothub_token:
                await message.reply(
                    "‚ùå <b>BotHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_token –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞.",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
            try:
                gateway = BotHubGateway(user.bothub_token, user.system_prompt or self.default_system_prompt)
                health = await gateway.health_check()
                stats = gateway.get_stats()
                
                status_emoji = "‚úÖ" if health.get("status") == "healthy" else "‚ùå"
                
                text = f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å BotHub</b>\n\n"
                text += f"üîó API: {health.get('status', 'unknown')}\n"
                text += f"ü§ñ –ú–æ–¥–µ–ª—å: {health.get('model', 'unknown')}\n"
                text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 0):.0f}ms\n"
                text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}\n"
                text += f"‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats.get('avg_processing_time', 0):.0f}ms\n\n"
                
                if user.system_prompt:
                    text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: –ù–∞—Å—Ç—Ä–æ–µ–Ω ({len(user.system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
                else:
                    text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({len(self.default_system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
                
                await message.reply(text, parse_mode="HTML")
                
            except Exception as e:
                await message.reply(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}",
                    parse_mode="HTML"
                )
            
        except Exception as e:
            logger.error(f"Error in bothub_status command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    async def cmd_reset_bothub(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        user_repository = None,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /reset_bothub - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ BotHub

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
            user_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="bothub_confirm_reset")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bothub_cancel_reset")]
            ])
            
            await message.reply(
                "‚ö†Ô∏è <b>–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ BotHub</b>\n\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
                "‚Ä¢ –¢–æ–∫–µ–Ω BotHub\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n\n"
                "–ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞!\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error in reset_bothub command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def handle_prompt_input(
        self,
        message: types.Message,
        user: User,
        state: FSMContext,
        user_repository,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            prompt = message.text.strip()
            
            if not prompt:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            if len(prompt) < 50:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            if len(prompt) > 4000:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
            user.system_prompt = prompt
            await user_repository.update_user(user)
            await state.clear()
            
            await message.reply(
                "‚úÖ <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"–î–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                "–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"Error handling prompt input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞")
            await state.clear()
    
    async def cmd_bothub_help(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /bothub_help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ BotHub

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
        """
        try:
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return
            
            text = "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ BotHub</b>\n\n"
            text += "üîë <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            text += "‚Ä¢ /bothub_token - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞\n"
            text += "‚Ä¢ /system_prompt - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–º\n"
            text += "‚Ä¢ /bothub_status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            text += "‚Ä¢ /reset_bothub - –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            text += "‚Ä¢ /bothub_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            text += "üìã <b>–ß—Ç–æ —Ç–∞–∫–æ–µ BotHub:</b>\n"
            text += "BotHub - —ç—Ç–æ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.\n"
            text += "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.\n\n"
            text += "üîó <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:</b>\n"
            text += "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://bothub.chat\n"
            text += "2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ\n"
            text += "3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
            text += "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_token –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            text += "‚ö†Ô∏è <i>–ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç!</i>"
            
            await message.reply(text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in bothub_help command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")


def register_bothub_settings_handlers(router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ BotHub"""
    
    handler = BotHubSettingsHandler()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    router.message.register(handler.cmd_bothub_token, Command("bothub_token"))
    router.message.register(handler.cmd_system_prompt, Command("system_prompt"))
    router.message.register(handler.cmd_bothub_status, Command("bothub_status"))
    router.message.register(handler.cmd_reset_bothub, Command("reset_bothub"))
    router.message.register(handler.cmd_bothub_help, Command("bothub_help"))
    
    logger.info("ü§ñ BotHub settings handlers registered")
