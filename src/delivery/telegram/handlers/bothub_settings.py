# src/delivery/telegram/handlers/bothub_settings.py
"""
Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub
"""

import logging
from typing import Dict, Any, Optional
from aiogram import types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ....domain.entity.user import User
from ....adapter.gateway.bothub_gateway import BotHubGateway
from ....domain.service.prompt_factory import PromptFactory

logger = logging.getLogger(__name__)


class BotHubSettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub"""
    waiting_for_token = State()
    waiting_for_prompt = State()
    waiting_for_model = State()


class BotHubSettingsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ BotHub"""
    
    def __init__(self):
        self.default_user_instructions = PromptFactory.get_default_user_instructions()
    
    async def cmd_bothub_token(
        self,
        message: types.Message,
        user: User = None,
        state: FSMContext = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /bothub_token - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ BotHub

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –≥—Ä—É–ø–ø
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
            if user.bothub_token:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="bothub_update_token")],
                    [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="bothub_delete_token")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="bothub_status")]
                ])
                
                await message.reply(
                    "üîë <b>–¢–æ–∫–µ–Ω BotHub —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await state.set_state(BotHubSettingsStates.waiting_for_token)
                await message.reply(
                    "üîë <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ BotHub</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ BotHub API.\n\n"
                    "–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞: https://bothub.chat\n\n"
                    "‚ö†Ô∏è <i>–¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</i>",
                    parse_mode="HTML"
                )
            
        except Exception as e:
            logger.error(f"Error in bothub_token command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞")
    
    async def handle_token_input(
        self,
        message: types.Message,
        user: User = None,
        state: FSMContext = None,
        deps: dict = None,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            deps: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        """
        try:
            if not user or not state:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            user_repository = deps.get("user_repository") if deps else None
            if not user_repository:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            token = message.text.strip()
            
            if not token:
                await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω, —Å–æ–∑–¥–∞–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π gateway
            try:
                test_gateway = BotHubGateway(token, self.default_user_instructions)
                health = await test_gateway.health_check()
                
                if health.get("status") != "healthy":
                    await message.reply(
                        f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω BotHub</b>\n\n"
                        f"–û—à–∏–±–∫–∞: {health.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        parse_mode="HTML"
                    )
                    return
                
            except Exception as e:
                await message.reply(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            user.bothub_token = token
            user.bothub_configured = True
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not user.system_prompt:
                user.system_prompt = self.default_user_instructions
            
            await user_repository.update_user(user)
            await state.clear()
            
            await message.reply(
                "‚úÖ <b>–¢–æ–∫–µ–Ω BotHub —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                f"üîó –°—Ç–∞—Ç—É—Å API: {health.get('status', 'unknown')}\n"
                f"ü§ñ –ú–æ–¥–µ–ª—å: {health.get('model', 'unknown')}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 0):.0f}ms\n\n"
                "–¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BotHub –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"Error handling token input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
            await state.clear()
    
    async def cmd_system_prompt(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /system_prompt - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
        """
        try:
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return

            current_prompt = user.system_prompt or self.default_user_instructions
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="bothub_edit_prompt")],
                [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="bothub_reset_prompt")],
                [InlineKeyboardButton(text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="bothub_show_prompt")]
            ])
            
            user_instructions_length = len(user.system_prompt) if user.system_prompt else len(self.default_user_instructions)

            await message.reply(
                "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º</b>\n\n"
                f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if user.system_prompt else '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}\n"
                f"–î–ª–∏–Ω–∞: {user_instructions_length} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error in system_prompt command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–º")
    
    async def cmd_bothub_status(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /bothub_status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è BotHub

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –≥—Ä—É–ø–ø
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return
            
            if not user.bothub_token:
                await message.reply(
                    "‚ùå <b>BotHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_token –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞.",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
            try:
                gateway = BotHubGateway(user.bothub_token, user.system_prompt or self.default_user_instructions, user.bothub_model)
                health = await gateway.health_check()
                stats = gateway.get_stats()

                status_emoji = "‚úÖ" if health.get("status") == "healthy" else "‚ùå"

                text = f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å BotHub</b>\n\n"
                text += f"üîó API: {health.get('status', 'unknown')}\n"
                text += f"ü§ñ –ú–æ–¥–µ–ª—å: {health.get('model', 'unknown')}\n"
                text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 0):.0f}ms\n"
                text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}\n"
                text += f"‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats.get('avg_processing_time', 0):.0f}ms\n\n"

                if user.system_prompt:
                    text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: –ù–∞—Å—Ç—Ä–æ–µ–Ω ({len(user.system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
                else:
                    text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({len(self.default_user_instructions)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
                
                await message.reply(text, parse_mode="HTML")
                
            except Exception as e:
                await message.reply(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}",
                    parse_mode="HTML"
                )
            
        except Exception as e:
            logger.error(f"Error in bothub_status command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    async def cmd_reset_bothub(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        user_repository = None,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /reset_bothub - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ BotHub

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
            user_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="bothub_confirm_reset")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bothub_cancel_reset")]
            ])
            
            await message.reply(
                "‚ö†Ô∏è <b>–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ BotHub</b>\n\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
                "‚Ä¢ –¢–æ–∫–µ–Ω BotHub\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n\n"
                "–ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞!\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error in reset_bothub command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def handle_prompt_input(
        self,
        message: types.Message,
        user: User,
        state: FSMContext,
        user_repository,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            prompt = message.text.strip()
            
            if not prompt:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            if len(prompt) < 50:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            if len(prompt) > 4000:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
            user.system_prompt = prompt
            await user_repository.update_user(user)
            await state.clear()
            
            await message.reply(
                "‚úÖ <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"–î–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                "–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"Error handling prompt input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞")
            await state.clear()
    
    async def cmd_bothub_model(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        if not is_group_owner:
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
            return

        if not user.bothub_token:
            await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω BotHub –∫–æ–º–∞–Ω–¥–æ–π /bothub_token")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏", callback_data="bothub_list_models")],
            [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", callback_data="bothub_enter_model")]
        ])

        current_model = user.bothub_model or "gpt-4o-mini (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"

        await message.reply(
            f"ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é BotHub</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{current_model}</code>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=keyboard
        )

    async def handle_model_input(
        self,
        message: types.Message,
        user: User,
        state: FSMContext,
        user_repository,
        **kwargs
    ) -> None:
        try:
            model_name = message.text.strip()

            if not model_name:
                await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return

            models = await BotHubGateway.get_available_models(user.bothub_token)

            model_found = None
            for model in models:
                if model['id'] == model_name or model['label'] == model_name:
                    model_found = model
                    break

            if not model_found:
                await message.reply(
                    f"‚ùå <b>–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_model –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π",
                    parse_mode="HTML"
                )
                return

            user.bothub_model = model_found['id']
            await user_repository.update_user(user)
            await state.clear()

            await message.reply(
                f"‚úÖ <b>–ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <code>{model_found['label']}</code>\n"
                f"Provider: {model_found.get('owned_by', 'unknown')}\n"
                f"Context length: {model_found.get('context_length', 'N/A')}\n\n"
                f"–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.",
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"Error handling model input: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏")
            await state.clear()

    async def cmd_bothub_help(
        self,
        message: types.Message,
        user: User = None,
        is_group_owner: bool = False,
        **kwargs
    ) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /bothub_help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ BotHub

        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_group_owner: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã
        """
        try:
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            if not is_group_owner:
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥—Ä—É–ø–ø.")
                return

            text = "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ BotHub</b>\n\n"
            text += "üîë <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            text += "‚Ä¢ /bothub_token - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞\n"
            text += "‚Ä¢ /system_prompt - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–º\n"
            text += "‚Ä¢ /bothub_model - –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏\n"
            text += "‚Ä¢ /bothub_status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            text += "‚Ä¢ /reset_bothub - –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            text += "‚Ä¢ /bothub_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            text += "üìã <b>–ß—Ç–æ —Ç–∞–∫–æ–µ BotHub:</b>\n"
            text += "BotHub - —ç—Ç–æ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.\n"
            text += "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.\n\n"
            text += "üîó <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:</b>\n"
            text += "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://bothub.chat\n"
            text += "2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ\n"
            text += "3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
            text += "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_token –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            text += "‚ö†Ô∏è <i>–ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç!</i>"

            await message.reply(text, parse_mode="HTML")

        except Exception as e:
            logger.error(f"Error in bothub_help command: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
    
    async def handle_callback_query(
        self,
        callback_query: types.CallbackQuery,
        user: User = None,
        state: FSMContext = None,
        deps: dict = None,
        **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è BotHub
        
        Args:
            callback_query: Telegram callback query
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            deps: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        """
        try:
            if not user or not callback_query.data:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            user_repository = deps.get("user_repository") if deps else None
            if not user_repository:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            data = callback_query.data
            
            if data == "bothub_update_token":
                await state.set_state(BotHubSettingsStates.waiting_for_token)
                await callback_query.message.edit_text(
                    "üîë <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ BotHub</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ BotHub API.\n\n"
                    "–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞: https://bothub.chat\n\n"
                    "‚ö†Ô∏è <i>–¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</i>",
                    parse_mode="HTML"
                )
                await callback_query.answer()
                
            elif data == "bothub_delete_token":
                user.bothub_token = None
                user.bothub_configured = False
                await user_repository.update_user(user)
                
                await callback_query.message.edit_text(
                    "‚úÖ <b>–¢–æ–∫–µ–Ω BotHub —É–¥–∞–ª–µ–Ω</b>\n\n"
                    "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BotHub –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_token –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.",
                    parse_mode="HTML"
                )
                await callback_query.answer("–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω")
                
            elif data == "bothub_status":
                if not user.bothub_token:
                    await callback_query.message.edit_text(
                        "‚ùå <b>BotHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_token –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞.",
                        parse_mode="HTML"
                    )
                    await callback_query.answer()
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
                try:
                    gateway = BotHubGateway(user.bothub_token, user.system_prompt or self.default_user_instructions, user.bothub_model)
                    health = await gateway.health_check()
                    stats = gateway.get_stats()

                    status_emoji = "‚úÖ" if health.get("status") == "healthy" else "‚ùå"

                    text = f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å BotHub</b>\n\n"
                    text += f"üîó API: {health.get('status', 'unknown')}\n"
                    text += f"ü§ñ –ú–æ–¥–µ–ª—å: {health.get('model', 'unknown')}\n"
                    text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 0):.0f}ms\n"
                    text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}\n"
                    text += f"‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats.get('avg_processing_time', 0):.0f}ms\n\n"

                    if user.system_prompt:
                        text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: –ù–∞—Å—Ç—Ä–æ–µ–Ω ({len(user.system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
                    else:
                        text += f"ü§ñ –ü—Ä–æ–º–ø—Ç: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({len(self.default_user_instructions)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
                    
                    await callback_query.message.edit_text(text, parse_mode="HTML")
                    
                except Exception as e:
                    await callback_query.message.edit_text(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                        f"–û—à–∏–±–∫–∞: {str(e)}",
                        parse_mode="HTML"
                    )
                
                await callback_query.answer()
                
            elif data == "bothub_edit_prompt":
                await state.set_state(BotHubSettingsStates.waiting_for_prompt)
                await callback_query.message.edit_text(
                    "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞.\n\n"
                    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                    "‚Ä¢ –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò\n\n"
                    "‚ö†Ô∏è <i>–ü—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ BotHub</i>",
                    parse_mode="HTML"
                )
                await callback_query.answer()
                
            elif data == "bothub_reset_prompt":
                user.system_prompt = None
                await user_repository.update_user(user)
                
                await callback_query.message.edit_text(
                    f"‚úÖ <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω</b>\n\n"
                    f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n"
                    f"–î–ª–∏–Ω–∞: {len(self.default_user_instructions)} —Å–∏–º–≤–æ–ª–æ–≤",
                    parse_mode="HTML"
                )
                await callback_query.answer("–ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω")
                
            elif data == "bothub_show_prompt":
                current_instructions = user.system_prompt or self.default_user_instructions

                # –û–±—Ä–µ–∑–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–ª—è Telegram
                display_instructions = current_instructions
                if len(display_instructions) > 3000:
                    display_instructions = display_instructions[:3000] + "...\n\n[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±—Ä–µ–∑–∞–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è]"

                await callback_query.message.edit_text(
                    f"üëÅÔ∏è <b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏</b>\n\n"
                    f"<code>{display_instructions}</code>\n\n"
                    f"–î–ª–∏–Ω–∞: {len(current_instructions)} —Å–∏–º–≤–æ–ª–æ–≤",
                    parse_mode="HTML"
                )
                await callback_query.answer()
                
            elif data == "bothub_confirm_reset":
                user.bothub_token = None
                user.bothub_configured = False
                user.system_prompt = None
                await user_repository.update_user(user)
                
                await callback_query.message.edit_text(
                    "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ BotHub —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
                    "–£–¥–∞–ª–µ–Ω–æ:\n"
                    "‚Ä¢ –¢–æ–∫–µ–Ω BotHub\n"
                    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n\n"
                    "–ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bothub_token –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    parse_mode="HTML"
                )
                await callback_query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
                
            elif data == "bothub_cancel_reset":
                await callback_query.message.edit_text(
                    "‚ùå <b>–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ BotHub –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                    parse_mode="HTML"
                )
                await callback_query.answer("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")

            elif data == "bothub_list_models":
                if not user.bothub_token:
                    await callback_query.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    return

                models = await BotHubGateway.get_available_models(user.bothub_token)

                if not models:
                    await callback_query.message.edit_text(
                        "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π</b>\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        parse_mode="HTML"
                    )
                    await callback_query.answer()
                    return

                text = "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n\n"
                for model in models[:10]:
                    text += f"‚Ä¢ <code>{model['id']}</code> - {model['label']}\n"

                if len(models) > 10:
                    text += f"\n<i>...–∏ –µ—â—ë {len(models) - 10} –º–æ–¥–µ–ª–µ–π</i>\n"

                text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", callback_data="bothub_enter_model")]
                ])

                await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                await callback_query.answer()

            elif data == "bothub_enter_model":
                await state.set_state(BotHubSettingsStates.waiting_for_model)
                await callback_query.message.edit_text(
                    "‚úèÔ∏è <b>–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (ID –∏–ª–∏ label).\n\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>gpt-4o-mini</code>",
                    parse_mode="HTML"
                )
                await callback_query.answer()

            else:
                await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"Error handling callback query: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


def register_bothub_settings_handlers(router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ BotHub"""

    handler = BotHubSettingsHandler()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    router.message.register(handler.cmd_bothub_token, Command("bothub_token"))
    router.message.register(handler.cmd_system_prompt, Command("system_prompt"))
    router.message.register(handler.cmd_bothub_model, Command("bothub_model"))
    router.message.register(handler.cmd_bothub_status, Command("bothub_status"))
    router.message.register(handler.cmd_reset_bothub, Command("reset_bothub"))
    router.message.register(handler.cmd_bothub_help, Command("bothub_help"))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    router.message.register(handler.handle_token_input, BotHubSettingsStates.waiting_for_token)
    router.message.register(handler.handle_prompt_input, BotHubSettingsStates.waiting_for_prompt)
    router.message.register(handler.handle_model_input, BotHubSettingsStates.waiting_for_model)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    router.callback_query.register(handler.handle_callback_query)

    logger.info("ü§ñ BotHub settings handlers registered")
