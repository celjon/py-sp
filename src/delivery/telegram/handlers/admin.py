from aiogram import Router, types, F
from aiogram.filters import Command
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

router = Router()




@router.message(Command("ban"), F.chat.type.in_({"group", "supergroup", "channel"}))
async def cmd_ban(message: types.Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"[DEBUG] ‚úÖ ADMIN HANDLER –í–´–ó–í–ê–ù! /ban –æ—Ç {message.from_user.id} –≤ {message.chat.type}")
    logger.info(f"[DEBUG] reply_to_message: {message.reply_to_message is not None}")
    logger.info(f"[ADMIN] ========= –ü–û–õ–£–ß–ï–ù–ê –ö–û–ú–ê–ù–î–ê /BAN =========")
    logger.info(f"[ADMIN] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã: {message.from_user.id} (@{message.from_user.username})")
    logger.info(f"[ADMIN] –ß–∞—Ç: {message.chat.id} ({message.chat.type})")
    logger.info(f"[ADMIN] kwargs: {list(kwargs.keys())}")

    try:
        chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status not in ["creator", "administrator"]:
            logger.warning(f"[ADMIN] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã")
            return
        logger.info(f"[ADMIN] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞: {chat_member.status}")
    except Exception as e:
        logger.error(f"[ADMIN] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    if not message.reply_to_message:
        logger.warning(f"[ADMIN] ‚ùå –ö–æ–º–∞–Ω–¥–∞ /ban –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    target_user_id = message.reply_to_message.from_user.id
    target_username = message.reply_to_message.from_user.username or "–±–µ–∑ username"
    target_message = message.reply_to_message.text or "–º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    logger.info(f"[ADMIN] –¶–µ–ª—å –±–∞–Ω–∞: {target_user_id} (@{target_username})")
    logger.info(f"[ADMIN] –°–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏: '{target_message[:100]}{'...' if len(target_message) > 100 else ''}'")

    deps: Dict[str, Any] = kwargs.get("deps", {})
    logger.info(f"[ADMIN] –î–æ—Å—Ç—É–ø–Ω—ã–µ deps: {list(deps.keys()) if deps else '–ù–ï–¢ DEPS!'}")
    logger.info(f"[ADMIN] kwargs keys: {list(kwargs.keys())}")

    ban_user_usecase = deps.get("ban_user_usecase")

    if not ban_user_usecase:
        logger.error(f"[ADMIN] ‚ùå ban_user_usecase –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ deps!")
        logger.error(f"[ADMIN] ‚ùå deps —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {deps}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    logger.info(f"[ADMIN] ban_user_usecase –Ω–∞–π–¥–µ–Ω: {type(ban_user_usecase)}")

    try:
        from ....domain.entity.detection_result import DetectionResult, DetectionReason

        detection_result = DetectionResult(
            message_id=message.reply_to_message.message_id,
            user_id=target_user_id,
            is_spam=True,
            overall_confidence=1.0,
            primary_reason=DetectionReason.ADMIN_REPORTED,
            detector_results=[],
            should_ban=True,
            should_delete=True,
        )

        logger.info(f"[ADMIN] –í—ã–∑—ã–≤–∞–µ–º ban_user_usecase.execute –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")

        ban_result = await ban_user_usecase.execute(
            chat_id=message.chat.id,
            user_id=target_user_id,
            detection_result=detection_result,
            ban_type="permanent",
            require_user_in_db=False,
            aggressive_cleanup=True,
        )

        logger.info(f"[ADMIN] ban_user_usecase.execute –∑–∞–≤–µ—Ä—à–µ–Ω: {ban_result}")
    except Exception as e:
        logger.error(f"[ADMIN] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ detection_result –∏–ª–∏ –≤—ã–∑–æ–≤–µ usecase: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∞: {e}")
        return

    try:
        await message.delete()
    except Exception:
        pass

    if ban_result["banned"]:
        user_repo = deps.get("user_repository")
        if user_repo:
            try:
                await user_repo.save_ban_info(
                    user_id=message.reply_to_message.from_user.id,
                    chat_id=message.chat.id,
                    banned_by_admin_id=message.from_user.id,
                    ban_reason="admin_reported",
                    banned_message=message.reply_to_message.text or "",
                    username=message.reply_to_message.from_user.full_name,
                )
            except Exception as e:
                pass

        chat_repository = deps.get("chat_repository")
        if chat_repository:
            try:
                chat = await chat_repository.get_chat_by_telegram_id(message.chat.id)
                if chat:
                    notification_text = f"""
üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.reply_to_message.from_user.full_name}
üÜî <b>ID:</b> <code>{target_user_id}</code>
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{target_message[:100]}{'...' if len(target_message) > 100 else ''}</code>

üë®‚Äçüíº <b>–ó–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º:</b> {message.from_user.full_name} (@{message.from_user.username or '–±–µ–∑ username'})
üìã <b>–ì—Ä—É–ø–ø–∞:</b> {message.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
üóë <b>–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {ban_result['messages_deleted']}

üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω –≤ /manage
                    """

                    await message.bot.send_message(
                        chat.owner_user_id,
                        notification_text,
                        parse_mode="HTML"
                    )
                    logger.info(f"[ADMIN] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {chat.owner_user_id}")
            except Exception as e:
                logger.error(f"[ADMIN] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
    else:
        error = ban_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        try:
            await message.bot.send_message(
                message.from_user.id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error}"
            )
        except Exception:
            pass






@router.message(Command("stats"), F.chat.type == "private")
async def cmd_stats(message: types.Message, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ)"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    message_repo = deps.get("message_repository")

    if not message_repo:
        await message.reply("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    args = message.text.split()[1:] if message.text else []

    if not args:
        await message.reply(
            "üìä <b>–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/stats &lt;chat_id&gt; [hours]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/stats -1001234567890 24\n"
            "/stats -1001234567890\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞.",
            parse_mode="HTML"
        )
        return

    try:
        chat_id = int(args[0])
        hours = int(args[1]) if len(args) > 1 else 24

        if hours > 168:
            hours = 168
            await message.reply("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 168 —á–∞—Å–æ–≤ (–Ω–µ–¥–µ–ª—è)")

        stats = await message_repo.get_chat_stats(chat_id, hours=hours)

        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –∑–∞ {hours} —á–∞—Å–æ–≤:</b>
üÜî Chat ID: <code>{chat_id}</code>

üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}
üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∞–º–∞: {stats.get('spam_messages', 0)}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}
üî® –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('banned_users', 0)}

üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∞–º–∞: {stats.get('spam_percentage', 0):.1f}%
‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('avg_processing_time', 0):.1f}ms
        """

        await message.reply(stats_text)

    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id –∏–ª–∏ hours")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
