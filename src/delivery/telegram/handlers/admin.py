from aiogram import Router, types, F
from aiogram.filters import Command
from typing import Dict, Any

router = Router()

@router.message(Command("ban"))
async def cmd_ban(message: types.Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message.reply_to_message:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    deps: Dict[str, Any] = kwargs.get("deps", {})
    ban_user_usecase = deps.get("ban_user_usecase")
    
    if not ban_user_usecase:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∞
    from ...domain.entity.detection_result import DetectionResult, DetectionReason
    
    detection_result = DetectionResult(
        message_id=message.reply_to_message.message_id,
        user_id=message.reply_to_message.from_user.id,
        is_spam=True,
        overall_confidence=1.0,
        primary_reason=DetectionReason.ADMIN_REPORTED,
        detector_results=[],
        should_ban=True,
        should_delete=True
    )
    
    ban_result = await ban_user_usecase(
        chat_id=message.chat.id,
        user_id=message.reply_to_message.from_user.id,
        detection_result=detection_result,
        ban_type="permanent"
    )
    
    if ban_result["banned"]:
        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –∑–∞–±–∞–Ω–µ–Ω\n"
            f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {ban_result['messages_deleted']}"
        )
    else:
        error = ban_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error}")

@router.message(Command("approve"))
async def cmd_approve(message: types.Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message.reply_to_message:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repo = deps.get("user_repository")
    
    if not user_repo:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        user_id = message.reply_to_message.from_user.id
        await user_repo.add_to_approved(user_id)
        
        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n"
            "–¢–µ–ø–µ—Ä—å –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞ —Å–ø–∞–º"
        )
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("spam"))
async def cmd_mark_spam(message: types.Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞–∑—Ü—ã —Å–ø–∞–º–∞"""
    if not message.reply_to_message or not message.reply_to_message.text:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    deps: Dict[str, Any] = kwargs.get("deps", {})
    spam_samples_repo = deps.get("spam_samples_repository")
    
    if not spam_samples_repo:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü —Å–ø–∞–º–∞
        from ...domain.entity.spam_sample import SpamSample, SampleType, SampleSource
        
        sample = SpamSample(
            text=message.reply_to_message.text,
            type=SampleType.SPAM,
            source=SampleSource.ADMIN_REPORT,
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id
        )
        
        await spam_samples_repo.save_sample(sample)
        
        await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É —Å–ø–∞–º-–æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("stats"))
async def cmd_stats(message: types.Message, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    message_repo = deps.get("message_repository")
    
    if not message_repo:
        await message.reply("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        stats = await message_repo.get_chat_stats(message.chat.id, hours=24)
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –∑–∞ 24 —á–∞—Å–∞:</b>

üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}
üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∞–º–∞: {stats.get('spam_messages', 0)}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}
üî® –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('banned_users', 0)}

üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∞–º–∞: {stats.get('spam_percentage', 0):.1f}%
        """
        
        await message.reply(stats_text)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)




