from aiogram import Router, types, F
from aiogram.filters import Command
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

router = Router()


# DEBUG HANDLER –£–î–ê–õ–ï–ù - –æ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
# @router.message(F.chat.type.in_({"group", "supergroup"}))
# async def debug_group_messages(message: types.Message, **kwargs):
#     """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä - –ª–æ–≤–∏—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö"""
#     if message.text and message.text.startswith('/'):
#         print(f"[GROUP DEBUG] üîç –ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ: {message.text} –æ—Ç {message.from_user.id}")
#         print(f"[GROUP DEBUG] üîç Chat: {message.chat.id} ({message.chat.title})")
#     # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º


@router.message(Command("ban"), F.chat.type.in_({"group", "channel"}))
async def cmd_ban(message: types.Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"[DEBUG] ‚úÖ ADMIN HANDLER –í–´–ó–í–ê–ù! /ban –æ—Ç {message.from_user.id} –≤ {message.chat.type}")
    logger.info(f"[DEBUG] reply_to_message: {message.reply_to_message is not None}")
    print(f"[ADMIN PRINT] Handler –≤—ã–∑–≤–∞–Ω! /ban –æ—Ç {message.from_user.id} –≤ {message.chat.type}")
    print(f"[GROUP TEST] üî• –°–û–û–ë–©–ï–ù–ò–ï –ò–ó –ì–†–£–ü–ü–´ –î–û–®–õ–û –î–û –•–ï–ù–î–õ–ï–†–ê! Chat ID: {message.chat.id}")
    logger.info(f"[ADMIN] ========= –ü–û–õ–£–ß–ï–ù–ê –ö–û–ú–ê–ù–î–ê /BAN =========")
    logger.info(f"[ADMIN] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã: {message.from_user.id} (@{message.from_user.username})")
    logger.info(f"[ADMIN] –ß–∞—Ç: {message.chat.id} ({message.chat.type})")
    logger.info(f"[ADMIN] kwargs: {list(kwargs.keys())}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_to_message
    if not message.reply_to_message:
        logger.warning(f"[ADMIN] ‚ùå –ö–æ–º–∞–Ω–¥–∞ /ban –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    target_user_id = message.reply_to_message.from_user.id
    target_username = message.reply_to_message.from_user.username or "–±–µ–∑ username"
    target_message = message.reply_to_message.text or "–º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    logger.info(f"[ADMIN] –¶–µ–ª—å –±–∞–Ω–∞: {target_user_id} (@{target_username})")
    logger.info(f"[ADMIN] –°–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏: '{target_message[:100]}{'...' if len(target_message) > 100 else ''}'")

    deps: Dict[str, Any] = kwargs.get("deps", {})
    logger.info(f"[ADMIN] –î–æ—Å—Ç—É–ø–Ω—ã–µ deps: {list(deps.keys()) if deps else '–ù–ï–¢ DEPS!'}")
    logger.info(f"[ADMIN] kwargs keys: {list(kwargs.keys())}")

    ban_user_usecase = deps.get("ban_user_usecase")

    if not ban_user_usecase:
        logger.error(f"[ADMIN] ‚ùå ban_user_usecase –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ deps!")
        logger.error(f"[ADMIN] ‚ùå deps —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {deps}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    logger.info(f"[ADMIN] ban_user_usecase –Ω–∞–π–¥–µ–Ω: {type(ban_user_usecase)}")

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∞
    try:
        from ....domain.entity.detection_result import DetectionResult, DetectionReason

        detection_result = DetectionResult(
            message_id=message.reply_to_message.message_id,
            user_id=target_user_id,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º target_user_id
            is_spam=True,
            overall_confidence=1.0,
            primary_reason=DetectionReason.ADMIN_REPORTED,
            detector_results=[],
            should_ban=True,
            should_delete=True,
        )

        logger.info(f"[ADMIN] –í—ã–∑—ã–≤–∞–µ–º ban_user_usecase.execute –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")

        ban_result = await ban_user_usecase.execute(
            chat_id=message.chat.id,
            user_id=target_user_id,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º target_user_id
            detection_result=detection_result,
            ban_type="permanent",
            require_user_in_db=False,  # –î–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ —Ç—Ä–µ–±—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –ë–î
        )

        logger.info(f"[ADMIN] ban_user_usecase.execute –∑–∞–≤–µ—Ä—à–µ–Ω: {ban_result}")
    except Exception as e:
        logger.error(f"[ADMIN] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ detection_result –∏–ª–∏ –≤—ã–∑–æ–≤–µ usecase: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∞: {e}")
        return

    if ban_result["banned"]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ –≤ –ë–î –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        user_repo = deps.get("user_repository")
        if user_repo:
            try:
                await user_repo.save_ban_info(
                    user_id=message.reply_to_message.from_user.id,
                    chat_id=message.chat.id,
                    banned_by_admin_id=message.from_user.id,
                    ban_reason="admin_reported",
                    banned_message=message.reply_to_message.text or "",
                    username=message.reply_to_message.from_user.full_name,
                )
            except Exception as e:
                print(f"Failed to save ban info: {e}")

        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –∑–∞–±–∞–Ω–µ–Ω\n"
            f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {ban_result['messages_deleted']}\n"
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: /banned {message.chat.id}"
        )
    else:
        error = ban_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error}")

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    try:
        await message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è


@router.message(Command("approve"), F.chat.type.in_({"group", "channel"}))
async def cmd_approve(message: types.Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ê–ö–¢–ò–í–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)"""
    if not message.reply_to_message:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repo = deps.get("user_repository")

    if not user_repo:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        user_id = message.reply_to_message.from_user.id
        username = message.reply_to_message.from_user.full_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_banned = await user_repo.is_user_banned(user_id, message.chat.id)

        if is_banned:
            await message.reply(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–µ–π—á–∞—Å –∑–∞–±–∞–Ω–µ–Ω.\n"
                f"–î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º:\n"
                f"/unban {user_id} {message.chat.id}"
            )

            # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            try:
                await message.delete()
            except Exception:
                pass
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ï –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö)
        await user_repo.add_to_approved(user_id)

        response_text = (
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n"
            f"üõ°Ô∏è –ï–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞ —Å–ø–∞–º\n"
            f"‚ÑπÔ∏è –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º"
        )

        await message.reply(response_text)

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞
        try:
            await message.delete()
        except Exception:
            pass

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await message.delete()
        except Exception:
            pass


@router.message(Command("spam"), F.chat.type.in_({"group", "channel"}))
async def cmd_mark_spam(message: types.Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞–∑—Ü—ã —Å–ø–∞–º–∞"""
    if not message.reply_to_message or not message.reply_to_message.text:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    deps: Dict[str, Any] = kwargs.get("deps", {})
    spam_samples_repo = deps.get("spam_samples_repository")

    if not spam_samples_repo:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü —Å–ø–∞–º–∞
        from ....domain.entity.spam_sample import SpamSample, SampleType, SampleSource

        sample = SpamSample(
            text=message.reply_to_message.text,
            type=SampleType.SPAM,
            source=SampleSource.ADMIN_REPORT,
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id,
        )

        await spam_samples_repo.save_sample(sample)

        await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É —Å–ø–∞–º-–æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞ –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å–ø–∞–º
        try:
            await message.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /spam
            await message.reply_to_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await message.delete()
        except Exception:
            pass


@router.message(Command("spamstats"), F.chat.type == "private")
async def cmd_spamstats(message: types.Message, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ)"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repo = deps.get("user_repository")

    if not user_repo:
        await message.reply("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []

    if not args:
        await message.reply(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/spamstats &lt;user_id&gt;\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/spamstats 123456789\n\n"
            "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
            parse_mode="HTML"
        )
        return

    try:
        user_id = int(args[0])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await user_repo.get_user_info(user_id)
        daily_spam_count = await user_repo.get_daily_spam_count(user_id)

        username = user_info.get("username", f"ID {user_id}") if user_info else f"ID {user_id}"

        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üÜî ID: <code>{user_id}</code>

üö® <b>–°–ø–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {daily_spam_count}
‚ö†Ô∏è <b>–õ–∏–º–∏—Ç:</b> 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å

{"üî¥ –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢!" if daily_spam_count >= 3 else "üü¢ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"}
        """

        await message.reply(stats_text, parse_mode="HTML")

    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@router.message(Command("resetspam"), F.chat.type == "private")
async def cmd_reset_spam(message: types.Message, **kwargs):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ)"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    user_repo = deps.get("user_repository")

    if not user_repo:
        await message.reply("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []

    if not args:
        await message.reply(
            "üîÑ <b>–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–ø–∞–º–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/resetspam &lt;user_id&gt;\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/resetspam 123456789\n\n"
            "–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
            parse_mode="HTML"
        )
        return

    try:
        user_id = int(args[0])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await user_repo.get_user_info(user_id)
        username = user_info.get("username", f"ID {user_id}") if user_info else f"ID {user_id}"

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞
        await user_repo.reset_daily_spam_count(user_id)

        response_text = (
            f"üîÑ <b>–°—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞ —Å–±—Ä–æ—à–µ–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"‚úÖ –°—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–±—Ä–æ—à–µ–Ω"
        )

        await message.reply(response_text, parse_mode="HTML")

    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞: {str(e)}")


@router.message(Command("stats"), F.chat.type == "private")
async def cmd_stats(message: types.Message, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ)"""
    deps: Dict[str, Any] = kwargs.get("deps", {})
    message_repo = deps.get("message_repository")

    if not message_repo:
        await message.reply("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []

    if not args:
        await message.reply(
            "üìä <b>–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/stats &lt;chat_id&gt; [hours]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/stats -1001234567890 24\n"
            "/stats -1001234567890\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞.",
            parse_mode="HTML"
        )
        return

    try:
        chat_id = int(args[0])
        hours = int(args[1]) if len(args) > 1 else 24

        if hours > 168:  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è
            hours = 168
            await message.reply("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 168 —á–∞—Å–æ–≤ (–Ω–µ–¥–µ–ª—è)")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        stats = await message_repo.get_chat_stats(chat_id, hours=hours)

        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –∑–∞ {hours} —á–∞—Å–æ–≤:</b>
üÜî Chat ID: <code>{chat_id}</code>

üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}
üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∞–º–∞: {stats.get('spam_messages', 0)}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}
üî® –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('banned_users', 0)}

üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∞–º–∞: {stats.get('spam_percentage', 0):.1f}%
‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('avg_processing_time', 0):.1f}ms
        """

        await message.reply(stats_text)

    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id –∏–ª–∏ hours")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
