from aiogram import Router, types, F
from typing import Dict, Any

router = Router()


@router.callback_query(F.data.startswith("ban_confirm:"))
async def callback_ban_confirm(callback: types.CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.data.split(":")[1]
    deps: Dict[str, Any] = kwargs.get("deps", {})

    ban_user_usecase = deps.get("ban_user_usecase")
    if not ban_user_usecase:
        await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")

        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("ban_cancel:"))
async def callback_ban_cancel(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer("‚ùå –ë–∞–Ω –æ—Ç–º–µ–Ω–µ–Ω")

        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå <b>–û—Ç–º–µ–Ω–µ–Ω–æ:</b> –±–∞–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("unban:"))
async def callback_unban(callback: types.CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.data.split(":")[1]
    deps: Dict[str, Any] = kwargs.get("deps", {})

    try:
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω")

        await callback.message.edit_text(
            f"{callback.message.text}\n\nüîì <b>–†–∞–∑–±–∞–Ω–µ–Ω:</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("spam_details:"))
async def callback_spam_details(callback: types.CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞"""
    message_id = callback.data.split(":")[1]
    deps: Dict[str, Any] = kwargs.get("deps", {})

    try:
        details = (
            "üîç <b>–î–µ—Ç–∞–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏:</b>\n\n"
            "‚Ä¢ Similarity: 0.85\n"
            "‚Ä¢ CAS: banned\n"
            "‚Ä¢ Stop words: found\n"
            "‚Ä¢ Processing time: 150ms"
        )

        await callback.answer()
        await callback.message.answer(details)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
