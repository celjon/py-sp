"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Telegram Bot API –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç–∞
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ñ–∏—á–∞–º–∏ –æ—Ç Telegram
"""

from aiogram import Router, types, F
from aiogram.filters import Command, ChatMemberUpdatedFilter
from typing import Dict, Any, Optional
import logging
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)
router = Router()


@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=True))
async def handle_chat_member_updated(event: types.ChatMemberUpdated, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π ChatMemberUpdated API
    """
    deps: Dict[str, Any] = kwargs.get("deps", {})

    try:
        old_member = event.old_chat_member
        new_member = event.new_chat_member

        if old_member.status == "left" and new_member.status == "member":
            await _handle_new_member_join(event, deps)

        elif old_member.status == "member" and new_member.status == "kicked":
            await _handle_member_banned(event, deps)

        elif (old_member.status in ["member", "restricted"] and
              new_member.status == "administrator"):
            await _handle_admin_promotion(event, deps)

    except Exception as e:
        logger.error(f"Chat member update handler error: {e}")


async def _handle_new_member_join(event: types.ChatMemberUpdated, deps: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user = event.new_chat_member.user
    chat = event.chat

    logger.info(f"New member joined: {user.full_name} ({user.id}) to {chat.title}")

    cas_gateway = deps.get("cas_gateway")
    if cas_gateway:
        try:
            is_banned = await cas_gateway.check_user(user.id, {})
            if is_banned.get("is_banned"):
                logger.warning(f"CAS banned user detected: {user.id}")

                await event.bot.ban_chat_member(
                    chat_id=chat.id,
                    user_id=user.id,
                    revoke_messages=True
                )

                admin_chat_id = deps.get("admin_chat_id")
                if admin_chat_id:
                    notification = (
                        f"üö® <b>CAS Auto-Ban</b>\n\n"
                        f"üë§ User: {user.full_name}\n"
                        f"üÜî ID: {user.id}\n"
                        f"üí¨ Chat: {chat.title}\n"
                        f"üîç Reason: CAS database match"
                    )
                    await event.bot.send_message(admin_chat_id, notification)

        except Exception as e:
            logger.error(f"CAS check failed for new member: {e}")


async def _handle_member_banned(event: types.ChatMemberUpdated, deps: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user = event.new_chat_member.user
    chat = event.chat

    user_repo = deps.get("user_repository")
    if user_repo:
        try:
            await user_repo.save_ban_info(
                user_id=user.id,
                chat_id=chat.id,
                banned_by_admin_id=event.from_user.id if event.from_user else None,
                ban_reason="admin_action",
                banned_message="",
                username=user.full_name
            )
        except Exception as e:
            logger.error(f"Failed to save ban info: {e}")


async def _handle_admin_promotion(event: types.ChatMemberUpdated, deps: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–∞—á–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    user = event.new_chat_member.user
    chat = event.chat

    logger.info(f"User {user.full_name} ({user.id}) promoted to admin in {chat.title}")

    admin_chat_id = deps.get("admin_chat_id")
    if admin_chat_id:
        notification = (
            f"üëë <b>New Administrator</b>\n\n"
            f"üë§ User: {user.full_name}\n"
            f"üÜî ID: {user.id}\n"
            f"üí¨ Chat: {chat.title}\n"
            f"üïê Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        try:
            await event.bot.send_message(admin_chat_id, notification)
        except Exception as e:
            logger.error(f"Failed to send admin promotion notification: {e}")


@router.message(Command("chat_info"))
async def cmd_chat_info(message: types.Message, **kwargs):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è Telegram API
    """
    try:
        chat = await message.bot.get_chat(message.chat.id)

        info_text = f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
        info_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
        info_text += f"üÜî ID: <code>{chat.id}</code>\n"
        info_text += f"üë• –¢–∏–ø: {chat.type}\n"

        try:
            member_count = await message.bot.get_chat_member_count(message.chat.id)
            info_text += f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
        except Exception:
            pass

        if hasattr(chat, 'has_aggressive_anti_spam_enabled'):
            antispam_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if chat.has_aggressive_anti_spam_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
            info_text += f"üõ°Ô∏è –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∞–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞: {antispam_status}\n"

        if hasattr(chat, 'has_hidden_members'):
            hidden_status = "‚úÖ –î–∞" if chat.has_hidden_members else "‚ùå –ù–µ—Ç"
            info_text += f"üëª –°–∫—Ä—ã—Ç—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {hidden_status}\n"

        if hasattr(chat, 'has_protected_content'):
            protected_status = "‚úÖ –î–∞" if chat.has_protected_content else "‚ùå –ù–µ—Ç"
            info_text += f"üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {protected_status}\n"

        if chat.description:
            info_text += f"\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{chat.description[:200]}{'...' if len(chat.description) > 200 else ''}\n"

        await message.reply(info_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Chat info error: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ")


@router.message(Command("user_info"))
async def cmd_user_info(message: types.Message, **kwargs):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
    """
    deps: Dict[str, Any] = kwargs.get("deps", {})

    target_user = None
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        args = message.text.split()[1:] if message.text else []
        if args:
            try:
                user_id = int(args[0])
                target_user = types.User(id=user_id, is_bot=False, first_name="Unknown")
            except ValueError:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        else:
            target_user = message.from_user

    if not target_user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        info_text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        info_text += f"üÜî ID: <code>{target_user.id}</code>\n"
        info_text += f"üìù –ò–º—è: {target_user.full_name}\n"

        if target_user.username:
            info_text += f"üîó Username: @{target_user.username}\n"

        info_text += f"ü§ñ –ë–æ—Ç: {'–î–∞' if target_user.is_bot else '–ù–µ—Ç'}\n"

        cas_gateway = deps.get("cas_gateway")
        if cas_gateway:
            try:
                cas_result = await cas_gateway.check_user(target_user.id, {})
                cas_status = "üî¥ –ó–∞–±–∞–Ω–µ–Ω" if cas_result.get("is_banned") else "üü¢ –ß–∏—Å—Ç"
                info_text += f"üõ°Ô∏è CAS: {cas_status}\n"
            except Exception as e:
                info_text += f"üõ°Ô∏è CAS: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"

        user_repo = deps.get("user_repository")
        if user_repo:
            try:
                is_banned = await user_repo.is_user_banned(target_user.id, message.chat.id)
                local_status = "üî¥ –ó–∞–±–∞–Ω–µ–Ω" if is_banned else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
                info_text += f"üìã –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î: {local_status}\n"

                is_approved = await user_repo.is_user_approved(target_user.id, message.chat.id)
                approved_status = "‚≠ê –í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ" if is_approved else "‚ûñ –û–±—ã—á–Ω—ã–π"
                info_text += f"üìã –°—Ç–∞—Ç—É—Å: {approved_status}\n"

            except Exception as e:
                info_text += f"üìã –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"

        try:
            chat_member = await message.bot.get_chat_member(message.chat.id, target_user.id)
            status_map = {
                "creator": "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å",
                "administrator": "üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "member": "üë§ –£—á–∞—Å—Ç–Ω–∏–∫",
                "restricted": "üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω",
                "left": "üëã –ü–æ–∫–∏–Ω—É–ª",
                "kicked": "üö´ –ó–∞–±–∞–Ω–µ–Ω"
            }
            chat_status = status_map.get(chat_member.status, chat_member.status)
            info_text += f"üè† –°—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ: {chat_status}\n"
        except Exception:
            info_text += f"üè† –°—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ: ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω\n"

        await message.reply(info_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"User info error: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")


@router.message(Command("cas_check"))
async def cmd_cas_check(message: types.Message, **kwargs):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CAS (Combot Anti-Spam)
    """
    deps: Dict[str, Any] = kwargs.get("deps", {})

    target_user = None
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        args = message.text.split()[1:] if message.text else []
        if args:
            try:
                user_id = int(args[0])
                target_user = types.User(id=user_id, is_bot=False, first_name="Unknown")
            except ValueError:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        else:
            target_user = message.from_user

    if not target_user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    cas_gateway = deps.get("cas_gateway")
    if not cas_gateway:
        await message.reply("‚ùå CAS gateway –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    try:
        cas_result = await cas_gateway.check_user(target_user.id, {})

        result_text = f"üõ°Ô∏è <b>CAS –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n"
        result_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.full_name}\n"
        result_text += f"üÜî ID: <code>{target_user.id}</code>\n\n"

        if cas_result.get("is_banned"):
            result_text += f"üî¥ <b>–°—Ç–∞—Ç—É—Å: –ó–ê–ë–ê–ù–ï–ù</b>\n"
            if cas_result.get("reason"):
                result_text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {cas_result['reason']}\n"
        else:
            result_text += f"üü¢ <b>–°—Ç–∞—Ç—É—Å: –ß–ò–°–¢</b>\n"

        await message.reply(result_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"CAS check error: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ CAS")


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)