import time
from typing import Dict, Any, Callable
from fastapi import Request, Response, HTTPException, status
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse
from ...domain.entity.api_key import ApiKey
from ...domain.entity.client_usage import RateLimitStatus
from ...adapter.repository.api_key_repository import ApiKeyRepository
from ...adapter.repository.usage_repository import UsageRepository


class ApiAuthMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç API –∫–ª—é—á–∏ –∏ rate limiting
    """
    
    def __init__(
        self,
        app,
        api_key_repo: ApiKeyRepository,
        usage_repo: UsageRepository,
        protected_paths: list = None
    ):
        super().__init__(app)
        self.api_key_repo = api_key_repo
        self.usage_repo = usage_repo
        
        # –ü—É—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.protected_paths = protected_paths or [
            "/api/v1/detect",
            "/api/v1/detect/batch",
            "/api/v1/stats",
            "/api/v1/account/"
        ]
        
        # –ö—ç—à –¥–ª—è API –∫–ª—é—á–µ–π (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        self._key_cache: Dict[str, Dict[str, Any]] = {}
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        print(f"üîê API Auth middleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—É—Ç–µ–π: {self.protected_paths}")
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ middleware"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
        if not self._requires_auth(request.url.path):
            return await call_next(request)
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º API –∫–ª—é—á –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            api_key_str = self._extract_api_key(request)
            if not api_key_str:
                return self._unauthorized_response("API key is required")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º API –∫–ª—é—á
            api_key = await self._get_and_validate_api_key(api_key_str)
            if not api_key:
                return self._unauthorized_response("Invalid or expired API key")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å
            client_ip = self._get_client_ip(request)
            if not api_key.check_ip_allowed(client_ip):
                return self._forbidden_response(f"IP address {client_ip} not allowed")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
            rate_limit_error = await self._check_rate_limits(api_key, client_ip)
            if rate_limit_error:
                return self._rate_limit_response(rate_limit_error)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API –∫–ª—é—á–µ –≤ request state
            request.state.api_key = api_key
            request.state.client_ip = client_ip
            request.state.authenticated = True
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
            response = await call_next(request)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ rate limiting
            await self._add_rate_limit_headers(response, api_key)
            
            return response
            
        except HTTPException:
            raise
        except Exception as e:
            print(f"API Auth middleware error: {e}")
            return JSONResponse(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                content={"error": "Authentication service unavailable"}
            )
    
    def _requires_auth(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø—É—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        return any(path.startswith(protected_path) for protected_path in self.protected_paths)
    
    def _extract_api_key(self, request: Request) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç API –∫–ª—é—á –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Authorization header (Bearer token)
        auth_header = request.headers.get("Authorization")
        if auth_header and auth_header.startswith("Bearer "):
            return auth_header[7:]  # –£–±–∏—Ä–∞–µ–º "Bearer "
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º X-API-Key header
        api_key_header = request.headers.get("X-API-Key")
        if api_key_header:
            return api_key_header
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º query parameter
        api_key_param = request.query_params.get("api_key")
        if api_key_param:
            return api_key_param
        
        return None
    
    async def _get_and_validate_api_key(self, api_key_str: str) -> ApiKey:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç API –∫–ª—é—á"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"api_key:{ApiKey.hash_key(api_key_str)}"
        cached = self._key_cache.get(cache_key)
        
        if cached and time.time() - cached["timestamp"] < self._cache_ttl:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –∫—ç—à–∞
            if cached["valid"]:
                return cached["api_key"]
            else:
                return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
        key_hash = ApiKey.hash_key(api_key_str)
        api_key = await self.api_key_repo.get_api_key_by_hash(key_hash)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á
        is_valid = api_key and api_key.is_valid and api_key.verify_key(api_key_str)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._key_cache[cache_key] = {
            "timestamp": time.time(),
            "valid": is_valid,
            "api_key": api_key if is_valid else None
        }
        
        return api_key if is_valid else None
    
    async def _check_rate_limits(self, api_key: ApiKey, client_ip: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting –¥–ª—è API –∫–ª—é—á–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å rate limiting
            rate_limit_status = await self.usage_repo.get_rate_limit_status(api_key.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–ª—é—á–∞
            rate_limits = api_key.get_rate_limits()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            limit_error = rate_limit_status.check_limits(rate_limits)
            if limit_error:
                return limit_error
            
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ (—ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
            rate_limit_status.increment_counters()
            
            return None
            
        except Exception as e:
            print(f"Rate limit check error: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
            return None
    
    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç reverse proxy
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip.strip()
        
        # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if request.client:
            return request.client.host
        
        return "unknown"
    
    async def _add_rate_limit_headers(self, response: Response, api_key: ApiKey):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ rate limiting"""
        try:
            rate_limits = api_key.get_rate_limits()
            rate_limit_status = await self.usage_repo.get_rate_limit_status(api_key.id)
            remaining = rate_limit_status.get_remaining_requests(rate_limits)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            response.headers["X-RateLimit-Limit-Minute"] = str(rate_limits.get("requests_per_minute", -1))
            response.headers["X-RateLimit-Limit-Day"] = str(rate_limits.get("requests_per_day", -1))
            response.headers["X-RateLimit-Remaining-Minute"] = str(remaining.get("minute", -1))
            response.headers["X-RateLimit-Remaining-Day"] = str(remaining.get("day", -1))
            response.headers["X-RateLimit-Reset"] = str(int(time.time()) + 60)
            
        except Exception as e:
            print(f"Failed to add rate limit headers: {e}")
    
    def _unauthorized_response(self, message: str) -> JSONResponse:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç 401 Unauthorized"""
        return JSONResponse(
            status_code=status.HTTP_401_UNAUTHORIZED,
            content={
                "error": "Unauthorized",
                "message": message,
                "timestamp": time.time()
            },
            headers={"WWW-Authenticate": "Bearer"}
        )
    
    def _forbidden_response(self, message: str) -> JSONResponse:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç 403 Forbidden"""
        return JSONResponse(
            status_code=status.HTTP_403_FORBIDDEN,
            content={
                "error": "Forbidden",
                "message": message,
                "timestamp": time.time()
            }
        )
    
    def _rate_limit_response(self, message: str) -> JSONResponse:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç 429 Too Many Requests"""
        return JSONResponse(
            status_code=status.HTTP_429_TOO_MANY_REQUESTS,
            content={
                "error": "Rate limit exceeded",
                "message": message,
                "retry_after": 60,
                "timestamp": time.time()
            },
            headers={"Retry-After": "60"}
        )
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à API –∫–ª—é—á–µ–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö)"""
        self._key_cache.clear()


class ApiKeyExtractorMiddleware(BaseHTTPMiddleware):
    """
    –õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π middleware –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è API –∫–ª—é—á–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ –±–µ–∑ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    
    def __init__(self, app, api_key_repo: ApiKeyRepository):
        super().__init__(app)
        self.api_key_repo = api_key_repo
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç API –∫–ª—é—á –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ request state"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º API –∫–ª—é—á
        api_key_str = self._extract_api_key(request)
        
        if api_key_str:
            try:
                # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ë–î
                key_hash = ApiKey.hash_key(api_key_str)
                api_key = await self.api_key_repo.get_api_key_by_hash(key_hash)
                
                if api_key and api_key.verify_key(api_key_str):
                    request.state.api_key = api_key
                    request.state.authenticated = True
                else:
                    request.state.api_key = None
                    request.state.authenticated = False
            except Exception as e:
                print(f"API key extraction error: {e}")
                request.state.api_key = None
                request.state.authenticated = False
        else:
            request.state.api_key = None
            request.state.authenticated = False
        
        return await call_next(request)
    
    def _extract_api_key(self, request: Request) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç API –∫–ª—é—á –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        # Authorization header
        auth_header = request.headers.get("Authorization")
        if auth_header and auth_header.startswith("Bearer "):
            return auth_header[7:]
        
        # X-API-Key header
        api_key_header = request.headers.get("X-API-Key")
        if api_key_header:
            return api_key_header
        
        # Query parameter (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)
        api_key_param = request.query_params.get("api_key")
        if api_key_param:
            return api_key_param
        
        return None