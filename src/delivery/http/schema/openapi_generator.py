# src/delivery/http/schema/openapi_generator.py
"""
Production-ready OpenAPI Schema Generator
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è Swagger UI
"""

from typing import Dict, Any, List
from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi


def generate_production_openapi_schema(app: FastAPI) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç production-ready OpenAPI —Å—Ö–µ–º—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π

    Args:
        app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

    Returns:
        –ü–æ–ª–Ω–∞—è OpenAPI —Å—Ö–µ–º–∞
    """

    if app.openapi_schema:
        return app.openapi_schema

    # –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞
    openapi_schema = get_openapi(
        title="AntiSpam Detection API",
        version="2.0.0",
        description=_get_api_description(),
        routes=app.routes,
        servers=[
            {"url": "https://api.antispam.com", "description": "Production Server"},
            {"url": "https://staging.api.antispam.com", "description": "Staging Server"},
            {"url": "http://localhost:8080", "description": "Development Server"},
        ],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    _add_security_schemes(openapi_schema)
    _add_response_examples(openapi_schema)
    _add_error_schemas(openapi_schema)
    _add_rate_limiting_info(openapi_schema)
    _add_usage_examples(openapi_schema)
    _add_sdk_information(openapi_schema)

    # –ö—ç—à–∏—Ä—É–µ–º —Å—Ö–µ–º—É
    app.openapi_schema = openapi_schema
    return openapi_schema


def _get_api_description() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ API"""
    return """
# üõ°Ô∏è AntiSpam Detection API v2.0

**Production-ready API –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞** —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤.

## üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è**: CAS + RUSpam BERT + OpenAI GPT-4
- **Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞**: –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
- **Real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**: –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- **–ì–∏–±–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: API –∫–ª—é—á–∏ + JWT —Ç–æ–∫–µ–Ω—ã
- **Rate limiting**: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–∞–º
- **High availability**: 99.9% uptime, <200ms response time

## üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏

1. **CAS Check** (100ms) - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
2. **RUSpam BERT** (300ms) - ML –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
3. **OpenAI Analysis** (1.5s) - –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤

## üìä –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã

| –ü–ª–∞–Ω | –ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω | –ó–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å | –¶–µ–Ω–∞ |
|------|-------------|---------------|------|
| Free | 60 | 5,000 | –ë–µ—Å–ø–ª–∞—Ç–Ω–æ |
| Basic | 120 | 10,000 | $9/–º–µ—Å |
| Pro | 300 | 50,000 | $49/–º–µ—Å |
| Enterprise | 1,000+ | 1,000,000+ | –ü–æ –∑–∞–ø—Ä–æ—Å—É |

## üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: https://docs.antispam.com
- **Python SDK**: `pip install antispam-client`
- **JavaScript SDK**: `npm install @antispam/client`
- **Support**: support@antispam.com
- **Status Page**: https://status.antispam.com

## üõ†Ô∏è –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```bash
# 1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á
curl -X POST "https://api.antispam.com/api/v1/auth/keys" \\
  -u "admin:password" \\
  -H "Content-Type: application/json" \\
  -d '{"client_name": "My App", "contact_email": "dev@company.com"}'

# 2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
curl -X POST "https://api.antispam.com/api/v1/detect" \\
  -H "Authorization: Bearer YOUR_API_KEY" \\
  -H "Content-Type: application/json" \\
  -d '{"text": "–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?"}'
```
    """.strip()


def _add_security_schemes(openapi_schema: Dict[str, Any]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if "components" not in openapi_schema:
        openapi_schema["components"] = {}

    openapi_schema["components"]["securitySchemes"] = {
        "ApiKeyAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "API Key",
            "description": "API –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `antispam_your_api_key_here`",
        },
        "JWTAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "description": "JWT —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ `/auth/token`",
        },
        "ApiKeyHeader": {
            "type": "apiKey",
            "in": "header",
            "name": "X-API-Key",
            "description": "API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-API-Key",
        },
        "BasicAuth": {
            "type": "http",
            "scheme": "basic",
            "description": "Basic Auth –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö endpoints",
        },
    }

    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    openapi_schema["security"] = [{"ApiKeyAuth": []}, {"JWTAuth": []}, {"ApiKeyHeader": []}]


def _add_response_examples(openapi_schema: Dict[str, Any]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤"""

    # –°—Ö–µ–º—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if "components" not in openapi_schema:
        openapi_schema["components"] = {}
    if "schemas" not in openapi_schema["components"]:
        openapi_schema["components"]["schemas"] = {}

    # –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    openapi_schema["components"]["schemas"]["SpamDetectionExample"] = {
        "type": "object",
        "example": {
            "is_spam": True,
            "confidence": 0.89,
            "primary_reason": "openai",
            "reasons": ["promotional_content", "urgent_language", "contact_request"],
            "recommended_action": "ban_and_delete",
            "notes": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ –õ–°",
            "processing_time_ms": 342.5,
            "detection_id": "det_1234567890abcdef",
            "api_version": "2.0",
        },
    }

    openapi_schema["components"]["schemas"]["CleanMessageExample"] = {
        "type": "object",
        "example": {
            "is_spam": False,
            "confidence": 0.15,
            "primary_reason": "openai_clean",
            "reasons": [],
            "recommended_action": "allow",
            "notes": "–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º",
            "processing_time_ms": 125.8,
            "detection_id": "det_9876543210fedcba",
            "api_version": "2.0",
        },
    }

    openapi_schema["components"]["schemas"]["UsageStatsExample"] = {
        "type": "object",
        "example": {
            "api_key_info": {
                "id": 42,
                "client_name": "My Awesome Bot",
                "plan": "basic",
                "status": "active",
            },
            "usage_stats": {
                "total_requests": 1250,
                "successful_requests": 1198,
                "error_requests": 52,
                "success_rate": 95.84,
                "spam_detected": 89,
                "clean_detected": 1109,
                "spam_detection_rate": 7.43,
                "avg_confidence": 0.752,
                "avg_processing_time_ms": 234.5,
            },
            "rate_limits": {
                "current": {"requests_per_minute": 120, "requests_per_day": 10000},
                "remaining": {"requests_per_minute": 85, "requests_per_day": 8750},
            },
        },
    }


def _add_error_schemas(openapi_schema: Dict[str, Any]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—ã –æ—à–∏–±–æ–∫"""

    openapi_schema["components"]["schemas"]["ErrorResponse"] = {
        "type": "object",
        "properties": {
            "error": {"type": "string", "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"},
            "details": {"type": "string", "description": "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"},
            "error_code": {"type": "string", "description": "–ö–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"},
            "timestamp": {"type": "number", "description": "Unix timestamp –æ—à–∏–±–∫–∏"},
            "request_id": {"type": "string", "description": "ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞"},
        },
        "required": ["error", "timestamp"],
    }

    openapi_schema["components"]["schemas"]["ValidationError"] = {
        "type": "object",
        "properties": {
            "error": {"type": "string", "example": "Validation failed"},
            "details": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {"field": {"type": "string"}, "message": {"type": "string"}},
                },
                "example": [
                    {"field": "text", "message": "Text cannot be empty"},
                    {"field": "context.user_id", "message": "Must be positive integer"},
                ],
            },
        },
    }

    openapi_schema["components"]["schemas"]["RateLimitError"] = {
        "type": "object",
        "properties": {
            "error": {"type": "string", "example": "Rate limit exceeded"},
            "limit_type": {"type": "string", "example": "per_minute"},
            "retry_after_seconds": {"type": "integer", "example": 45},
            "reset_time": {
                "type": "string",
                "format": "date-time",
                "example": "2024-01-15T14:30:00Z",
            },
        },
    }


def _add_rate_limiting_info(openapi_schema: Dict[str, Any]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ rate limiting"""

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
    rate_limit_info = """

## üö¶ Rate Limiting

API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç rate limiting –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.

### –ó–∞–≥–æ–ª–æ–≤–∫–∏ Rate Limiting

–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏:

- `X-RateLimit-Limit-Minute`: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
- `X-RateLimit-Remaining-Minute`: –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–µ  
- `X-RateLimit-Reset`: Unix timestamp —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
- `Retry-After`: –°–µ–∫—É–Ω–¥—ã –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (–ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞)

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429

```python
import time
import requests

def make_request_with_retry(url, headers, data, max_retries=3):
    for attempt in range(max_retries):
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 429:
            retry_after = int(response.headers.get('Retry-After', 60))
            print(f"Rate limited. Waiting {retry_after} seconds...")
            time.sleep(retry_after)
            continue
            
        return response
    
    raise Exception("Max retries exceeded")
```

### –õ–∏–º–∏—Ç—ã –ø–æ –ø–ª–∞–Ω–∞–º

| –ü–ª–∞–Ω | –ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω | –ó–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å | Burst |
|------|-------------|---------------|-------|
| Free | 60 | 5,000 | 10 |
| Basic | 120 | 10,000 | 20 |  
| Pro | 300 | 50,000 | 50 |
| Enterprise | 1,000+ | –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤ | 200 |

"""

    if "info" in openapi_schema:
        openapi_schema["info"]["description"] += rate_limit_info


def _add_usage_examples(openapi_schema: Dict[str, Any]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""

    usage_examples = """

## üîß –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### Python

```python
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
API_KEY = "antispam_your_api_key_here"
BASE_URL = "https://api.antispam.com/api/v1"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
response = requests.post(
    f"{BASE_URL}/detect",
    headers=headers,
    json={
        "text": "–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å? –ü–∏—à–∏ –≤ –õ–°!",
        "context": {
            "user_id": 12345,
            "is_new_user": True,
            "language_hint": "ru"
        }
    }
)

result = response.json()
print(f"Spam: {result['is_spam']}, Confidence: {result['confidence']}")

# Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞
messages = [
    {"text": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"},
    {"text": "–°–†–û–ß–ù–û! –ó–ê–†–ê–ë–û–¢–ê–ô –ú–ò–õ–õ–ò–û–ù!"},
    {"text": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"}
]

batch_response = requests.post(
    f"{BASE_URL}/detect/batch",
    headers=headers,
    json={"messages": messages}
)

batch_result = batch_response.json()
print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {batch_result['summary']['total_messages']}")
print(f"–°–ø–∞–º –Ω–∞–π–¥–µ–Ω: {batch_result['summary']['spam_detected']}")
```

### JavaScript/Node.js

```javascript
const axios = require('axios');

const API_KEY = 'antispam_your_api_key_here';
const BASE_URL = 'https://api.antispam.com/api/v1';

const headers = {
    'Authorization': `Bearer ${API_KEY}`,
    'Content-Type': 'application/json'
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function checkSpam(text, context = {}) {
    try {
        const response = await axios.post(
            `${BASE_URL}/detect`,
            { text, context },
            { headers }
        );
        
        return response.data;
    } catch (error) {
        if (error.response?.status === 429) {
            const retryAfter = error.response.headers['retry-after'];
            console.log(`Rate limited. Retry after ${retryAfter} seconds`);
        }
        throw error;
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
checkSpam('–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏?')
    .then(result => {
        console.log(`Spam: ${result.is_spam}, Confidence: ${result.confidence}`);
    });
```

### cURL

```bash
# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
curl -X POST "https://api.antispam.com/api/v1/detect" \\
  -H "Authorization: Bearer antispam_your_api_key_here" \\
  -H "Content-Type: application/json" \\
  -d '{
    "text": "–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å? –ü–∏—à–∏ –≤ –õ–°!",
    "context": {"user_id": 12345, "is_new_user": true}
  }'

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
curl -X GET "https://api.antispam.com/api/v1/stats?hours=24" \\
  -H "Authorization: Bearer antispam_your_api_key_here"

# Health check
curl -X GET "https://api.antispam.com/api/v1/health"
```

"""

    if "info" in openapi_schema:
        openapi_schema["info"]["description"] += usage_examples


def _add_sdk_information(openapi_schema: Dict[str, Any]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± SDK"""

    sdk_info = """

## üì¶ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ SDK

### Python SDK

```bash
pip install antispam-client
```

```python
from antispam_client import AntiSpamClient

client = AntiSpamClient(api_key="your_api_key")

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
result = await client.detect("–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?")
print(result.is_spam)  # True/False

# Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞
messages = ["Message 1", "Message 2", "Message 3"]
results = await client.detect_batch(messages)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = await client.get_usage_stats(hours=24)
print(f"Requests today: {stats.total_requests}")
```

### JavaScript SDK

```bash
npm install @antispam/client
```

```javascript
import { AntiSpamClient } from '@antispam/client';

const client = new AntiSpamClient({
    apiKey: 'your_api_key',
    baseUrl: 'https://api.antispam.com'
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞
const result = await client.detect('–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?');
console.log(result.isSpam);

// Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞  
const messages = ['Message 1', 'Message 2'];
const results = await client.detectBatch(messages);

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = await client.getUsageStats({ hours: 24 });
```

### PHP SDK

```bash
composer require antispam/php-client
```

```php
use AntiSpam\\Client;

$client = new Client('your_api_key');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
$result = $client->detect('–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?');
echo $result->isSpam ? 'SPAM' : 'CLEAN';

// Batch –ø—Ä–æ–≤–µ—Ä–∫–∞
$messages = ['Message 1', 'Message 2'];
$results = $client->detectBatch($messages);
```

### Go SDK

```bash
go get github.com/antispam/go-client
```

```go
package main

import (
    "github.com/antispam/go-client"
)

func main() {
    client := antispam.NewClient("your_api_key")
    
    result, err := client.Detect("–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?")
    if err != nil {
        log.Fatal(err)
    }
    
    fmt.Printf("Spam: %v, Confidence: %.2f\\n", 
        result.IsSpam, result.Confidence)
}
```

## üîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã

- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: https://docs.antispam.com
- **GitHub**: https://github.com/antispam-api
- **Support**: support@antispam.com  
- **Status**: https://status.antispam.com
- **Changelog**: https://docs.antispam.com/changelog

"""

    if "info" in openapi_schema:
        openapi_schema["info"]["description"] += sdk_info


def customize_swagger_ui() -> Dict[str, Any]:
    """–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è Swagger UI"""
    return {
        "swagger_ui_parameters": {
            "deepLinking": True,
            "displayRequestDuration": True,
            "docExpansion": "none",
            "operationsSorter": "method",
            "filter": True,
            "showExtensions": True,
            "showCommonExtensions": True,
            "defaultModelsExpandDepth": 2,
            "defaultModelExpandDepth": 2,
            "displayOperationId": True,
            "tryItOutEnabled": True,
        },
        "swagger_ui_oauth2_redirect_url": None,
        "swagger_ui_init_oauth": None,
    }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å FastAPI app
def setup_openapi_documentation(app: FastAPI) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Args:
        app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """

    # –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è Swagger UI
    ui_config = customize_swagger_ui()

    for key, value in ui_config.items():
        setattr(app, key, value)

    # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ö–µ–º–∞
    @app.get("/openapi.json", include_in_schema=False)
    async def custom_openapi():
        return generate_production_openapi_schema(app)

    print("‚úÖ OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print("üìö –î–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: /docs")
