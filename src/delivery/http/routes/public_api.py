from fastapi import APIRouter, HTTPException, Request, Depends, status
from pydantic import BaseModel, Field, validator
from typing import List, Optional, Dict, Any
import time
import sys

router = APIRouter()

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class DetectionContext(BaseModel):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞"""
    user_id: Optional[int] = Field(None, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram")
    chat_id: Optional[int] = Field(None, description="ID —á–∞—Ç–∞ Telegram") 
    is_new_user: bool = Field(False, description="–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º")
    is_admin_or_owner: bool = Field(False, description="–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º")
    language: Optional[str] = Field(None, description="–Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (ru/en/auto)")
    previous_warnings: int = Field(0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    class Config:
        schema_extra = {
            "example": {
                "user_id": 12345,
                "chat_id": -1001234567,
                "is_new_user": True,
                "is_admin_or_owner": False,
                "language": "ru",
                "previous_warnings": 0
            }
        }


class DetectionRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é —Å–ø–∞–º–∞"""
    text: str = Field(..., min_length=1, max_length=4096, description="–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    context: Optional[DetectionContext] = Field(None, description="–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    @validator('text')
    def validate_text(cls, v):
        if not v or not v.strip():
            raise ValueError('Text cannot be empty')
        return v.strip()
    
    class Config:
        schema_extra = {
            "example": {
                "text": "üî•üî•üî• –ó–∞—Ä–∞–±–æ—Ç–æ–∫! –î–µ—Ç–∞–ª–∏ –≤ –õ–°!",
                "context": {
                    "user_id": 12345,
                    "is_new_user": True,
                    "language": "ru"
                }
            }
        }


class BatchDetectionRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ batch –¥–µ—Ç–µ–∫—Ü–∏—é —Å–ø–∞–º–∞"""
    messages: List[DetectionRequest] = Field(..., min_items=1, max_items=100, description="–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    class Config:
        schema_extra = {
            "example": {
                "messages": [
                    {
                        "text": "üî•üî•üî• –ó–∞—Ä–∞–±–æ—Ç–æ–∫! –î–µ—Ç–∞–ª–∏ –≤ –õ–°!",
                        "context": {"is_new_user": True}
                    },
                    {
                        "text": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                        "context": {"is_new_user": False}
                    }
                ]
            }
        }


class DetectionResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é —Å–ø–∞–º–∞"""
    is_spam: bool = Field(..., description="–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º")
    confidence: float = Field(..., ge=0.0, le=1.0, description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏ (0.0-1.0)")
    reason: str = Field(..., description="–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏")
    action: str = Field(..., description="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    processing_time_ms: float = Field(..., description="–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö")
    details: Optional[str] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏")
    detected_patterns: Optional[List[str]] = Field(None, description="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞")
    
    class Config:
        schema_extra = {
            "example": {
                "is_spam": True,
                "confidence": 0.87,
                "reason": "heuristics",
                "action": "ban_and_delete", 
                "processing_time_ms": 125.5,
                "details": "too many emojis; spam patterns detected",
                "detected_patterns": ["excessive_emojis", "spam_phrases"]
            }
        }


class BatchDetectionResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ batch –¥–µ—Ç–µ–∫—Ü–∏—é"""
    results: List[DetectionResponse] = Field(..., description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏")
    total_processed: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    total_processing_time_ms: float = Field(..., description="–û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    class Config:
        schema_extra = {
            "example": {
                "results": [
                    {"is_spam": True, "confidence": 0.87, "reason": "heuristics", "action": "ban_and_delete", "processing_time_ms": 125.5},
                    {"is_spam": False, "confidence": 0.15, "reason": "heuristics", "action": "allow", "processing_time_ms": 45.2}
                ],
                "total_processed": 2,
                "total_processing_time_ms": 170.7
            }
        }


class ApiErrorResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
    error: str = Field(..., description="–¢–∏–ø –æ—à–∏–±–∫–∏")
    message: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏")
    timestamp: float = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")
    request_id: Optional[str] = Field(None, description="ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")


def get_dependencies(request: Request) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ app state"""
    return request.app.state.dependencies


def get_api_key(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ middleware"""
    if not hasattr(request.state, 'api_key') or not request.state.api_key:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="API key required"
        )
    return request.state.api_key


def get_client_info(request: Request) -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    return {
        "ip": getattr(request.state, 'client_ip', 'unknown'),
        "user_agent": request.headers.get("User-Agent", "unknown")
    }


@router.post(
    "/detect",
    response_model=DetectionResponse,
    summary="–î–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞",
    description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–∞–º —Å –ø–æ–º–æ—â—å—é –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏"
)
async def detect_spam(
    detection_request: DetectionRequest,
    request: Request,
    api_key=Depends(get_api_key),
    client_info=Depends(get_client_info),
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º use case
        detect_spam_usecase = dependencies.get("detect_spam_usecase")
        if not detect_spam_usecase:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Spam detection service unavailable"
            )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        from ....domain.usecase.api.detect_spam import DetectionRequest as DomainRequest
        
        domain_request = DomainRequest(
            text=detection_request.text,
            context=detection_request.context.dict() if detection_request.context else {},
            client_ip=client_info["ip"],
            user_agent=client_info["user_agent"],
            request_size_bytes=len(str(detection_request.dict()))
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
        result = await detect_spam_usecase.execute(api_key, domain_request)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        return DetectionResponse(**result.to_dict())
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Detection API error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Detection failed: {str(e)}"
        )


@router.post(
    "/detect/batch",
    response_model=BatchDetectionResponse,
    summary="Batch –¥–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞", 
    description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π)"
)
async def detect_spam_batch(
    batch_request: BatchDetectionRequest,
    request: Request,
    api_key=Depends(get_api_key),
    client_info=Depends(get_client_info),
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """Batch endpoint –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º use case
        batch_detect_usecase = dependencies.get("batch_detect_usecase")
        if not batch_detect_usecase:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Batch detection service unavailable"
            )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        from ....domain.usecase.api.detect_spam import DetectionRequest as DomainRequest
        
        domain_requests = []
        for msg in batch_request.messages:
            domain_request = DomainRequest(
                text=msg.text,
                context=msg.context.dict() if msg.context else {},
                client_ip=client_info["ip"],
                user_agent=client_info["user_agent"],
                request_size_bytes=len(str(msg.dict()))
            )
            domain_requests.append(domain_request)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º batch –¥–µ—Ç–µ–∫—Ü–∏—é
        start_time = time.time()
        results = await batch_detect_usecase.execute(api_key, domain_requests)
        total_time = (time.time() - start_time) * 1000
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_results = [DetectionResponse(**result.to_dict()) for result in results]
        
        return BatchDetectionResponse(
            results=response_results,
            total_processed=len(results),
            total_processing_time_ms=round(total_time, 2)
        )
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Batch detection API error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Batch detection failed: {str(e)}"
        )


@router.get(
    "/detectors",
    summary="–°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞—Ö —Å–ø–∞–º–∞"
)
async def get_detectors(
    api_key=Depends(get_api_key),
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞—Ö"""
    try:
        spam_detector = dependencies.get("spam_detector")
        if not spam_detector:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Spam detector service unavailable"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞—Ö
        available_detectors = await spam_detector.get_available_detectors()
        health_info = await spam_detector.health_check()
        
        return {
            "available_detectors": available_detectors,
            "detector_status": health_info.get("detectors", {}),
            "overall_status": health_info.get("status", "unknown"),
            "timestamp": time.time()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Detectors info API error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get detectors info: {str(e)}"
        )


@router.get(
    "/stats",
    summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞"
)
async def get_usage_stats(
    hours: int = 24,
    api_key=Depends(get_api_key),
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞"""
    try:
        usage_repo = dependencies.get("usage_repository")
        if not usage_repo:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Usage statistics service unavailable"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from ....domain.entity.client_usage import UsagePeriod
        from datetime import datetime, timedelta
        
        start_time = datetime.utcnow() - timedelta(hours=hours)
        usage_stats = await usage_repo.get_usage_stats(
            api_key_id=api_key.id,
            period=UsagePeriod.HOUR,
            start_time=start_time
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        hourly_stats = await usage_repo.get_hourly_usage_stats(api_key.id, days=7)
        top_endpoints = await usage_repo.get_top_endpoints(api_key.id, hours=hours)
        
        return {
            "api_key_info": {
                "id": api_key.id,
                "client_name": api_key.client_name,
                "plan": api_key.plan.value,
                "rate_limits": api_key.get_rate_limits()
            },
            "usage_stats": usage_stats.to_dict(),
            "hourly_breakdown": hourly_stats[:24],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            "top_endpoints": top_endpoints,
            "period_hours": hours,
            "generated_at": datetime.utcnow().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Usage stats API error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get usage stats: {str(e)}"
        )


@router.get(
    "/health",
    summary="Health check",
    description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"
)
async def health_check(
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """Health check –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API"""
    try:
        spam_detector = dependencies.get("spam_detector")
        postgres_client = dependencies.get("postgres_client")
        redis_cache = dependencies.get("redis_cache")
        
        health_status = {
            "status": "healthy",
            "timestamp": time.time(),
            "version": "2.0.0",
            "services": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞
        if spam_detector:
            detector_health = await spam_detector.health_check()
            health_status["services"]["spam_detector"] = {
                "status": detector_health.get("status", "unknown"),
                "detectors": list(detector_health.get("detectors", {}).keys())
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
        if postgres_client:
            try:
                async with postgres_client.acquire() as conn:
                    await conn.fetchval("SELECT 1")
                health_status["services"]["database"] = {"status": "healthy"}
            except Exception as e:
                health_status["services"]["database"] = {"status": "unhealthy", "error": str(e)}
                health_status["status"] = "degraded"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        if redis_cache:
            try:
                await redis_cache.set("health_check", "ok", ttl=60)
                health_status["services"]["cache"] = {"status": "healthy"}
            except Exception as e:
                health_status["services"]["cache"] = {"status": "unhealthy", "error": str(e)}
                health_status["status"] = "degraded"
        
        return health_status
        
    except Exception as e:
        return {
            "status": "unhealthy",
            "timestamp": time.time(),
            "error": str(e)
        }


# Error handlers
@router.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –æ—à–∏–±–æ–∫"""
    return {
        "error": exc.detail,
        "status_code": exc.status_code,
        "timestamp": time.time(),
        "path": str(request.url.path)
    }


@router.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫"""
    print(f"Unhandled API error: {exc}")
    return {
        "error": "Internal server error",
        "message": "An unexpected error occurred",
        "timestamp": time.time(),
        "path": str(request.url.path)
    }