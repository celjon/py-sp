from fastapi import APIRouter, HTTPException, Request, Depends, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import secrets
import time
from ....domain.entity.spam_sample import SpamSample, SampleType, SampleSource

router = APIRouter()
security = HTTPBasic()

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω API
class SpamSampleCreate(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞ —Å–ø–∞–º–∞"""
    text: str = Field(..., min_length=1, max_length=4096, description="–¢–µ–∫—Å—Ç –æ–±—Ä–∞–∑—Ü–∞")
    type: str = Field(..., description="–¢–∏–ø: 'spam' –∏–ª–∏ 'ham'")
    source: str = Field(default="manual_addition", description="–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—Ä–∞–∑—Ü–∞")
    chat_id: Optional[int] = Field(None, description="ID —á–∞—Ç–∞")
    user_id: Optional[int] = Field(None, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    tags: List[str] = Field(default=[], description="–¢–µ–≥–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    class Config:
        schema_extra = {
            "example": {
                "text": "üî•üî•üî• –ó–ê–†–ê–ë–û–¢–û–ö! –î–µ—Ç–∞–ª–∏ –≤ –õ–°!",
                "type": "spam",
                "source": "admin_report",
                "tags": ["russian", "emoji", "work_from_home"]
            }
        }

class SpamSampleResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–∑—Ü–æ–º —Å–ø–∞–º–∞"""
    id: int
    text: str
    type: str
    source: str
    chat_id: Optional[int]
    user_id: Optional[int]
    language: Optional[str]
    confidence: Optional[float]
    tags: List[str]
    created_at: str
    updated_at: str

class SpamSamplesList(BaseModel):
    """–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–ø–∞–º–∞"""
    samples: List[SpamSampleResponse]
    total_count: int
    page: int
    per_page: int

class SystemStatus(BaseModel):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    status: str
    detectors: Dict[str, Any]
    database: Dict[str, Any]
    redis: Dict[str, Any]
    telegram: Dict[str, Any]
    uptime_seconds: float
    version: str


def get_dependencies(request: Request) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ app state"""
    return request.app.state.dependencies


def get_config(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return request.app.state.config


def verify_admin_credentials(
    credentials: HTTPBasicCredentials = Depends(security),
    config = Depends(get_config)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
    correct_username = "admin"  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥
    correct_password = "admin123"  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    is_correct_username = secrets.compare_digest(credentials.username, correct_username)
    is_correct_password = secrets.compare_digest(credentials.password, correct_password)
    
    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid admin credentials",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username


@router.get("/", dependencies=[Depends(verify_admin_credentials)])
async def admin_dashboard():
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "AntiSpam Bot Admin Panel",
        "version": "2.0.0",
        "endpoints": {
            "system_status": "GET /admin/status",
            "spam_samples": "GET /admin/samples",
            "create_sample": "POST /admin/samples",
            "detector_config": "GET /admin/detectors/config",
            "statistics": "GET /admin/stats"
        },
        "timestamp": time.time()
    }


@router.get("/status", response_model=SystemStatus, dependencies=[Depends(verify_admin_credentials)])
async def get_system_status(
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
        spam_detector = dependencies.get("spam_detector")
        detectors_status = {}
        if spam_detector:
            health = await spam_detector.health_check()
            detectors_status = health.get("detectors", {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        postgres_client = dependencies.get("postgres_client")
        database_status = {"status": "unknown"}
        if postgres_client:
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                async with postgres_client.acquire() as conn:
                    await conn.fetchval("SELECT 1")
                database_status = {"status": "healthy", "connected": True}
            except Exception as e:
                database_status = {"status": "error", "error": str(e)}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        redis_cache = dependencies.get("redis_cache")
        redis_status = {"status": "unknown"}
        if redis_cache:
            try:
                await redis_cache.set("health_check", "ok", ttl=60)
                result = await redis_cache.get("health_check")
                redis_status = {"status": "healthy", "connected": True}
            except Exception as e:
                redis_status = {"status": "error", "error": str(e)}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
        telegram_gateway = dependencies.get("telegram_gateway")
        telegram_status = {"status": "unknown"}
        if telegram_gateway and telegram_gateway.bot:
            try:
                me = await telegram_gateway.bot.get_me()
                telegram_status = {
                    "status": "healthy", 
                    "bot_username": me.username,
                    "bot_id": me.id
                }
            except Exception as e:
                telegram_status = {"status": "error", "error": str(e)}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        overall_status = "healthy"
        if (database_status.get("status") == "error" or 
            redis_status.get("status") == "error" or
            telegram_status.get("status") == "error"):
            overall_status = "degraded"
        
        return SystemStatus(
            status=overall_status,
            detectors=detectors_status,
            database=database_status,
            redis=redis_status,
            telegram=telegram_status,
            uptime_seconds=time.time(),  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
            version="2.0.0"
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error getting system status: {str(e)}"
        )


@router.get("/samples", response_model=SpamSamplesList, dependencies=[Depends(verify_admin_credentials)])
async def get_spam_samples(
    page: int = 1,
    per_page: int = 50,
    sample_type: Optional[str] = None,
    language: Optional[str] = None,
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–ø–∞–º–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        spam_samples_repo = dependencies.get("spam_samples_repository")
        if not spam_samples_repo:
            raise HTTPException(
                status_code=503,
                detail="Spam samples repository not available"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –ø–æ —Ç–∏–ø—É
        if sample_type:
            if sample_type not in ["spam", "ham"]:
                raise HTTPException(
                    status_code=400,
                    detail="Invalid sample_type. Must be 'spam' or 'ham'"
                )
            sample_type_enum = SampleType.SPAM if sample_type == "spam" else SampleType.HAM
            samples = await spam_samples_repo.get_samples_by_type(sample_type_enum, limit=per_page)
        elif language:
            samples = await spam_samples_repo.get_samples_by_language(language, limit=per_page)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –æ–±—Ä–∞–∑—Ü—ã
            samples = await spam_samples_repo.get_recent_samples(hours=24*30, limit=per_page)  # –ó–∞ –º–µ—Å—è—Ü
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ response –º–æ–¥–µ–ª–∏
        sample_responses = []
        for sample in samples:
            sample_responses.append(SpamSampleResponse(
                id=sample.id,
                text=sample.text,
                type=sample.type.value,
                source=sample.source.value,
                chat_id=sample.chat_id,
                user_id=sample.user_id,
                language=sample.language,
                confidence=sample.confidence,
                tags=sample.tags,
                created_at=sample.created_at.isoformat() if sample.created_at else "",
                updated_at=sample.updated_at.isoformat() if sample.updated_at else ""
            ))
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_count = await spam_samples_repo.get_sample_count()
        
        return SpamSamplesList(
            samples=sample_responses,
            total_count=total_count,
            page=page,
            per_page=per_page
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error getting spam samples: {str(e)}"
        )


@router.post("/samples", response_model=SpamSampleResponse, dependencies=[Depends(verify_admin_credentials)])
async def create_spam_sample(
    sample_data: SpamSampleCreate,
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü —Å–ø–∞–º–∞"""
    try:
        spam_samples_repo = dependencies.get("spam_samples_repository")
        if not spam_samples_repo:
            raise HTTPException(
                status_code=503,
                detail="Spam samples repository not available"
            )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞
        if sample_data.type not in ["spam", "ham"]:
            raise HTTPException(
                status_code=400,
                detail="Invalid type. Must be 'spam' or 'ham'"
            )
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
        sample_type = SampleType.SPAM if sample_data.type == "spam" else SampleType.HAM
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        try:
            source = SampleSource(sample_data.source)
        except ValueError:
            source = SampleSource.MANUAL_ADDITION
        
        spam_sample = SpamSample(
            text=sample_data.text,
            type=sample_type,
            source=source,
            chat_id=sample_data.chat_id,
            user_id=sample_data.user_id,
            tags=sample_data.tags
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
        saved_sample = await spam_samples_repo.save_sample(spam_sample)
        
        return SpamSampleResponse(
            id=saved_sample.id,
            text=saved_sample.text,
            type=saved_sample.type.value,
            source=saved_sample.source.value,
            chat_id=saved_sample.chat_id,
            user_id=saved_sample.user_id,
            language=saved_sample.language,
            confidence=saved_sample.confidence,
            tags=saved_sample.tags,
            created_at=saved_sample.created_at.isoformat() if saved_sample.created_at else "",
            updated_at=saved_sample.updated_at.isoformat() if saved_sample.updated_at else ""
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error creating spam sample: {str(e)}"
        )


@router.delete("/samples/{sample_id}", dependencies=[Depends(verify_admin_credentials)])
async def delete_spam_sample(
    sample_id: int,
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü —Å–ø–∞–º–∞"""
    try:
        spam_samples_repo = dependencies.get("spam_samples_repository")
        if not spam_samples_repo:
            raise HTTPException(
                status_code=503,
                detail="Spam samples repository not available"
            )
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–∑–µ—Ü
        success = await spam_samples_repo.delete_sample(sample_id)
        
        if not success:
            raise HTTPException(
                status_code=404,
                detail="Spam sample not found"
            )
        
        return {"message": f"Spam sample {sample_id} deleted successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error deleting spam sample: {str(e)}"
        )


@router.get("/detectors/config", dependencies=[Depends(verify_admin_credentials)])
async def get_detectors_config(
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
    try:
        spam_detector = dependencies.get("spam_detector")
        if not spam_detector:
            raise HTTPException(
                status_code=503,
                detail="Spam detector not available"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
        available_detectors = await spam_detector.get_available_detectors()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        heuristic_config = {}
        if hasattr(spam_detector, 'heuristic_detector'):
            heuristic_config = spam_detector.heuristic_detector.get_config()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RUSpam
        ruspam_info = {}
        if hasattr(spam_detector, 'ruspam_detector') and spam_detector.ruspam_detector:
            ruspam_info = {
                "is_available": spam_detector.ruspam_detector.is_available,
                "is_loaded": spam_detector.ruspam_detector.is_loaded,
                "model_name": getattr(spam_detector.ruspam_detector, 'model_name', 'unknown')
            }
        
        return {
            "available_detectors": available_detectors,
            "ensemble_config": spam_detector.config,
            "heuristic_config": heuristic_config,
            "ruspam_info": ruspam_info,
            "timestamp": time.time()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error getting detectors config: {str(e)}"
        )


@router.post("/detectors/test", dependencies=[Depends(verify_admin_credentials)])
async def test_detectors(
    test_text: str = "üî•üî•üî• –ó–ê–†–ê–ë–û–¢–û–ö! –î–µ—Ç–∞–ª–∏ –≤ –õ–°!",
    dependencies: Dict[str, Any] = Depends(get_dependencies)
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ"""
    try:
        check_message_usecase = dependencies.get("check_message_usecase")
        if not check_message_usecase:
            raise HTTPException(
                status_code=503,
                detail="Check message use case not available"
            )
        
        from ....domain.entity.message import Message
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message(
            user_id=0,
            chat_id=0,
            text=test_text
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
        result = await check_message_usecase(message)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        detector_results = []
        for dr in result.detector_results:
            detector_results.append({
                "detector_name": dr.detector_name,
                "is_spam": dr.is_spam,
                "confidence": dr.confidence,
                "details": dr.details,
                "processing_time_ms": dr.processing_time_ms
            })
        
        return {
            "test_text": test_text,
            "overall_result": {
                "is_spam": result.is_spam,
                "confidence": result.overall_confidence,
                "primary_reason": result.primary_reason.value if result.primary_reason else None,
                "processing_time_ms": result.processing_time_ms
            },
            "detector_results": detector_results,
            "recommendations": {
                "should_ban": result.should_ban,
                "should_delete": result.should_delete,
                "should_restrict": result.should_restrict,
                "should_warn": result.should_warn
            },
            "timestamp": time.time()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error testing detectors: {str(e)}"
        )
