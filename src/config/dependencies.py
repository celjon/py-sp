# src/config/dependencies.py
"""
Production-ready Dependency Injection Setup
–°–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""

import os
import asyncio
from typing import Dict, Any, Optional
from dataclasses import dataclass

# Core imports
from ..domain.service.auth.jwt_service import JWTService, create_jwt_service
from ..domain.service.rate_limit.rate_limiter import RateLimiter, create_rate_limiter
from ..domain.service.analytics.usage_analytics import UsageAnalytics, create_usage_analytics
from ..delivery.http.middleware.api_auth import ApiAuthMiddleware, create_api_auth_middleware

# Existing imports
from ..adapter.repository.api_key_repository import ApiKeyRepository
from ..adapter.repository.usage_repository import UsageRepository
from ..domain.usecase.api.manage_keys import ManageApiKeysUseCase
from ..lib.clients.redis_client import RedisClient
from ..lib.clients.postgres_client import PostgresClient


@dataclass
class ProductionServices:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö production —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # Authentication & Authorization
    jwt_service: JWTService
    rate_limiter: RateLimiter
    api_auth_middleware: Any  # Factory function
    
    # Analytics & Monitoring
    usage_analytics: UsageAnalytics
    
    # Repositories
    api_key_repo: ApiKeyRepository
    usage_repo: UsageRepository
    
    # Use Cases
    manage_api_keys_usecase: ManageApiKeysUseCase
    
    # Infrastructure
    postgres_client: PostgresClient
    redis_client: Optional[RedisClient]
    
    def health_check(self) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            return {
                "status": "healthy",
                "services": {
                    "jwt_service": self.jwt_service.health_check(),
                    "rate_limiter": self.rate_limiter.health_check(),
                    "usage_analytics": self.usage_analytics.health_check(),
                    "postgres": self.postgres_client.health_check() if hasattr(self.postgres_client, 'health_check') else {"status": "unknown"},
                    "redis": self.redis_client.health_check() if self.redis_client else {"status": "not_configured"}
                },
                "middleware_status": "configured"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }


async def setup_production_services(config: Dict[str, Any]) -> ProductionServices:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ production —Å–µ—Ä–≤–∏—Å—ã
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        ProductionServices —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    """
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # === INFRASTRUCTURE CLIENTS ===
    print("üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    # PostgreSQL Client
    postgres_client = PostgresClient(config.get("database_url"))
    await postgres_client.connect()
    print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # Redis Client (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    redis_client = None
    redis_url = config.get("redis_url")
    if redis_url:
        try:
            redis_client = RedisClient(redis_url)
            await redis_client.connect()
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("   –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Redis (fallback —Ä–µ–∂–∏–º)")
    
    # === REPOSITORIES ===
    print("üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
    
    api_key_repo = ApiKeyRepository(postgres_client)
    usage_repo = UsageRepository(postgres_client)
    
    print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # === CORE SERVICES ===
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ core —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # JWT Service
    jwt_service = create_jwt_service(config.get("api", {}))
    print("‚úÖ JWT Service –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # Rate Limiter
    rate_limiter = create_rate_limiter(
        redis_client=redis_client,
        config=config.get("rate_limiting", {})
    )
    print("‚úÖ Rate Limiter –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # Usage Analytics
    usage_analytics = create_usage_analytics(
        usage_repo=usage_repo,
        redis_client=redis_client,
        config=config.get("analytics", {})
    )
    print("‚úÖ Usage Analytics –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # === USE CASES ===
    print("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ use cases...")
    
    manage_api_keys_usecase = ManageApiKeysUseCase(
        api_key_repo=api_key_repo,
        usage_repo=usage_repo
    )
    print("‚úÖ Use cases –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # === MIDDLEWARE FACTORIES ===
    print("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware...")
    
    api_auth_middleware_factory = create_api_auth_middleware(
        jwt_service=jwt_service,
        rate_limiter=rate_limiter,
        api_key_repo=api_key_repo,
        config=config.get("middleware", {})
    )
    print("‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # === –°–û–ó–î–ê–ï–ú –ö–û–ù–¢–ï–ô–ù–ï–† –°–ï–†–í–ò–°–û–í ===
    services = ProductionServices(
        jwt_service=jwt_service,
        rate_limiter=rate_limiter,
        api_auth_middleware=api_auth_middleware_factory,
        usage_analytics=usage_analytics,
        api_key_repo=api_key_repo,
        usage_repo=usage_repo,
        manage_api_keys_usecase=manage_api_keys_usecase,
        postgres_client=postgres_client,
        redis_client=redis_client
    )
    
    # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
    health = services.health_check()
    
    if health["status"] == "healthy":
        print("‚úÖ –í—Å–µ production —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!")
        print("üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        for service_name, service_health in health["services"].items():
            status_emoji = "‚úÖ" if service_health.get("status") == "healthy" else "‚ö†Ô∏è"
            print(f"   {status_emoji} {service_name}: {service_health.get('status', 'unknown')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {health.get('error')}")
        raise RuntimeError(f"Failed to initialize production services: {health.get('error')}")
    
    return services


# === INTEGRATION WITH FASTAPI APP ===

def integrate_with_fastapi_app(app, services: ProductionServices, config: Dict[str, Any]):
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç production —Å–µ—Ä–≤–∏—Å—ã —Å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    
    Args:
        app: FastAPI application instance
        services: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ production —Å–µ—Ä–≤–∏—Å—ã
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    print("üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI...")
    
    # === MIDDLEWARE ===
    # –î–æ–±–∞–≤–ª—è–µ–º API Auth Middleware
    app.add_middleware(services.api_auth_middleware)
    print("‚úÖ API Auth Middleware –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # === DEPENDENCY INJECTION ===
    # –°–æ–∑–¥–∞–µ–º provider –¥–ª—è dependency injection
    def get_production_services():
        return services
    
    def get_jwt_service():
        return services.jwt_service
    
    def get_rate_limiter():
        return services.rate_limiter
    
    def get_usage_analytics():
        return services.usage_analytics
    
    def get_api_key_repo():
        return services.api_key_repo
    
    def get_manage_api_keys_usecase():
        return services.manage_api_keys_usecase
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ app state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ routes
    app.state.production_services = services
    app.state.get_production_services = get_production_services
    app.state.get_jwt_service = get_jwt_service
    app.state.get_rate_limiter = get_rate_limiter
    app.state.get_usage_analytics = get_usage_analytics
    app.state.get_api_key_repo = get_api_key_repo
    app.state.get_manage_api_keys_usecase = get_manage_api_keys_usecase
    
    print("‚úÖ Dependency injection –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # === STARTUP/SHUTDOWN HOOKS ===
    @app.on_event("startup")
    async def startup_event():
        print("üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        print("üìä Production services –∞–∫—Ç–∏–≤–Ω—ã")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ API –∫–ª—é—á–∞
        await create_default_api_key_if_needed(services)
    
    @app.on_event("shutdown")
    async def shutdown_event():
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if services.postgres_client:
            await services.postgres_client.disconnect()
            print("‚úÖ PostgreSQL –æ—Ç–∫–ª—é—á–µ–Ω")
        
        if services.redis_client:
            await services.redis_client.disconnect()
            print("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω")
        
        print("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    print("‚úÖ Startup/shutdown hooks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


async def create_default_api_key_if_needed(services: ProductionServices):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ API –∫–ª—é—á–∏
        existing_keys = await services.api_key_repo.search_api_keys(limit=1)
        
        if existing_keys:
            print(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(existing_keys)} API –∫–ª—é—á–µ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–ª—é—á
        from ..domain.usecase.api.manage_keys import CreateApiKeyRequest
        from ..domain.entity.api_key import ApiKeyPlan
        
        request = CreateApiKeyRequest(
            client_name="Default Development Client",
            contact_email="dev@antispam.local",
            plan=ApiKeyPlan.BASIC,
            requests_per_minute=120,
            requests_per_day=10000,
            description="Auto-created development API key",
            metadata={
                "created_by": "auto_setup",
                "environment": "development",
                "purpose": "testing"
            }
        )
        
        result = await services.manage_api_keys_usecase.create_api_key(request)
        
        print("üîë –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á:")
        print(f"   Client: {result.api_key.client_name}")
        print(f"   Plan: {result.api_key.plan.value}")
        print(f"   API Key: {result.raw_key}")
        print(f"   ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á: {e}")


# === HELPER FUNCTIONS FOR ROUTES ===

def get_dependencies_for_routes():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dependencies –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ FastAPI routes"""
    from fastapi import Depends, Request
    
    def get_services(request: Request) -> ProductionServices:
        return request.app.state.production_services
    
    def get_jwt_service(services: ProductionServices = Depends(get_services)) -> JWTService:
        return services.jwt_service
    
    def get_usage_analytics(services: ProductionServices = Depends(get_services)) -> UsageAnalytics:
        return services.usage_analytics
    
    def get_api_key_repo(services: ProductionServices = Depends(get_services)) -> ApiKeyRepository:
        return services.api_key_repo
    
    def get_manage_api_keys_usecase(services: ProductionServices = Depends(get_services)) -> ManageApiKeysUseCase:
        return services.manage_api_keys_usecase
    
    return {
        "get_services": get_services,
        "get_jwt_service": get_jwt_service,
        "get_usage_analytics": get_usage_analytics,
        "get_api_key_repo": get_api_key_repo,
        "get_manage_api_keys_usecase": get_manage_api_keys_usecase
    }


# === CONFIGURATION VALIDATION ===

def validate_production_config(config: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è production deployment
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        
    Raises:
        ValueError: –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
    """
    errors = []
    
    # === –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===
    required_fields = [
        "database_url",
        "bot_token"
    ]
    
    for field in required_fields:
        if not config.get(field):
            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {field}")
    
    # === –ü–†–û–í–ï–†–ö–ê JWT SECRET ===
    jwt_secret = config.get("api", {}).get("auth", {}).get("jwt_secret", "")
    if not jwt_secret or jwt_secret == "dev_secret_change_in_production":
        errors.append("JWT secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    
    if len(jwt_secret) < 32:
        errors.append("JWT secret –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤")
    
    # === –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
    if config.get("environment") == "production":
        # –í production –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        api_config = config.get("api", {})
        rate_limits = api_config.get("rate_limit", {})
        
        if rate_limits.get("default_requests_per_minute", 0) > 1000:
            errors.append("–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π rate limit –¥–ª—è production (>1000 RPM)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS
        http_config = config.get("http_server", {})
        if http_config.get("cors_enabled", False):
            errors.append("CORS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω –≤ production")
    
    # === –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ===
    warnings = []
    
    if not config.get("redis_url"):
        warnings.append("Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - performance –±—É–¥–µ—Ç —Å–Ω–∏–∂–µ–Ω")
    
    if not config.get("openai_api_key"):
        warnings.append("OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
    
    # === –†–ï–ó–£–õ–¨–¢–ê–¢ ===
    if errors:
        error_msg = "–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(f"  - {error}" for error in errors)
        raise ValueError(error_msg)
    
    if warnings:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for warning in warnings:
            print(f"  - {warning}")
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    return config


# === EXAMPLE USAGE ===

async def example_production_setup():
    """–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        "database_url": os.getenv("DATABASE_URL"),
        "redis_url": os.getenv("REDIS_URL"),
        "bot_token": os.getenv("BOT_TOKEN"),
        "environment": os.getenv("ENVIRONMENT", "development"),
        "api": {
            "auth": {
                "jwt_secret": os.getenv("JWT_SECRET"),
                "jwt_algorithm": "HS256",
                "access_token_expire_minutes": 30,
                "refresh_token_expire_days": 7
            },
            "rate_limit": {
                "default_requests_per_minute": 60,
                "default_requests_per_day": 5000,
                "burst_limit": 10
            }
        },
        "http_server": {
            "host": "0.0.0.0",
            "port": 8080,
            "cors_enabled": False  # Production setting
        },
        "analytics": {
            "enable_real_time": True
        },
        "middleware": {
            "protected_paths": [
                "/api/v1/detect",
                "/api/v1/detect/batch",
                "/api/v1/stats",
                "/api/v1/account"
            ]
        }
    }
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    validated_config = validate_production_config(config)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º production —Å–µ—Ä–≤–∏—Å—ã
    services = await setup_production_services(validated_config)
    
    print("üéâ Production setup –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return services, validated_config


if __name__ == "__main__":
    # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    asyncio.run(example_production_setup())