# src/config/dependencies.py
"""
Production-ready Dependency Injection Setup
–°–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""

import os
import asyncio
import logging
from typing import Dict, Any, Optional, List
from dataclasses import dataclass

# Core imports - –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ imports
from ..domain.service.auth.jwt_service import JWTService, create_jwt_service
from ..domain.service.rate_limit.rate_limiter import RateLimiter, create_rate_limiter
from ..domain.service.analytics.usage_analytics import UsageAnalytics, create_usage_analytics
from ..delivery.http.middleware.api_auth import ApiAuthMiddleware, create_api_auth_middleware

# Repositories
from ..adapter.repository.api_key_repository import ApiKeyRepository
from ..adapter.repository.usage_repository import UsageRepository
from ..adapter.repository.user_repository import UserRepository
from ..adapter.repository.message_repository import MessageRepository
from ..adapter.repository.spam_samples_repository import SpamSamplesRepository

# Use Cases
from ..domain.usecase.api.manage_keys import ManageApiKeysUseCase
from ..domain.usecase.spam_detection.check_message import CheckMessageUseCase
from ..domain.usecase.admin.ban_user import BanUserUseCase

# Infrastructure
from ..lib.clients.redis_client import RedisClient
from ..lib.clients.postgres_client import PostgresClient
from ..lib.clients.http_client import HttpClient

# Gateways
from ..adapter.gateway.cas_gateway import CASGateway
from ..adapter.gateway.openai_gateway import OpenAIGateway

# Domain Services
from ..domain.service.detector.ensemble import EnsembleDetector
from ..domain.service.cache.redis_cache import RedisCache
from ..domain.service.monitoring.prometheus_metrics import create_prometheus_metrics

# Entities
from ..domain.entity.api_key import ApiKey, ApiKeyPlan

logger = logging.getLogger(__name__)


@dataclass
class ProductionServices:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö production —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # Authentication & Authorization
    jwt_service: JWTService
    rate_limiter: RateLimiter
    api_auth_middleware: Any  # Factory function
    
    # Analytics & Monitoring
    usage_analytics: UsageAnalytics
    
    # Repositories
    api_key_repo: ApiKeyRepository
    usage_repo: UsageRepository
    user_repo: UserRepository
    message_repo: MessageRepository
    spam_samples_repo: SpamSamplesRepository
    
    # Use Cases
    manage_api_keys_usecase: ManageApiKeysUseCase
    check_message_usecase: CheckMessageUseCase
    ban_user_usecase: BanUserUseCase
    
    # Domain Services
    ensemble_detector: EnsembleDetector
    redis_cache: Optional[RedisCache]
    
    # Gateways
    cas_gateway: Optional[CASGateway]
    openai_gateway: Optional[OpenAIGateway]
    
    # Infrastructure
    postgres_client: PostgresClient
    redis_client: Optional[RedisClient]
    http_client: HttpClient
    
    def health_check(self) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_info = {
                "status": "healthy",
                "services": {},
                "timestamp": time.time(),
                "version": "2.0.0"
            }
            
            # JWT Service
            try:
                health_info["services"]["jwt_service"] = self.jwt_service.health_check()
            except Exception as e:
                health_info["services"]["jwt_service"] = {"status": "error", "error": str(e)}
            
            # Rate Limiter
            try:
                health_info["services"]["rate_limiter"] = self.rate_limiter.health_check()
            except Exception as e:
                health_info["services"]["rate_limiter"] = {"status": "error", "error": str(e)}
            
            # Usage Analytics
            try:
                health_info["services"]["usage_analytics"] = self.usage_analytics.health_check()
            except Exception as e:
                health_info["services"]["usage_analytics"] = {"status": "error", "error": str(e)}
            
            # Database
            try:
                if hasattr(self.postgres_client, 'health_check'):
                    health_info["services"]["postgres"] = self.postgres_client.health_check()
                else:
                    health_info["services"]["postgres"] = {"status": "unknown", "method": "not_implemented"}
            except Exception as e:
                health_info["services"]["postgres"] = {"status": "error", "error": str(e)}
            
            # Redis
            try:
                if self.redis_client and hasattr(self.redis_client, 'health_check'):
                    health_info["services"]["redis"] = self.redis_client.health_check()
                else:
                    health_info["services"]["redis"] = {"status": "not_configured"}
            except Exception as e:
                health_info["services"]["redis"] = {"status": "error", "error": str(e)}
            
            # Ensemble Detector
            try:
                health_info["services"]["ensemble_detector"] = await self.ensemble_detector.health_check()
            except Exception as e:
                health_info["services"]["ensemble_detector"] = {"status": "error", "error": str(e)}
            
            # Gateways
            try:
                if self.cas_gateway:
                    health_info["services"]["cas_gateway"] = await self.cas_gateway.health_check()
                else:
                    health_info["services"]["cas_gateway"] = {"status": "not_configured"}
            except Exception as e:
                health_info["services"]["cas_gateway"] = {"status": "error", "error": str(e)}
            
            try:
                if self.openai_gateway:
                    health_info["services"]["openai_gateway"] = await self.openai_gateway.health_check()
                else:
                    health_info["services"]["openai_gateway"] = {"status": "not_configured"}
            except Exception as e:
                health_info["services"]["openai_gateway"] = {"status": "error", "error": str(e)}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            error_count = sum(1 for s in health_info["services"].values() 
                            if isinstance(s, dict) and s.get("status") == "error")
            
            if error_count == 0:
                health_info["status"] = "healthy"
            elif error_count <= 2:  # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
                health_info["status"] = "degraded"
            else:
                health_info["status"] = "unhealthy"
            
            return health_info
            
        except Exception as e:
            logger.error(f"Health check critical error: {e}")
            return {
                "status": "error",
                "timestamp": time.time(),
                "error": str(e)
            }


async def setup_production_services(config: Dict[str, Any]) -> ProductionServices:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ production —Å–µ—Ä–≤–∏—Å—ã —Å –ø–æ–ª–Ω–æ–π error handling
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        ProductionServices —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        
    Raises:
        RuntimeError: –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    """
    logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    critical_errors = []
    warnings = []
    
    # === INFRASTRUCTURE CLIENTS ===
    logger.info("üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    # PostgreSQL Client (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô)
    postgres_client = None
    try:
        database_url = config.get("database_url") or config.get("database", {}).get("url")
        if not database_url:
            raise ValueError("DATABASE_URL is required")
        
        postgres_client = PostgresClient(database_url)
        await postgres_client.connect()
        logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        critical_errors.append(f"PostgreSQL connection failed: {e}")
        logger.error(f"‚ùå PostgreSQL –æ—à–∏–±–∫–∞: {e}")
    
    # Redis Client (–ù–ï –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)
    redis_client = None
    try:
        redis_url = config.get("redis_url") or config.get("redis", {}).get("url")
        if redis_url:
            redis_client = RedisClient(redis_url)
            await redis_client.connect()
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            warnings.append("Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ fallback —Ä–µ–∂–∏–º–µ")
            logger.warning("‚ö†Ô∏è Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        warnings.append(f"Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        logger.warning(f"‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞: {e}")
    
    # HTTP Client
    http_client = HttpClient(
        timeout=config.get("http_client", {}).get("timeout", 30),
        max_retries=config.get("http_client", {}).get("max_retries", 3)
    )
    logger.info("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if critical_errors:
        error_msg = "; ".join(critical_errors)
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {error_msg}")
        raise RuntimeError(f"Critical services failed: {error_msg}")
    
    # === REPOSITORIES ===
    logger.info("üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
    
    try:
        api_key_repo = ApiKeyRepository(postgres_client)
        usage_repo = UsageRepository(postgres_client)
        user_repo = UserRepository(postgres_client)
        message_repo = MessageRepository(postgres_client)
        spam_samples_repo = SpamSamplesRepository(postgres_client)
        
        logger.info("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        raise RuntimeError(f"Repository initialization failed: {e}")
    
    # === CACHE LAYER ===
    redis_cache = None
    if redis_client:
        try:
            redis_cache = RedisCache(redis_client)
            logger.info("‚úÖ Redis –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            warnings.append(f"Redis cache initialization failed: {e}")
            logger.warning(f"‚ö†Ô∏è Redis cache –æ—à–∏–±–∫–∞: {e}")
    
    # === GATEWAYS ===
    logger.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö gateways...")
    
    # CAS Gateway
    cas_gateway = None
    try:
        cas_gateway = CASGateway(
            http_client=http_client,
            cache=redis_cache,
            config=config.get("external_apis", {}).get("cas", {})
        )
        logger.info("‚úÖ CAS Gateway –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        warnings.append(f"CAS Gateway initialization failed: {e}")
        logger.warning(f"‚ö†Ô∏è CAS Gateway –æ—à–∏–±–∫–∞: {e}")
    
    # OpenAI Gateway
    openai_gateway = None
    try:
        openai_config = config.get("openai", {})
        if openai_config.get("api_key") and openai_config.get("enabled", True):
            openai_gateway = OpenAIGateway(
                http_client=http_client,
                config=openai_config
            )
            logger.info("‚úÖ OpenAI Gateway –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            warnings.append("OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Å–ø–∞–º –¥–µ—Ç–µ–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM –∞–Ω–∞–ª–∏–∑–∞")
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        warnings.append(f"OpenAI Gateway initialization failed: {e}")
        logger.warning(f"‚ö†Ô∏è OpenAI Gateway –æ—à–∏–±–∫–∞: {e}")
    
    # === CORE SERVICES ===
    logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ core —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # JWT Service
    try:
        jwt_service = create_jwt_service(config.get("api", {}).get("auth", {}))
        logger.info("‚úÖ JWT Service –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        raise RuntimeError(f"JWT Service initialization failed: {e}")
    
    # Rate Limiter
    try:
        rate_limiter = create_rate_limiter(
            redis_client=redis_client,
            config=config.get("api", {}).get("rate_limit", {})
        )
        logger.info("‚úÖ Rate Limiter –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        raise RuntimeError(f"Rate Limiter initialization failed: {e}")
    
    # Usage Analytics
    try:
        usage_analytics = create_usage_analytics(
            usage_repo=usage_repo,
            redis_client=redis_client,
            config=config.get("analytics", {})
        )
        logger.info("‚úÖ Usage Analytics –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        warnings.append(f"Usage Analytics initialization failed: {e}")
        logger.warning(f"‚ö†Ô∏è Usage Analytics –æ—à–∏–±–∫–∞: {e}")
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π analytics –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        usage_analytics = None
    
    # === SPAM DETECTION SETUP ===
    logger.info("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ spam detection...")
    
    # Ensemble Detector
    try:
        detector_config = config.get("spam_detection", {}).get("ensemble", {})
        ensemble_detector = EnsembleDetector(detector_config)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
        if cas_gateway:
            ensemble_detector.add_cas_detector(cas_gateway)
        
        if openai_gateway:
            ensemble_detector.add_openai_detector(openai_gateway)
        
        # RUSpam –¥–µ—Ç–µ–∫—Ç–æ—Ä
        ensemble_detector.add_ruspam_detector()
        
        logger.info("‚úÖ Ensemble Detector –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        raise RuntimeError(f"Ensemble Detector initialization failed: {e}")
    
    # === USE CASES ===
    logger.info("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ use cases...")
    
    try:
        manage_api_keys_usecase = ManageApiKeysUseCase(
            api_key_repo=api_key_repo,
            usage_repo=usage_repo
        )
        
        check_message_usecase = CheckMessageUseCase(
            detector=ensemble_detector,
            message_repo=message_repo,
            user_repo=user_repo,
            cache=redis_cache
        )
        
        ban_user_usecase = BanUserUseCase(
            user_repo=user_repo,
            message_repo=message_repo
        )
        
        logger.info("‚úÖ Use cases –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        raise RuntimeError(f"Use cases initialization failed: {e}")
    
    # === MIDDLEWARE FACTORIES ===
    logger.info("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware...")
    
    try:
        api_auth_middleware_factory = create_api_auth_middleware(
            jwt_service=jwt_service,
            rate_limiter=rate_limiter,
            api_key_repo=api_key_repo,
            config=config.get("middleware", {})
        )
        logger.info("‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        raise RuntimeError(f"Middleware initialization failed: {e}")
    
    # === –°–û–ó–î–ê–ï–ú –ö–û–ù–¢–ï–ô–ù–ï–† –°–ï–†–í–ò–°–û–í ===
    try:
        services = ProductionServices(
            # Authentication & Authorization
            jwt_service=jwt_service,
            rate_limiter=rate_limiter,
            api_auth_middleware=api_auth_middleware_factory,
            
            # Analytics & Monitoring  
            usage_analytics=usage_analytics,
            
            # Repositories
            api_key_repo=api_key_repo,
            usage_repo=usage_repo,
            user_repo=user_repo,
            message_repo=message_repo,
            spam_samples_repo=spam_samples_repo,
            
            # Use Cases
            manage_api_keys_usecase=manage_api_keys_usecase,
            check_message_usecase=check_message_usecase,
            ban_user_usecase=ban_user_usecase,
            
            # Domain Services
            ensemble_detector=ensemble_detector,
            redis_cache=redis_cache,
            
            # Gateways
            cas_gateway=cas_gateway,
            openai_gateway=openai_gateway,
            
            # Infrastructure
            postgres_client=postgres_client,
            redis_client=redis_client,
            http_client=http_client
        )
        
        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        raise RuntimeError(f"Services container creation failed: {e}")
    
    # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        health = services.health_check()
        
        if health["status"] == "healthy":
            logger.info("‚úÖ –í—Å–µ production —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!")
            logger.info("üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
            for service_name, service_health in health["services"].items():
                status_emoji = "‚úÖ" if service_health.get("status") == "healthy" else "‚ö†Ô∏è"
                logger.info(f"   {status_emoji} {service_name}: {service_health.get('status', 'unknown')}")
        elif health["status"] == "degraded":
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            logger.warning("üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
            for service_name, service_health in health["services"].items():
                if service_health.get("status") != "healthy":
                    logger.warning(f"   ‚ö†Ô∏è {service_name}: {service_health.get('status')} - {service_health.get('error', '')}")
        else:
            error_msg = f"System health check failed: {health.get('error')}"
            logger.error(f"‚ùå {error_msg}")
            raise RuntimeError(error_msg)
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        raise RuntimeError(f"Health check failed: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if warnings:
        logger.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
        for warning in warnings:
            logger.warning(f"  - {warning}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try:
        await create_default_api_key_if_needed(services)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á: {e}")
    
    logger.info("üéâ Production services setup –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return services


# === INTEGRATION WITH FASTAPI APP ===

def integrate_with_fastapi_app(app, services: ProductionServices, config: Dict[str, Any]):
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç production —Å–µ—Ä–≤–∏—Å—ã —Å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    
    Args:
        app: FastAPI application instance
        services: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ production —Å–µ—Ä–≤–∏—Å—ã
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    logger.info("üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI...")
    
    # === MIDDLEWARE ===
    # –î–æ–±–∞–≤–ª—è–µ–º API Auth Middleware
    try:
        # –í–ê–ñ–ù–û: middleware –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        middleware_instance = services.api_auth_middleware(app)
        logger.info("‚úÖ API Auth Middleware –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è middleware: {e}")
        raise RuntimeError(f"Middleware integration failed: {e}")
    
    # === DEPENDENCY INJECTION ===
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ app state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ routes
    app.state.production_services = services
    
    # –°–æ–∑–¥–∞–µ–º provider functions
    app.state.get_production_services = lambda: services
    app.state.get_jwt_service = lambda: services.jwt_service
    app.state.get_rate_limiter = lambda: services.rate_limiter
    app.state.get_usage_analytics = lambda: services.usage_analytics
    app.state.get_api_key_repo = lambda: services.api_key_repo
    app.state.get_manage_api_keys_usecase = lambda: services.manage_api_keys_usecase
    app.state.get_check_message_usecase = lambda: services.check_message_usecase
    app.state.get_ensemble_detector = lambda: services.ensemble_detector
    
    logger.info("‚úÖ Dependency injection –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # === STARTUP/SHUTDOWN HOOKS ===
    @app.on_event("startup")
    async def startup_event():
        logger.info("üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        logger.info("üìä Production services –∞–∫—Ç–∏–≤–Ω—ã")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        health = services.health_check()
        if health["status"] not in ["healthy", "degraded"]:
            logger.error(f"‚ùå System –Ω–µ –≥–æ—Ç–æ–≤–∞: {health}")
            raise RuntimeError("System health check failed on startup")
    
    @app.on_event("shutdown")
    async def shutdown_event():
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã FastAPI...")
        
        # Graceful shutdown —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ main shutdown_application
        logger.info("‚úÖ FastAPI shutdown hooks –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    
    logger.info("‚úÖ FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# === HELPER FUNCTIONS FOR ROUTES ===

def get_dependencies_for_routes():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dependencies –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ FastAPI routes"""
    from fastapi import Depends, Request
    
    def get_services(request: Request) -> ProductionServices:
        """–ü–æ–ª—É—á–∏—Ç—å production services –∏–∑ request"""
        if not hasattr(request.app.state, 'production_services'):
            raise HTTPException(
                status_code=500, 
                detail="Production services not initialized"
            )
        return request.app.state.production_services
    
    def get_jwt_service(services: ProductionServices = Depends(get_services)) -> JWTService:
        return services.jwt_service
    
    def get_usage_analytics(services: ProductionServices = Depends(get_services)) -> UsageAnalytics:
        if not services.usage_analytics:
            raise HTTPException(
                status_code=503,
                detail="Usage analytics service not available"
            )
        return services.usage_analytics
    
    def get_api_key_repo(services: ProductionServices = Depends(get_services)) -> ApiKeyRepository:
        return services.api_key_repo
    
    def get_manage_api_keys_usecase(services: ProductionServices = Depends(get_services)) -> ManageApiKeysUseCase:
        return services.manage_api_keys_usecase
    
    def get_check_message_usecase(services: ProductionServices = Depends(get_services)) -> CheckMessageUseCase:
        return services.check_message_usecase
    
    def get_ensemble_detector(services: ProductionServices = Depends(get_services)) -> EnsembleDetector:
        return services.ensemble_detector
    
    return {
        "get_services": get_services,
        "get_jwt_service": get_jwt_service,
        "get_usage_analytics": get_usage_analytics,
        "get_api_key_repo": get_api_key_repo,
        "get_manage_api_keys_usecase": get_manage_api_keys_usecase,
        "get_check_message_usecase": get_check_message_usecase,
        "get_ensemble_detector": get_ensemble_detector
    }


# === CONFIGURATION VALIDATION ===

def validate_production_config(config: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è production deployment
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        
    Raises:
        ValueError: –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è production
    """
    logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    errors = []
    warnings = []
    
    # === –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===
    required_keys = [
        "database_url",
        "bot_token"
    ]
    
    for key in required_keys:
        value = config.get(key)
        if not value:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
            if key == "database_url":
                value = config.get("database", {}).get("url")
            elif key == "bot_token":
                value = config.get("telegram", {}).get("token")
                
            if not value:
                errors.append(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä '{key}' –Ω–µ –∑–∞–¥–∞–Ω")
    
    # === JWT –ù–ê–°–¢–†–û–ô–ö–ò ===
    jwt_config = config.get("api", {}).get("auth", {})
    jwt_secret = jwt_config.get("jwt_secret")
    
    if not jwt_secret:
        errors.append("JWT_SECRET –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è production")
    elif len(jwt_secret) < 32:
        errors.append("JWT_SECRET –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞")
    
    # === SECURITY VALIDATION ===
    environment = config.get("environment", os.getenv("ENVIRONMENT", "development"))
    
    if environment == "production":
        # Production-specific validations
        
        # HTTPS –ø—Ä–æ–≤–µ—Ä–∫–∞
        http_config = config.get("http_server", {})
        if not http_config.get("ssl_enabled", False):
            warnings.append("HTTPS –Ω–µ –≤–∫–ª—é—á–µ–Ω - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production")
        
        # CORS –ø—Ä–æ–≤–µ—Ä–∫–∞
        if http_config.get("cors_enabled", True):
            warnings.append("CORS –≤–∫–ª—é—á–µ–Ω - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è production")
        
        # Debug —Ä–µ–∂–∏–º
        if config.get("debug", False):
            warnings.append("Debug —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –≤ production")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π
        db_url = config.get("database_url", "")
        if "localhost" in db_url or "password" in db_url.lower():
            warnings.append("–í–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å –ë–î")
    
    # === PERFORMANCE VALIDATION ===
    
    # Rate limiting
    rate_limit_config = config.get("api", {}).get("rate_limit", {})
    default_rpm = rate_limit_config.get("default_requests_per_minute", 60)
    
    if default_rpm > 1000:
        warnings.append(f"–í—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({default_rpm}/min) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    elif default_rpm < 10:
        warnings.append(f"–ù–∏–∑–∫–∏–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({default_rpm}/min) - –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # Pool sizes
    db_pool_size = config.get("database", {}).get("pool_size", 10)
    if db_pool_size < 5:
        warnings.append("–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä connection pool - –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    elif db_pool_size > 50:
        warnings.append("–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä connection pool - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤")
    
    # === SPAM DETECTION VALIDATION ===
    
    detector_config = config.get("spam_detection", {})
    if not detector_config:
        warnings.append("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è spam detection –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    ensemble_config = detector_config.get("ensemble", {})
    spam_threshold = ensemble_config.get("spam_threshold", 0.6)
    
    if spam_threshold < 0.3:
        warnings.append("–ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ —Å–ø–∞–º–∞ - –º–Ω–æ–≥–æ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π")
    elif spam_threshold > 0.9:
        warnings.append("–í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ —Å–ø–∞–º–∞ - —Å–ø–∞–º –º–æ–∂–µ—Ç –ø—Ä–æ—Å–∫–∞–∫–∏–≤–∞—Ç—å")
    
    # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
    
    if errors:
        error_msg = "; ".join(errors)
        logger.error(f"‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {error_msg}")
        raise ValueError(f"Configuration validation failed: {error_msg}")
    
    if warnings:
        logger.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for warning in warnings:
            logger.warning(f"  - {warning}")
    
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è production")
    return config


async def create_default_api_key_if_needed(services: ProductionServices):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á
        existing_keys = await services.api_key_repo.list_keys(limit=1)
        
        if not existing_keys:
            logger.info("üîë –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ API –∫–ª—é—á–∞...")
            
            # –°–æ–∑–¥–∞–µ–º API –∫–ª—é—á
            api_key = ApiKey.create_new(
                name="default-production-key",
                plan=ApiKeyPlan.BASIC,
                description="Auto-generated default API key for production"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
            await services.api_key_repo.create(api_key)
            
            logger.info(f"‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω: {api_key.key[:8]}...")
            logger.info("üîê –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!")
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π API –∫–ª—é—á: {e}")


# === EXAMPLE USAGE & TESTING ===

async def example_production_setup():
    """–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        "database_url": os.getenv("DATABASE_URL", "postgresql://antispam_user:StrongPassword123!@localhost:5432/antispam_bot"),
        "redis_url": os.getenv("REDIS_URL", "redis://localhost:6379/0"),
        "bot_token": os.getenv("BOT_TOKEN"),
        "environment": os.getenv("ENVIRONMENT", "production"),
        "api": {
            "auth": {
                "jwt_secret": os.getenv("JWT_SECRET", "super-secret-jwt-key-for-production-min-32-chars"),
                "jwt_algorithm": "HS256",
                "access_token_expire_minutes": 30,
                "refresh_token_expire_days": 7
            },
            "rate_limit": {
                "default_requests_per_minute": 60,
                "default_requests_per_day": 5000,
                "burst_limit": 10
            }
        },
        "http_server": {
            "host": "0.0.0.0",
            "port": 8080,
            "cors_enabled": False,  # Production setting
            "ssl_enabled": True
        },
        "analytics": {
            "enable_real_time": True
        },
        "middleware": {
            "protected_paths": [
                "/api/v1/detect",
                "/api/v1/detect/batch",
                "/api/v1/stats",
                "/api/v1/account"
            ]
        },
        "spam_detection": {
            "ensemble": {
                "spam_threshold": 0.6,
                "high_confidence_threshold": 0.8,
                "auto_ban_threshold": 0.85,
                "max_processing_time": 2.0,
                "enable_early_exit": True
            }
        },
        "openai": {
            "api_key": os.getenv("OPENAI_API_KEY"),
            "model": "gpt-4",
            "enabled": True
        },
        "logging": {
            "level": "INFO",
            "structured": True,
            "file": "logs/antispam-bot.log"
        }
    }
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        validated_config = validate_production_config(config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º production —Å–µ—Ä–≤–∏—Å—ã
        services = await setup_production_services(validated_config)
        
        logger.info("üéâ Production setup –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return services, validated_config
        
    except Exception as e:
        logger.error(f"‚ùå Production setup failed: {e}")
        raise


if __name__ == "__main__":
    # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    asyncio.run(example_production_setup())
