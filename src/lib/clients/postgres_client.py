# src/lib/clients/postgres_client.py
"""
Production-Ready PostgreSQL Client
–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å connection pooling –∏ monitoring
"""

import asyncio
import asyncpg
import logging
import time
from typing import Optional, Dict, Any, List, Union
from contextlib import asynccontextmanager
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class ConnectionPoolStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ connection pool"""
    size: int
    used: int
    free: int
    min_size: int
    max_size: int
    total_connections_created: int
    total_queries_executed: int
    
    @property
    def utilization_ratio(self) -> float:
        """–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É–ª–∞"""
        return self.used / self.size if self.size > 0 else 0.0


class PostgresClient:
    """
    Production-ready –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
    
    Features:
    - Connection pooling —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º management
    - Health checking –∏ recovery
    - Query performance monitoring
    - Comprehensive error handling
    - Graceful degradation
    - Connection leak prevention
    """
    
    def __init__(
        self, 
        database_url: str, 
        min_size: int = 10, 
        max_size: int = 20,
        command_timeout: int = 60,
        query_timeout: int = 30,
        server_settings: Dict[str, str] = None
    ):
        """
        Args:
            database_url: URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            min_size: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            command_timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥ (—Å–µ–∫—É–Ω–¥—ã)
            query_timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)
            server_settings: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.database_url = database_url
        self.min_size = min_size
        self.max_size = max_size
        self.command_timeout = command_timeout
        self.query_timeout = query_timeout
        self.server_settings = server_settings or {
            "application_name": "antispam-api",
            "jit": "off",  # –û—Ç–∫–ª—é—á–∞–µ–º JIT –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            "shared_preload_libraries": "pg_stat_statements"
        }
        
        self.pool: Optional[asyncpg.Pool] = None
        
        # Performance metrics
        self._total_queries = 0
        self._total_query_time = 0.0
        self._failed_queries = 0
        self._connections_created = 0
        self._connection_errors = 0
        
        logger.info(f"üêò PostgresClient —Å–æ–∑–¥–∞–Ω: pool_size={min_size}-{max_size}, timeout={command_timeout}s")
    
    async def connect(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.pool is not None:
            logger.warning("PostgreSQL pool —É–∂–µ —Å–æ–∑–¥–∞–Ω")
            return
        
        try:
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
            
            self.pool = await asyncpg.create_pool(
                self.database_url,
                min_size=self.min_size,
                max_size=self.max_size,
                command_timeout=self.command_timeout,
                server_settings=self.server_settings,
                # Connection lifecycle hooks
                init=self._connection_init_hook,
                setup=self._connection_setup_hook
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            async with self.pool.acquire() as conn:
                version = await conn.fetchval("SELECT version()")
                logger.info(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {version[:50]}...")
            
            logger.info(f"‚úÖ Connection pool —Å–æ–∑–¥–∞–Ω: {self.min_size}-{self.max_size} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise RuntimeError(f"Failed to connect to PostgreSQL: {e}")
    
    async def disconnect(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.pool is not None:
            try:
                logger.info("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
                await self.pool.close()
                self.pool = None
                logger.info("‚úÖ PostgreSQL –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è PostgreSQL: {e}")
    
    async def _connection_init_hook(self, conn):
        """Hook –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self._connections_created += 1
        logger.debug(f"üîó –ù–æ–≤–æ–µ PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ #{self._connections_created}")
    
    async def _connection_setup_hook(self, conn):
        """Hook –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∏–ø—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # await conn.set_type_codec('json', encoder=json.dumps, decoder=json.loads, schema='pg_catalog')
            pass
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Connection setup warning: {e}")
    
    @asynccontextmanager
    async def acquire(self):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
        
        Usage:
            async with postgres_client.acquire() as conn:
                result = await conn.fetchrow("SELECT * FROM users WHERE id = $1", user_id)
        """
        if self.pool is None:
            await self.connect()
        
        start_time = time.time()
        connection = None
        
        try:
            connection = await asyncio.wait_for(
                self.pool.acquire(),
                timeout=self.query_timeout
            )
            
            yield connection
            
        except asyncio.TimeoutError:
            self._connection_errors += 1
            logger.error("‚è∞ Timeout –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            raise RuntimeError("Database connection timeout")
            
        except Exception as e:
            self._connection_errors += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise
            
        finally:
            if connection:
                try:
                    await self.pool.release(connection)
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            acquisition_time = time.time() - start_time
            if acquisition_time > 1.0:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ > 1 —Å–µ–∫—É–Ω–¥—ã
                logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {acquisition_time:.2f}s")
    
    async def execute(self, query: str, *args, timeout: float = None) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        Args:
            query: SQL –∑–∞–ø—Ä–æ—Å
            *args: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        """
        start_time = time.time()
        self._total_queries += 1
        
        try:
            async with self.acquire() as conn:
                result = await asyncio.wait_for(
                    conn.execute(query, *args),
                    timeout=timeout or self.query_timeout
                )
                
                query_time = time.time() - start_time
                self._total_query_time += query_time
                
                if query_time > 1.0:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π execute: {query_time:.2f}s - {query[:100]}")
                
                return result
                
        except Exception as e:
            self._failed_queries += 1
            query_time = time.time() - start_time
            logger.error(f"‚ùå Execute failed ({query_time:.2f}s): {query[:100]} - {e}")
            raise
    
    async def fetchrow(self, query: str, *args, timeout: float = None) -> Optional[asyncpg.Record]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        
        Args:
            query: SQL –∑–∞–ø—Ä–æ—Å
            *args: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –ó–∞–ø–∏—Å—å –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        start_time = time.time()
        self._total_queries += 1
        
        try:
            async with self.acquire() as conn:
                result = await asyncio.wait_for(
                    conn.fetchrow(query, *args),
                    timeout=timeout or self.query_timeout
                )
                
                query_time = time.time() - start_time
                self._total_query_time += query_time
                
                if query_time > 0.5:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π fetchrow: {query_time:.2f}s - {query[:100]}")
                
                return result
                
        except Exception as e:
            self._failed_queries += 1
            query_time = time.time() - start_time
            logger.error(f"‚ùå Fetchrow failed ({query_time:.2f}s): {query[:100]} - {e}")
            raise
    
    async def fetch(self, query: str, *args, timeout: float = None) -> List[asyncpg.Record]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        
        Args:
            query: SQL –∑–∞–ø—Ä–æ—Å
            *args: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        """
        start_time = time.time()
        self._total_queries += 1
        
        try:
            async with self.acquire() as conn:
                result = await asyncio.wait_for(
                    conn.fetch(query, *args),
                    timeout=timeout or self.query_timeout
                )
                
                query_time = time.time() - start_time
                self._total_query_time += query_time
                
                if query_time > 1.0 or len(result) > 1000:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å
                    logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π/–±–æ–ª—å—à–æ–π fetch: {query_time:.2f}s, {len(result)} —Å—Ç—Ä–æ–∫ - {query[:100]}")
                
                return result
                
        except Exception as e:
            self._failed_queries += 1
            query_time = time.time() - start_time
            logger.error(f"‚ùå Fetch failed ({query_time:.2f}s): {query[:100]} - {e}")
            raise
    
    async def fetchval(self, query: str, *args, timeout: float = None) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        Args:
            query: SQL –∑–∞–ø—Ä–æ—Å
            *args: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        """
        start_time = time.time()
        self._total_queries += 1
        
        try:
            async with self.acquire() as conn:
                result = await asyncio.wait_for(
                    conn.fetchval(query, *args),
                    timeout=timeout or self.query_timeout
                )
                
                query_time = time.time() - start_time
                self._total_query_time += query_time
                
                return result
                
        except Exception as e:
            self._failed_queries += 1
            query_time = time.time() - start_time
            logger.error(f"‚ùå Fetchval failed ({query_time:.2f}s): {query[:100]} - {e}")
            raise
    
    async def execute_many(self, query: str, args_list: List[tuple], timeout: float = None) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            query: SQL –∑–∞–ø—Ä–æ—Å
            args_list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        """
        start_time = time.time()
        self._total_queries += len(args_list)
        
        try:
            async with self.acquire() as conn:
                await asyncio.wait_for(
                    conn.executemany(query, args_list),
                    timeout=timeout or (self.query_timeout * 2)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è batch
                )
                
                query_time = time.time() - start_time
                self._total_query_time += query_time
                
                if query_time > 2.0:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π batch
                    logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π executemany: {query_time:.2f}s, {len(args_list)} –æ–ø–µ—Ä–∞—Ü–∏–π")
                
        except Exception as e:
            self._failed_queries += len(args_list)
            query_time = time.time() - start_time
            logger.error(f"‚ùå ExecuteMany failed ({query_time:.2f}s): {len(args_list)} ops - {e}")
            raise
    
    @asynccontextmanager
    async def transaction(self):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        Usage:
            async with postgres_client.transaction() as tx:
                await tx.execute("INSERT INTO users ...")
                await tx.execute("UPDATE stats ...")
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π COMMIT –∏–ª–∏ ROLLBACK –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        async with self.acquire() as conn:
            async with conn.transaction():
                yield conn
    
    async def execute_in_transaction(self, queries: List[tuple]) -> List[Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        Args:
            queries: –°–ø–∏—Å–æ–∫ (query, args) –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        results = []
        
        try:
            async with self.transaction() as tx:
                for query, args in queries:
                    if query.strip().upper().startswith('SELECT'):
                        result = await tx.fetch(query, *args)
                    else:
                        result = await tx.execute(query, *args)
                    results.append(result)
                
            logger.debug(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è failed: {e}")
            raise
    
    def get_pool_stats(self) -> ConnectionPoolStats:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É connection pool"""
        if not self.pool:
            return ConnectionPoolStats(0, 0, 0, 0, 0, 0, 0)
        
        try:
            size = self.pool.get_size()
            used = size - self.pool.get_idle_size()
            free = self.pool.get_idle_size()
            
            return ConnectionPoolStats(
                size=size,
                used=used,
                free=free,
                min_size=self.min_size,
                max_size=self.max_size,
                total_connections_created=self._connections_created,
                total_queries_executed=self._total_queries
            )
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞: {e}")
            return ConnectionPoolStats(0, 0, 0, 0, 0, 0, 0)
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        avg_query_time = (
            self._total_query_time / self._total_queries 
            if self._total_queries > 0 else 0
        )
        
        error_rate = (
            self._failed_queries / self._total_queries 
            if self._total_queries > 0 else 0
        )
        
        connection_error_rate = (
            self._connection_errors / self._connections_created
            if self._connections_created > 0 else 0
        )
        
        return {
            "total_queries": self._total_queries,
            "failed_queries": self._failed_queries,
            "total_query_time_seconds": self._total_query_time,
            "average_query_time_ms": avg_query_time * 1000,
            "error_rate": error_rate,
            "connections_created": self._connections_created,
            "connection_errors": self._connection_errors,
            "connection_error_rate": connection_error_rate,
            "pool_stats": self.get_pool_stats().__dict__
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """
        Comprehensive health check –¥–ª—è PostgreSQL
        
        Returns:
            –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        health_info = {
            "status": "unknown",
            "timestamp": time.time(),
            "database": "postgresql"
        }
        
        try:
            if not self.pool:
                health_info.update({
                    "status": "disconnected",
                    "error": "Connection pool not initialized"
                })
                return health_info
            
            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            start_time = time.time()
            
            async with self.acquire() as conn:
                # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
                await conn.fetchval("SELECT 1")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
                version = await conn.fetchval("SELECT version()")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                can_create_table = True
                try:
                    await conn.fetchval("SELECT has_table_privilege(current_user, 'users', 'INSERT')")
                except:
                    can_create_table = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                active_connections = await conn.fetchval(
                    "SELECT count(*) FROM pg_stat_activity WHERE datname = current_database()"
                )
                
            response_time_ms = (time.time() - start_time) * 1000
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞
            pool_stats = self.get_pool_stats()
            
            health_info.update({
                "status": "healthy",
                "response_time_ms": response_time_ms,
                "database_info": {
                    "version": version.split(',')[0] if version else "unknown",
                    "active_connections": active_connections,
                    "can_create_table": can_create_table
                },
                "pool_info": {
                    "size": pool_stats.size,
                    "used": pool_stats.used,
                    "free": pool_stats.free,
                    "utilization": round(pool_stats.utilization_ratio * 100, 2)
                },
                "performance": self.get_performance_stats()
            })
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            warnings = []
            if pool_stats.utilization_ratio > 0.8:
                warnings.append("High pool utilization (>80%)")
            if response_time_ms > 100:
                warnings.append(f"Slow response time ({response_time_ms:.1f}ms)")
            if self.get_performance_stats()["error_rate"] > 0.1:
                warnings.append("High error rate (>10%)")
            
            if warnings:
                health_info["warnings"] = warnings
                health_info["status"] = "degraded"
            
        except Exception as e:
            logger.error(f"‚ùå PostgreSQL health check failed: {e}")
            health_info.update({
                "status": "error",
                "error": str(e),
                "performance": self.get_performance_stats()
            })
        
        return health_info
    
    async def cleanup_idle_connections(self) -> int:
        """
        –û—á–∏—â–∞–µ—Ç idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (maintenance task)
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        """
        if not self.pool:
            return 0
        
        try:
            initial_size = self.pool.get_size()
            
            # –í asyncpg –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ cleanup, –Ω–æ –º–æ–∂–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—É–ª
            # –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ connection_max_lifetime –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—É–ª–∞
            
            logger.info(f"üßπ PostgreSQL cleanup: –ø—É–ª —Ä–∞–∑–º–µ—Ä {initial_size}")
            return 0  # Placeholder
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Cleanup error: {e}")
            return 0
    
    @property
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return self.pool is not None and not self.pool._closed
    
    def reset_stats(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self._total_queries = 0
        self._total_query_time = 0.0
        self._failed_queries = 0
        self._connections_created = 0
        self._connection_errors = 0
        logger.info("üìä PostgreSQL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
