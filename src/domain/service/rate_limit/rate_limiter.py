# src/domain/service/rate_limit/rate_limiter.py
"""
Production-ready Rate Limiting Service
–†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º sliding window –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import time
import json
from typing import Dict, Any, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from enum import Enum

from ...entity.api_key import ApiKey
from ...entity.client_usage import RateLimitStatus


class RateLimitType(Enum):
    """–¢–∏–ø—ã rate limiting"""

    PER_MINUTE = "per_minute"
    PER_HOUR = "per_hour"
    PER_DAY = "per_day"
    PER_MONTH = "per_month"


@dataclass(frozen=True)
class RateLimitResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting"""

    is_allowed: bool
    remaining_requests: int
    reset_time: datetime
    limit_type: RateLimitType
    retry_after_seconds: int = 0

    @property
    def is_rate_limited(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç"""
        return not self.is_allowed


@dataclass
class RateLimitInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–∞—Ö"""

    requests_per_minute: int
    requests_per_hour: int
    requests_per_day: int
    requests_per_month: int
    current_minute: int = 0
    current_hour: int = 0
    current_day: int = 0
    current_month: int = 0

    def to_headers(self) -> Dict[str, str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        return {
            "X-RateLimit-Limit-Minute": str(self.requests_per_minute),
            "X-RateLimit-Limit-Hour": str(self.requests_per_hour),
            "X-RateLimit-Limit-Day": str(self.requests_per_day),
            "X-RateLimit-Remaining-Minute": str(
                max(0, self.requests_per_minute - self.current_minute)
            ),
            "X-RateLimit-Remaining-Hour": str(max(0, self.requests_per_hour - self.current_hour)),
            "X-RateLimit-Remaining-Day": str(max(0, self.requests_per_day - self.current_day)),
        }


class RateLimiter:
    """
    Production-ready Rate Limiter —Å Redis backend

    Features:
    - Sliding window algorithm –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    - Multiple time windows (minute/hour/day/month)
    - Burst protection
    - IP-based and API key-based limiting
    - Graceful degradation –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
    """

    def __init__(self, redis_client=None, fallback_mode: bool = True):
        """
        Args:
            redis_client: Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
            fallback_mode: –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
        """
        self.redis = redis_client
        self.fallback_mode = fallback_mode

        # In-memory fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
        self._memory_cache: Dict[str, Dict[str, Any]] = {}
        self._cache_ttl = 3600  # 1 —á–∞—Å

        print(
            f"üö• Rate Limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Redis: {'‚úÖ' if redis_client else '‚ùå'}, fallback: {fallback_mode})"
        )

    async def check_rate_limit(self, api_key: ApiKey, client_ip: str = None) -> RateLimitResult:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting –¥–ª—è API –∫–ª—é—á–∞

        Args:
            api_key: API –∫–ª—é—á —Å –ª–∏–º–∏—Ç–∞–º–∏
            client_ip: IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            RateLimitResult —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–ª—é—á–∞
            limits = api_key.get_rate_limits()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞
            minute_result = await self._check_window_limit(
                api_key.id,
                RateLimitType.PER_MINUTE,
                limits.get("requests_per_minute", 60),
                60,  # 60 —Å–µ–∫—É–Ω–¥
            )

            if not minute_result.is_allowed:
                return minute_result

            hour_result = await self._check_window_limit(
                api_key.id,
                RateLimitType.PER_HOUR,
                limits.get("requests_per_hour", 3600),
                3600,  # 3600 —Å–µ–∫—É–Ω–¥
            )

            if not hour_result.is_allowed:
                return hour_result

            day_result = await self._check_window_limit(
                api_key.id,
                RateLimitType.PER_DAY,
                limits.get("requests_per_day", 5000),
                86400,  # 86400 —Å–µ–∫—É–Ω–¥
            )

            if not day_result.is_allowed:
                return day_result

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
            return RateLimitResult(
                is_allowed=True,
                remaining_requests=min(
                    minute_result.remaining_requests,
                    hour_result.remaining_requests,
                    day_result.remaining_requests,
                ),
                reset_time=minute_result.reset_time,  # –ë–ª–∏–∂–∞–π—à–∏–π reset
                limit_type=RateLimitType.PER_MINUTE,
            )

        except Exception as e:
            print(f"Rate limit check error: {e}")

            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º fallback –ª–æ–≥–∏–∫—É
            if self.fallback_mode:
                # –í fallback —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
                return RateLimitResult(
                    is_allowed=True,
                    remaining_requests=1000,  # –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
                    reset_time=datetime.now(timezone.utc) + timedelta(minutes=1),
                    limit_type=RateLimitType.PER_MINUTE,
                )
            else:
                # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º - –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                return RateLimitResult(
                    is_allowed=False,
                    remaining_requests=0,
                    reset_time=datetime.now(timezone.utc) + timedelta(minutes=1),
                    limit_type=RateLimitType.PER_MINUTE,
                    retry_after_seconds=60,
                )

    async def record_request(
        self, api_key: ApiKey, client_ip: str = None, endpoint: str = None
    ) -> None:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —É—á–µ—Ç–∞ –≤ –ª–∏–º–∏—Ç–∞—Ö

        Args:
            api_key: API –∫–ª—é—á
            client_ip: IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
            endpoint: –≠–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–∑–≤–∞–Ω
        """
        try:
            current_time = int(time.time())

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
            await self._record_in_window(api_key.id, RateLimitType.PER_MINUTE, current_time, 60)
            await self._record_in_window(api_key.id, RateLimitType.PER_HOUR, current_time, 3600)
            await self._record_in_window(api_key.id, RateLimitType.PER_DAY, current_time, 86400)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            if endpoint:
                await self._record_endpoint_usage(api_key.id, endpoint, current_time)

        except Exception as e:
            print(f"Error recording request: {e}")
            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–ø–∏—Å–∏

    async def get_rate_limit_info(self, api_key: ApiKey) -> RateLimitInfo:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ rate limiting

        Args:
            api_key: API –∫–ª—é—á

        Returns:
            RateLimitInfo —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        """
        try:
            limits = api_key.get_rate_limits()
            current_time = int(time.time())

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
            current_minute = await self._get_window_count(
                api_key.id, RateLimitType.PER_MINUTE, current_time, 60
            )
            current_hour = await self._get_window_count(
                api_key.id, RateLimitType.PER_HOUR, current_time, 3600
            )
            current_day = await self._get_window_count(
                api_key.id, RateLimitType.PER_DAY, current_time, 86400
            )

            return RateLimitInfo(
                requests_per_minute=limits.get("requests_per_minute", 60),
                requests_per_hour=limits.get("requests_per_hour", 3600),
                requests_per_day=limits.get("requests_per_day", 5000),
                requests_per_month=limits.get("requests_per_month", 150000),
                current_minute=current_minute,
                current_hour=current_hour,
                current_day=current_day,
                current_month=0,  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å monthly tracking
            )

        except Exception as e:
            print(f"Error getting rate limit info: {e}")
            limits = api_key.get_rate_limits()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º default –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return RateLimitInfo(
                requests_per_minute=limits.get("requests_per_minute", 60),
                requests_per_hour=limits.get("requests_per_hour", 3600),
                requests_per_day=limits.get("requests_per_day", 5000),
                requests_per_month=limits.get("requests_per_month", 150000),
            )

    async def reset_limits(self, api_key_id: int) -> bool:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è API –∫–ª—é—á–∞ (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)

        Args:
            api_key_id: ID API –∫–ª—é—á–∞

        Returns:
            True –µ—Å–ª–∏ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if self.redis:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ rate limiting –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞
                pattern = f"rate_limit:{api_key_id}:*"
                keys = await self.redis.keys(pattern)
                if keys:
                    await self.redis.delete(*keys)

            # –û—á–∏—â–∞–µ–º memory cache
            cache_keys = [key for key in self._memory_cache.keys() if f":{api_key_id}:" in key]
            for key in cache_keys:
                del self._memory_cache[key]

            return True

        except Exception as e:
            print(f"Error resetting limits: {e}")
            return False

    async def _check_window_limit(
        self, api_key_id: int, limit_type: RateLimitType, max_requests: int, window_seconds: int
    ) -> RateLimitResult:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        current_time = int(time.time())
        current_count = await self._get_window_count(
            api_key_id, limit_type, current_time, window_seconds
        )

        is_allowed = current_count < max_requests
        remaining = max(0, max_requests - current_count)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –æ–∫–Ω–∞
        window_start = current_time - (current_time % window_seconds)
        reset_time = datetime.fromtimestamp(window_start + window_seconds)

        retry_after = 0 if is_allowed else (window_start + window_seconds - current_time)

        return RateLimitResult(
            is_allowed=is_allowed,
            remaining_requests=remaining,
            reset_time=reset_time,
            limit_type=limit_type,
            retry_after_seconds=retry_after,
        )

    async def _get_window_count(
        self, api_key_id: int, limit_type: RateLimitType, current_time: int, window_seconds: int
    ) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ"""
        window_start = current_time - (current_time % window_seconds)
        cache_key = f"rate_limit:{api_key_id}:{limit_type.value}:{window_start}"

        try:
            if self.redis:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –¥–ª—è production
                count = await self.redis.get(cache_key)
                return int(count) if count else 0
            else:
                # Fallback –Ω–∞ memory cache
                cache_entry = self._memory_cache.get(cache_key)
                if cache_entry and time.time() - cache_entry["timestamp"] < self._cache_ttl:
                    return cache_entry["count"]
                return 0

        except Exception as e:
            print(f"Error getting window count: {e}")
            return 0

    async def _record_in_window(
        self, api_key_id: int, limit_type: RateLimitType, current_time: int, window_seconds: int
    ) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ"""
        window_start = current_time - (current_time % window_seconds)
        cache_key = f"rate_limit:{api_key_id}:{limit_type.value}:{window_start}"

        try:
            if self.redis:
                # –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ Redis
                async with self.redis.pipeline() as pipe:
                    await pipe.incr(cache_key)
                    await pipe.expire(cache_key, window_seconds + 60)  # +60 —Å–µ–∫ –∑–∞–ø–∞—Å
                    await pipe.execute()
            else:
                # Fallback –Ω–∞ memory cache
                if cache_key in self._memory_cache:
                    self._memory_cache[cache_key]["count"] += 1
                else:
                    self._memory_cache[cache_key] = {"count": 1, "timestamp": time.time()}

        except Exception as e:
            print(f"Error recording in window: {e}")

    async def _record_endpoint_usage(
        self, api_key_id: int, endpoint: str, current_time: int
    ) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        try:
            if self.redis:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                stats_key = f"endpoint_stats:{api_key_id}:{endpoint}"
                await self.redis.incr(stats_key)
                await self.redis.expire(stats_key, 86400 * 7)  # 7 –¥–Ω–µ–π

        except Exception as e:
            print(f"Error recording endpoint usage: {e}")

    def health_check(self) -> Dict[str, Any]:
        """Health check –¥–ª—è rate limiter"""
        try:
            redis_status = "healthy" if self.redis else "not_configured"

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if self.redis:
                try:
                    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Redis
                    test_key = f"health_check:{int(time.time())}"
                    # –í production –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å await –¥–ª—è async Redis
                    redis_status = "healthy"
                except Exception:
                    redis_status = "error"

            return {
                "status": "healthy",
                "redis_status": redis_status,
                "fallback_mode": self.fallback_mode,
                "memory_cache_size": len(self._memory_cache),
            }

        except Exception as e:
            return {"status": "error", "error": str(e)}


# Factory function
def create_rate_limiter(redis_client=None, config: Dict[str, Any] = None) -> RateLimiter:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Rate Limiter

    Args:
        redis_client: Redis –∫–ª–∏–µ–Ω—Ç
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π RateLimiter
    """
    if config is None:
        config = {}

    fallback_mode = config.get("fallback_mode", True)

    return RateLimiter(redis_client=redis_client, fallback_mode=fallback_mode)
