# src/domain/service/billing/token_calculator.py
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ —Ç–æ–∫–µ–Ω—ã
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è CAS/RUSpam –∏ –æ–ø–ª–∞—Ç—É –∑–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è OpenAI
"""

from dataclasses import dataclass
from enum import Enum
from typing import Dict, Any, Optional, Tuple
from datetime import datetime, timezone
import logging

logger = logging.getLogger(__name__)


class DetectionMethod(Enum):
    """–ú–µ—Ç–æ–¥—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞"""

    CAS = "cas"
    RUSPAM = "ruspam"
    OPENAI = "openai"
    FALLBACK = "fallback"


@dataclass
class BillingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏–ª–ª–∏–Ω–≥–∞"""

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
    cas_fixed_price: int = 1  # 1 –∫–æ–ø–µ–π–∫–∞ –∑–∞ CAS –ø—Ä–æ–≤–µ—Ä–∫—É
    ruspam_fixed_price: int = 2  # 2 –∫–æ–ø–µ–π–∫–∏ –∑–∞ RUSpam –ø—Ä–æ–≤–µ—Ä–∫—É

    # –¶–µ–Ω—ã –∑–∞ —Ç–æ–∫–µ–Ω—ã OpenAI (–≤ –∫–æ–ø–µ–π–∫–∞—Ö –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤)
    openai_input_token_price: int = 15  # 15 –∫–æ–ø–µ–µ–∫ –∑–∞ 1000 input —Ç–æ–∫–µ–Ω–æ–≤
    openai_output_token_price: int = 60  # 60 –∫–æ–ø–µ–µ–∫ –∑–∞ 1000 output —Ç–æ–∫–µ–Ω–æ–≤

    # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ü–µ–Ω –≤ 2 —Ä–∞–∑–∞)
    price_multiplier: float = 1.0

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
    min_request_cost: int = 1

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
    max_request_cost: int = 10000  # 100 —Ä—É–±–ª–µ–π


@dataclass
class TokenUsage:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""

    input_tokens: int = 0
    output_tokens: int = 0
    total_tokens: int = 0

    def __post_init__(self):
        self.total_tokens = self.input_tokens + self.output_tokens


@dataclass
class BillingResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""

    method: DetectionMethod
    cost_kopecks: int
    cost_rubles: float
    token_usage: Optional[TokenUsage] = None
    details: str = ""

    def __post_init__(self):
        self.cost_rubles = self.cost_kopecks / 100.0


class TokenCalculator:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ —Ç–æ–∫–µ–Ω—ã

    –õ–æ–≥–∏–∫–∞:
    1. CAS/RUSpam - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    2. OpenAI - —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–∫–µ–Ω—ã
    3. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    """

    def __init__(self, config: BillingConfig = None):
        self.config = config or BillingConfig()
        logger.info(
            f"üí∞ TokenCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º {self.config.price_multiplier}"
        )

    def calculate_cost(
        self,
        method: DetectionMethod,
        token_usage: Optional[TokenUsage] = None,
        custom_details: str = "",
    ) -> BillingResult:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞

        Args:
            method: –ú–µ—Ç–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏
            token_usage: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–¥–ª—è OpenAI)
            custom_details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

        Returns:
            BillingResult —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        """
        try:
            if method == DetectionMethod.CAS:
                return self._calculate_cas_cost(custom_details)
            elif method == DetectionMethod.RUSPAM:
                return self._calculate_ruspam_cost(custom_details)
            elif method == DetectionMethod.OPENAI:
                if not token_usage:
                    raise ValueError("Token usage required for OpenAI billing")
                return self._calculate_openai_cost(token_usage, custom_details)
            else:
                # Fallback - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                return self._calculate_fallback_cost(custom_details)

        except Exception as e:
            logger.error(f"Error calculating cost for {method}: {e}")
            return self._calculate_fallback_cost(f"Error: {str(e)}")

    def _calculate_cas_cost(self, details: str) -> BillingResult:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å CAS –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        base_cost = self.config.cas_fixed_price
        final_cost = int(base_cost * self.config.price_multiplier)
        final_cost = max(final_cost, self.config.min_request_cost)
        final_cost = min(final_cost, self.config.max_request_cost)

        return BillingResult(
            method=DetectionMethod.CAS,
            cost_kopecks=final_cost,
            details=f"CAS fixed price: {base_cost} kopecks √ó {self.config.price_multiplier} = {final_cost} kopecks",
        )

    def _calculate_ruspam_cost(self, details: str) -> BillingResult:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å RUSpam –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        base_cost = self.config.ruspam_fixed_price
        final_cost = int(base_cost * self.config.price_multiplier)
        final_cost = max(final_cost, self.config.min_request_cost)
        final_cost = min(final_cost, self.config.max_request_cost)

        return BillingResult(
            method=DetectionMethod.RUSPAM,
            cost_kopecks=final_cost,
            details=f"RUSpam fixed price: {base_cost} kopecks √ó {self.config.price_multiplier} = {final_cost} kopecks",
        )

    def _calculate_openai_cost(self, token_usage: TokenUsage, details: str) -> BillingResult:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å OpenAI –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º"""
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ input —Ç–æ–∫–µ–Ω—ã
        input_cost = (token_usage.input_tokens / 1000.0) * self.config.openai_input_token_price

        # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ output —Ç–æ–∫–µ–Ω—ã
        output_cost = (token_usage.output_tokens / 1000.0) * self.config.openai_output_token_price

        # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_cost = input_cost + output_cost

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
        final_cost = int(total_cost * self.config.price_multiplier)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        final_cost = max(final_cost, self.config.min_request_cost)
        final_cost = min(final_cost, self.config.max_request_cost)

        return BillingResult(
            method=DetectionMethod.OPENAI,
            cost_kopecks=final_cost,
            token_usage=token_usage,
            details=f"OpenAI tokens: {token_usage.input_tokens} input + {token_usage.output_tokens} output = {token_usage.total_tokens} total. Cost: {total_cost:.2f} kopecks √ó {self.config.price_multiplier} = {final_cost} kopecks",
        )

    def _calculate_fallback_cost(self, details: str) -> BillingResult:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å fallback –∑–∞–ø—Ä–æ—Å–∞"""
        base_cost = self.config.min_request_cost
        final_cost = int(base_cost * self.config.price_multiplier)

        return BillingResult(
            method=DetectionMethod.FALLBACK,
            cost_kopecks=final_cost,
            details=f"Fallback cost: {base_cost} kopecks √ó {self.config.price_multiplier} = {final_cost} kopecks. {details}",
        )

    def update_price_multiplier(self, multiplier: float) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        Args:
            multiplier: –ù–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.0 –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è —Ü–µ–Ω)
        """
        if multiplier <= 0:
            raise ValueError("Price multiplier must be positive")

        old_multiplier = self.config.price_multiplier
        self.config.price_multiplier = multiplier

        logger.info(f"üí∞ Price multiplier updated: {old_multiplier} ‚Üí {multiplier}")

    def get_current_prices(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã"""
        return {
            "cas_fixed_price_kopecks": int(
                self.config.cas_fixed_price * self.config.price_multiplier
            ),
            "ruspam_fixed_price_kopecks": int(
                self.config.ruspam_fixed_price * self.config.price_multiplier
            ),
            "openai_input_price_per_1k_tokens_kopecks": int(
                self.config.openai_input_token_price * self.config.price_multiplier
            ),
            "openai_output_price_per_1k_tokens_kopecks": int(
                self.config.openai_output_token_price * self.config.price_multiplier
            ),
            "price_multiplier": self.config.price_multiplier,
            "min_request_cost_kopecks": int(
                self.config.min_request_cost * self.config.price_multiplier
            ),
            "max_request_cost_kopecks": int(
                self.config.max_request_cost * self.config.price_multiplier
            ),
        }

    def estimate_openai_cost(
        self, estimated_input_tokens: int, estimated_output_tokens: int = 50
    ) -> BillingResult:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å OpenAI –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        Args:
            estimated_input_tokens: –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ input —Ç–æ–∫–µ–Ω–æ–≤
            estimated_output_tokens: –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ output —Ç–æ–∫–µ–Ω–æ–≤

        Returns:
            BillingResult —Å –æ—Ü–µ–Ω–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        token_usage = TokenUsage(
            input_tokens=estimated_input_tokens, output_tokens=estimated_output_tokens
        )

        return self._calculate_openai_cost(token_usage, "Estimated cost")

    def calculate_batch_cost(self, results: list[BillingResult]) -> BillingResult:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–∞

        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        Returns:
            BillingResult —Å –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        """
        total_cost = sum(result.cost_kopecks for result in results)
        total_tokens = sum(
            result.token_usage.total_tokens for result in results if result.token_usage
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ (—Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π)
        primary_method = max(results, key=lambda r: r.cost_kopecks).method

        return BillingResult(
            method=primary_method,
            cost_kopecks=total_cost,
            token_usage=TokenUsage(total_tokens=total_tokens) if total_tokens > 0 else None,
            details=f"Batch cost: {len(results)} requests, total {total_cost} kopecks",
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
_default_calculator = TokenCalculator()


def get_token_calculator() -> TokenCalculator:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    return _default_calculator


def create_calculator_with_multiplier(multiplier: float) -> TokenCalculator:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º"""
    config = BillingConfig(price_multiplier=multiplier)
    return TokenCalculator(config)
