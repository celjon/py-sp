# src/domain/service/error_handling/error_handler.py
"""
Production Error Handler with Graceful Degradation
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–∞—Ö –æ—à–∏–±–æ–∫
"""

import traceback
import logging
import asyncio
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Optional, Callable, List, Union
from dataclasses import dataclass, field
from enum import Enum
from functools import wraps

from fastapi import HTTPException, Request, status
from fastapi.responses import JSONResponse


class ErrorSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class ErrorCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫"""

    VALIDATION = "validation"
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    RATE_LIMIT = "rate_limit"
    EXTERNAL_SERVICE = "external_service"
    DATABASE = "database"
    CACHE = "cache"
    BUSINESS_LOGIC = "business_logic"
    SYSTEM = "system"
    UNKNOWN = "unknown"


@dataclass
class ErrorContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""

    error_id: str
    timestamp: datetime
    severity: ErrorSeverity
    category: ErrorCategory
    service_name: str
    endpoint: Optional[str] = None
    user_id: Optional[str] = None
    api_key_id: Optional[str] = None
    request_id: Optional[str] = None
    additional_data: Dict[str, Any] = field(default_factory=dict)


@dataclass
class CircuitBreakerState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ circuit breaker"""

    failure_count: int = 0
    last_failure_time: Optional[datetime] = None
    state: str = "CLOSED"  # CLOSED, OPEN, HALF_OPEN
    success_count: int = 0


class ProductionErrorHandler:
    """
    Production-ready Error Handler

    Features:
    - Graceful degradation –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    - Circuit breaker pattern –¥–ª—è –∑–∞—â–∏—Ç—ã
    - Structured error logging
    - Error aggregation –∏ alerting
    - Automatic retry logic
    - Fallback mechanisms
    """

    def __init__(
        self,
        service_name: str = "antispam-api",
        enable_circuit_breaker: bool = True,
        circuit_breaker_threshold: int = 5,
        circuit_breaker_timeout: int = 60,
        enable_error_aggregation: bool = True,
        max_error_cache_size: int = 1000,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è error handler

        Args:
            service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            enable_circuit_breaker: –í–∫–ª—é—á–∏—Ç—å circuit breaker
            circuit_breaker_threshold: –ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è circuit
            circuit_breaker_timeout: –¢–∞–π–º–∞—É—Ç circuit breaker –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            enable_error_aggregation: –í–∫–ª—é—á–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –æ—à–∏–±–æ–∫
            max_error_cache_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –æ—à–∏–±–æ–∫
        """
        self.service_name = service_name
        self.enable_circuit_breaker = enable_circuit_breaker
        self.circuit_breaker_threshold = circuit_breaker_threshold
        self.circuit_breaker_timeout = circuit_breaker_timeout
        self.enable_error_aggregation = enable_error_aggregation

        # Circuit breakers –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.circuit_breakers: Dict[str, CircuitBreakerState] = {}

        # –ö—ç—à –æ—à–∏–±–æ–∫ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        self.error_cache: List[ErrorContext] = []
        self.max_error_cache_size = max_error_cache_size

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        self.error_stats: Dict[str, Any] = {
            "total_errors": 0,
            "errors_by_category": {},
            "errors_by_severity": {},
            "last_error_time": None,
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(f"{service_name}.error_handler")

        print(f"üõ°Ô∏è Production Error Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {service_name}")

    async def handle_error(
        self,
        error: Exception,
        context: Optional[ErrorContext] = None,
        request: Optional[Request] = None,
    ) -> JSONResponse:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫

        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            request: FastAPI Request –æ–±—ä–µ–∫—Ç

        Returns:
            JSONResponse —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not context:
                context = await self._create_error_context(error, request)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await self._log_error(error, context)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_error_stats(context)

            # –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            if self.enable_error_aggregation:
                self._cache_error(context)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            response = await self._create_error_response(error, context)

            return response

        except Exception as e:
            # Fallback –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ error handler —Å–∞–º —É–ø–∞–ª
            self.logger.critical(f"Error handler failed: {e}")
            return JSONResponse(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                content={
                    "error": "Internal server error",
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "error_id": "fallback_error",
                },
            )

    async def _create_error_context(
        self, error: Exception, request: Optional[Request] = None
    ) -> ErrorContext:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏"""
        import uuid

        error_id = str(uuid.uuid4())[:8]
        severity = self._determine_severity(error)
        category = self._determine_category(error)

        context = ErrorContext(
            error_id=error_id,
            timestamp=datetime.now(timezone.utc),
            severity=severity,
            category=category,
            service_name=self.service_name,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ request
        if request:
            context.endpoint = str(request.url.path)
            context.request_id = request.headers.get("X-Request-ID")

            # API key info –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if hasattr(request.state, "api_key"):
                context.api_key_id = str(request.state.api_key.id)
                context.user_id = request.state.api_key.client_name

        return context

    def _determine_severity(self, error: Exception) -> ErrorSeverity:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏"""
        if isinstance(error, (ConnectionError, TimeoutError)):
            return ErrorSeverity.HIGH
        elif isinstance(error, HTTPException):
            if error.status_code >= 500:
                return ErrorSeverity.HIGH
            elif error.status_code == 429:
                return ErrorSeverity.MEDIUM
            else:
                return ErrorSeverity.LOW
        elif isinstance(error, (ValueError, TypeError)):
            return ErrorSeverity.MEDIUM
        else:
            return ErrorSeverity.HIGH

    def _determine_category(self, error: Exception) -> ErrorCategory:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—à–∏–±–∫–∏"""
        if isinstance(error, HTTPException):
            if error.status_code == 401:
                return ErrorCategory.AUTHENTICATION
            elif error.status_code == 403:
                return ErrorCategory.AUTHORIZATION
            elif error.status_code == 429:
                return ErrorCategory.RATE_LIMIT
            elif error.status_code == 422:
                return ErrorCategory.VALIDATION
        elif isinstance(error, (ConnectionError, TimeoutError)):
            return ErrorCategory.EXTERNAL_SERVICE
        elif isinstance(error, ValueError):
            return ErrorCategory.VALIDATION
        else:
            return ErrorCategory.UNKNOWN

    async def _log_error(self, error: Exception, context: ErrorContext):
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        log_data = {
            "error_id": context.error_id,
            "timestamp": context.timestamp.isoformat(),
            "severity": context.severity.value,
            "category": context.category.value,
            "service": context.service_name,
            "endpoint": context.endpoint,
            "api_key_id": context.api_key_id,
            "user_id": context.user_id,
            "error_type": type(error).__name__,
            "error_message": str(error),
            "traceback": (
                traceback.format_exc()
                if context.severity in [ErrorSeverity.HIGH, ErrorSeverity.CRITICAL]
                else None
            ),
        }

        # –í—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if context.severity == ErrorSeverity.CRITICAL:
            self.logger.critical("Critical error occurred", extra=log_data)
        elif context.severity == ErrorSeverity.HIGH:
            self.logger.error("High severity error", extra=log_data)
        elif context.severity == ErrorSeverity.MEDIUM:
            self.logger.warning("Medium severity error", extra=log_data)
        else:
            self.logger.info("Low severity error", extra=log_data)

    def _update_error_stats(self, context: ErrorContext):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
        self.error_stats["total_errors"] += 1
        self.error_stats["last_error_time"] = context.timestamp

        # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_key = context.category.value
        if category_key not in self.error_stats["errors_by_category"]:
            self.error_stats["errors_by_category"][category_key] = 0
        self.error_stats["errors_by_category"][category_key] += 1

        # –ü–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_key = context.severity.value
        if severity_key not in self.error_stats["errors_by_severity"]:
            self.error_stats["errors_by_severity"][severity_key] = 0
        self.error_stats["errors_by_severity"][severity_key] += 1

    def _cache_error(self, context: ErrorContext):
        """–ö—ç—à–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        self.error_cache.append(context)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self.error_cache) > self.max_error_cache_size:
            self.error_cache = self.error_cache[-self.max_error_cache_size :]

    async def _create_error_response(self, error: Exception, context: ErrorContext) -> JSONResponse:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        response_data = {
            "error": self._get_user_friendly_message(error, context),
            "error_id": context.error_id,
            "timestamp": context.timestamp.isoformat(),
            "category": context.category.value,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        if isinstance(error, HTTPException):
            status_code = error.status_code
            if hasattr(error, "detail") and error.detail:
                response_data["details"] = error.detail
        else:
            status_code = status.HTTP_500_INTERNAL_SERVER_ERROR

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if context.severity in [ErrorSeverity.HIGH, ErrorSeverity.CRITICAL]:
            response_data["support_info"] = {
                "contact": "support@antispam.com",
                "documentation": "https://docs.antispam.com/troubleshooting",
                "error_reference": f"ERR-{context.error_id}",
            }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ retry –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if context.category == ErrorCategory.EXTERNAL_SERVICE:
            response_data["retry_info"] = {
                "retryable": True,
                "suggested_delay_seconds": 30,
                "max_retries": 3,
            }
        elif context.category == ErrorCategory.RATE_LIMIT:
            response_data["retry_info"] = {
                "retryable": True,
                "suggested_delay_seconds": 60,
                "rate_limit_reset": (datetime.now(timezone.utc) + timedelta(minutes=1)).isoformat(),
            }

        return JSONResponse(
            status_code=status_code,
            content=response_data,
            headers={"X-Error-ID": context.error_id, "X-Error-Category": context.category.value},
        )

    def _get_user_friendly_message(self, error: Exception, context: ErrorContext) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""

        if context.category == ErrorCategory.AUTHENTICATION:
            return "Authentication failed. Please check your API key."
        elif context.category == ErrorCategory.AUTHORIZATION:
            return "Access denied. Insufficient permissions."
        elif context.category == ErrorCategory.RATE_LIMIT:
            return "Rate limit exceeded. Please slow down your requests."
        elif context.category == ErrorCategory.VALIDATION:
            return "Invalid request data. Please check your input."
        elif context.category == ErrorCategory.EXTERNAL_SERVICE:
            return "External service temporarily unavailable. Please try again later."
        elif context.category == ErrorCategory.DATABASE:
            return "Database service temporarily unavailable. Please try again."
        elif context.category == ErrorCategory.CACHE:
            return "Cache service unavailable. Functionality may be slower."
        else:
            return "An unexpected error occurred. Please try again or contact support."

    # === CIRCUIT BREAKER METHODS ===

    def get_circuit_breaker(self, service_name: str) -> CircuitBreakerState:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ circuit breaker –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        if service_name not in self.circuit_breakers:
            self.circuit_breakers[service_name] = CircuitBreakerState()
        return self.circuit_breakers[service_name]

    def is_circuit_open(self, service_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ circuit breaker"""
        if not self.enable_circuit_breaker:
            return False

        breaker = self.get_circuit_breaker(service_name)

        if breaker.state == "OPEN":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            if breaker.last_failure_time:
                time_since_failure = datetime.now(timezone.utc) - breaker.last_failure_time
                if time_since_failure.total_seconds() > self.circuit_breaker_timeout:
                    breaker.state = "HALF_OPEN"
                    breaker.success_count = 0
                    return False
            return True

        return False

    def record_success(self, service_name: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.enable_circuit_breaker:
            return

        breaker = self.get_circuit_breaker(service_name)

        if breaker.state == "HALF_OPEN":
            breaker.success_count += 1
            if breaker.success_count >= 3:  # 3 —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                breaker.state = "CLOSED"
                breaker.failure_count = 0
        elif breaker.state == "CLOSED":
            breaker.failure_count = max(0, breaker.failure_count - 1)  # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫

    def record_failure(self, service_name: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.enable_circuit_breaker:
            return

        breaker = self.get_circuit_breaker(service_name)
        breaker.failure_count += 1
        breaker.last_failure_time = datetime.now(timezone.utc)

        if breaker.failure_count >= self.circuit_breaker_threshold:
            breaker.state = "OPEN"
            self.logger.warning(f"Circuit breaker opened for service: {service_name}")

    # === GRACEFUL DEGRADATION DECORATORS ===

    def with_fallback(self, fallback_func: Callable, service_name: str = "default"):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è graceful degradation —Å fallback —Ñ—É–Ω–∫—Ü–∏–µ–π"""

        def decorator(func):
            @wraps(func)
            async def wrapper(*args, **kwargs):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
                if self.is_circuit_open(service_name):
                    self.logger.info(f"Circuit breaker open for {service_name}, using fallback")
                    return await fallback_func(*args, **kwargs)

                try:
                    result = await func(*args, **kwargs)
                    self.record_success(service_name)
                    return result

                except Exception as e:
                    self.record_failure(service_name)

                    # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                    context = await self._create_error_context(e)
                    if context.severity in [ErrorSeverity.HIGH, ErrorSeverity.CRITICAL]:
                        self.logger.warning(f"Using fallback for {service_name} due to error: {e}")
                        return await fallback_func(*args, **kwargs)
                    else:
                        raise

            return wrapper

        return decorator

    def with_retry(self, max_retries: int = 3, delay: float = 1.0, backoff: float = 2.0):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ retry"""

        def decorator(func):
            @wraps(func)
            async def wrapper(*args, **kwargs):
                last_exception = None

                for attempt in range(max_retries + 1):
                    try:
                        return await func(*args, **kwargs)
                    except Exception as e:
                        last_exception = e

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                        if not self._should_retry(e):
                            raise

                        if attempt < max_retries:
                            wait_time = delay * (backoff**attempt)
                            self.logger.info(
                                f"Retrying {func.__name__} in {wait_time}s (attempt {attempt + 1})"
                            )
                            await asyncio.sleep(wait_time)
                        else:
                            self.logger.error(f"Max retries exceeded for {func.__name__}")

                raise last_exception

            return wrapper

        return decorator

    def _should_retry(self, error: Exception) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ"""
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if isinstance(error, (ConnectionError, TimeoutError)):
            return True
        elif isinstance(error, HTTPException):
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è 5xx –æ—à–∏–±–æ–∫, –Ω–æ –Ω–µ –¥–ª—è 4xx
            return 500 <= error.status_code < 600
        return False

    # === MONITORING AND HEALTH ===

    def get_error_summary(self, hours: int = 24) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ—à–∏–±–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        cutoff_time = datetime.now(timezone.utc) - timedelta(hours=hours)

        recent_errors = [error for error in self.error_cache if error.timestamp > cutoff_time]

        summary = {
            "period_hours": hours,
            "total_errors": len(recent_errors),
            "errors_by_category": {},
            "errors_by_severity": {},
            "top_endpoints": {},
            "circuit_breaker_status": {
                name: breaker.state for name, breaker in self.circuit_breakers.items()
            },
        }

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for error in recent_errors:
            category = error.category.value
            severity = error.severity.value
            endpoint = error.endpoint or "unknown"

            summary["errors_by_category"][category] = (
                summary["errors_by_category"].get(category, 0) + 1
            )
            summary["errors_by_severity"][severity] = (
                summary["errors_by_severity"].get(severity, 0) + 1
            )
            summary["top_endpoints"][endpoint] = summary["top_endpoints"].get(endpoint, 0) + 1

        return summary

    def health_check(self) -> Dict[str, Any]:
        """Health check –¥–ª—è error handler"""
        try:
            recent_errors = len(
                [
                    error
                    for error in self.error_cache
                    if error.timestamp > datetime.now(timezone.utc) - timedelta(minutes=5)
                ]
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫
            if recent_errors > 50:
                health_status = "critical"
            elif recent_errors > 20:
                health_status = "degraded"
            elif recent_errors > 5:
                health_status = "warning"
            else:
                health_status = "healthy"

            return {
                "status": health_status,
                "total_errors": self.error_stats["total_errors"],
                "recent_errors_5min": recent_errors,
                "circuit_breakers": {
                    name: breaker.state for name, breaker in self.circuit_breakers.items()
                },
                "error_cache_size": len(self.error_cache),
                "last_error": (
                    self.error_stats["last_error_time"].isoformat()
                    if self.error_stats["last_error_time"]
                    else None
                ),
            }

        except Exception as e:
            return {"status": "error", "error": str(e)}


# === FACTORY FUNCTION ===


def create_error_handler(
    service_name: str = "antispam-api", config: Optional[Dict[str, Any]] = None
) -> ProductionErrorHandler:
    """
    Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è error handler

    Args:
        service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è error handler

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ProductionErrorHandler
    """
    if config is None:
        config = {}

    return ProductionErrorHandler(
        service_name=service_name,
        enable_circuit_breaker=config.get("enable_circuit_breaker", True),
        circuit_breaker_threshold=config.get("circuit_breaker_threshold", 5),
        circuit_breaker_timeout=config.get("circuit_breaker_timeout", 60),
        enable_error_aggregation=config.get("enable_error_aggregation", True),
        max_error_cache_size=config.get("max_error_cache_size", 1000),
    )


# === EXAMPLE USAGE ===

if __name__ == "__main__":
    import asyncio

    async def example_usage():
        # –°–æ–∑–¥–∞–µ–º error handler
        error_handler = create_error_handler("test-service")

        # –ü—Ä–∏–º–µ—Ä fallback —Ñ—É–Ω–∫—Ü–∏–∏
        async def fallback_detection(text: str):
            return {
                "is_spam": False,
                "confidence": 0.5,
                "reason": "fallback_mode",
                "notes": "Service unavailable, using fallback",
            }

        # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
        @error_handler.with_fallback(fallback_detection, "spam_detector")
        @error_handler.with_retry(max_retries=3, delay=1.0)
        async def detect_spam(text: str):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "error" in text:
                raise ConnectionError("External service unavailable")
            return {"is_spam": True, "confidence": 0.9}

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        result1 = await detect_spam("normal text")
        print(f"Normal: {result1}")

        result2 = await detect_spam("error text")  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback
        print(f"With error: {result2}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        health = error_handler.health_check()
        print(f"Health: {health}")

    asyncio.run(example_usage())
