import re
import asyncio
from typing import Optional
from dataclasses import dataclass

try:
    import torch
    from transformers import AutoTokenizer, AutoModelForSequenceClassification

    TRANSFORMERS_AVAILABLE = True
except ImportError:
    TRANSFORMERS_AVAILABLE = False


@dataclass
class RUSpamResult:
    is_spam: bool
    confidence: float
    details: str


class RUSpamSimpleClassifier:
    """RUSpam –¥–µ—Ç–µ–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ Hugging Face transformers (—Ç–æ–ª—å–∫–æ spamNS_v1)"""

    def __init__(self):
        self.model_name = "RUSpam/spamNS_v1"
        self.device = None
        self.model: Optional["AutoModelForSequenceClassification"] = None
        self.tokenizer: Optional["AutoTokenizer"] = None
        self.is_loaded = False
        self.is_available = TRANSFORMERS_AVAILABLE

        if not TRANSFORMERS_AVAILABLE:
            raise RuntimeError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install torch transformers")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        print(f"[OK] RUSpam –¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._load_model_sync()

    def _load_model_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ RUSpam –º–æ–¥–µ–ª–∏: {self.model_name}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
            self.tokenizer = AutoTokenizer.from_pretrained(self.model_name)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (spamNS_v1 - —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è, 1 –≤—ã—Ö–æ–¥)
            self.model = (
                AutoModelForSequenceClassification.from_pretrained(
                    self.model_name, num_labels=1, ignore_mismatched_sizes=True
                )
                .to(self.device)
                .eval()
            )

            self.is_loaded = True
            print("[OK] RUSpam –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å RUSpam –º–æ–¥–µ–ª—å: {e}"
            print(error_msg)
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Hugging Face Hub")
            raise RuntimeError(error_msg)


    def _clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è RUSpam –º–æ–¥–µ–ª–∏"""
        # –£–±–∏—Ä–∞–µ–º URL
        text = re.sub(r"http\S+", "", text)
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏
        text = re.sub(r"[^–ê-–Ø–∞-—è0-9 .,!?-]+", " ", text)
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower().strip()
        text = re.sub(r"\s+", " ", text)
        return text

    async def classify(self, message: str) -> RUSpamResult:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º"""
        if not self.is_loaded:
            return RUSpamResult(is_spam=False, confidence=0.0, details="RUSpam –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            cleaned_text = self._clean_text(message)

            if len(cleaned_text.strip()) < 3:
                return RUSpamResult(
                    is_spam=False, confidence=0.0, details="–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"
                )

            # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
            encoding = self.tokenizer(
                cleaned_text,
                padding="max_length",
                truncation=True,
                max_length=128,
                return_tensors="pt",
            )

            input_ids = encoding["input_ids"].to(self.device)
            attention_mask = encoding["attention_mask"].to(self.device)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            with torch.no_grad():
                outputs = self.model(input_ids, attention_mask=attention_mask).logits
                # spamNS_v1 - —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å 1 –≤—ã—Ö–æ–¥–æ–º
                confidence = torch.sigmoid(outputs).cpu().numpy()[0][0]
                is_spam = bool(confidence >= 0.5)

            return RUSpamResult(
                is_spam=is_spam,
                confidence=float(confidence),
                details=f"RUSpam spamNS_v1: {'–°–ü–ê–ú' if is_spam else '–ù–ï –°–ü–ê–ú'}",
            )

        except Exception as e:
            return RUSpamResult(is_spam=False, confidence=0.0, details=f"–û—à–∏–±–∫–∞ RUSpam: {str(e)}")
