import re
import asyncio
from typing import Optional
from dataclasses import dataclass

try:
    import torch
    from transformers import AutoTokenizer, AutoModelForSequenceClassification
    TRANSFORMERS_AVAILABLE = True
except ImportError:
    TRANSFORMERS_AVAILABLE = False


@dataclass
class RUSpamResult:
    is_spam: bool
    confidence: float
    details: str


class RUSpamSimpleClassifier:
    """RUSpam –¥–µ—Ç–µ–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ Hugging Face transformers (—Ç–æ–ª—å–∫–æ spamNS_v1)"""

    def __init__(self):
        self.model_name = "RUSpam/spamNS_v1"
        self.device = None
        self.model: Optional['AutoModelForSequenceClassification'] = None
        self.tokenizer: Optional['AutoTokenizer'] = None
        self.is_loaded = False
        self.is_available = TRANSFORMERS_AVAILABLE

        if TRANSFORMERS_AVAILABLE:
            self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
            print(f"‚úÖ RUSpam –¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        else:
            print("‚ùå Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install torch transformers")

    async def _load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ RUSpam/spamNS_v1"""
        if self.is_loaded or not self.is_available:
            return

        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ RUSpam –º–æ–¥–µ–ª–∏: {self.model_name}")

            loop = asyncio.get_event_loop()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
            self.tokenizer = await loop.run_in_executor(
                None,
                AutoTokenizer.from_pretrained,
                self.model_name
            )

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (spamNS_v1 - —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è, 1 –≤—ã—Ö–æ–¥)
            def _load_model():
                return AutoModelForSequenceClassification.from_pretrained(
                    self.model_name,
                    num_labels=1,
                    ignore_mismatched_sizes=True
                ).to(self.device).eval()

            self.model = await loop.run_in_executor(None, _load_model)

            self.is_loaded = True
            print("‚úÖ RUSpam –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RUSpam: {e}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install torch transformers")
            self.is_loaded = False

    def _clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è RUSpam –º–æ–¥–µ–ª–∏"""
        # –£–±–∏—Ä–∞–µ–º URL
        text = re.sub(r'http\S+', '', text)
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏
        text = re.sub(r'[^–ê-–Ø–∞-—è0-9 .,!?-]+', ' ', text)
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower().strip()
        text = re.sub(r'\s+', ' ', text)
        return text

    async def classify(self, message: str) -> RUSpamResult:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º"""
        if not self.is_available:
            return RUSpamResult(
                is_spam=False,
                confidence=0.0,
                details="Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            )

        if not self.is_loaded:
            await self._load_model()

        if not self.is_loaded:
            return RUSpamResult(
                is_spam=False,
                confidence=0.0,
                details="RUSpam –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            )

        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            cleaned_text = self._clean_text(message)

            if len(cleaned_text.strip()) < 3:
                return RUSpamResult(
                    is_spam=False,
                    confidence=0.0,
                    details="–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"
                )

            # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
            encoding = self.tokenizer(
                cleaned_text,
                padding='max_length',
                truncation=True,
                max_length=128,
                return_tensors='pt'
            )

            input_ids = encoding['input_ids'].to(self.device)
            attention_mask = encoding['attention_mask'].to(self.device)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            with torch.no_grad():
                outputs = self.model(input_ids, attention_mask=attention_mask).logits
                # spamNS_v1 - —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å 1 –≤—ã—Ö–æ–¥–æ–º
                confidence = torch.sigmoid(outputs).cpu().numpy()[0][0]
                is_spam = bool(confidence >= 0.5)

            return RUSpamResult(
                is_spam=is_spam,
                confidence=float(confidence),
                details=f"RUSpam spamNS_v1: {'–°–ü–ê–ú' if is_spam else '–ù–ï –°–ü–ê–ú'}"
            )

        except Exception as e:
            return RUSpamResult(
                is_spam=False,
                confidence=0.0,
                details=f"–û—à–∏–±–∫–∞ RUSpam: {str(e)}"
            )
