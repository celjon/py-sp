# src/domain/service/detector/bothub.py
"""
BotHub Spam Detector - –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ BotHub LLM
"""

import time
import logging
import json
import asyncio
from typing import Dict, Any, Optional, List

from ...entity.message import Message
from ...entity.detection_result import DetectorResult

logger = logging.getLogger(__name__)


class BotHubDetector:
    """
    Production-ready –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ BotHub LLM

    Features:
    - Context-aware –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ LLM
    - Comprehensive error handling
    - Performance monitoring
    - Fallback —Ä–µ–∂–∏–º—ã
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    """

    def __init__(self, bothub_gateway, config: Dict[str, Any] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BotHub –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        
        Args:
            bothub_gateway: BotHub Gateway –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        """
        self.gateway = bothub_gateway
        self.config = config or {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.min_text_length = self.config.get("min_text_length", 5)
        self.max_text_length = self.config.get("max_text_length", 4000)
        self.timeout = self.config.get("timeout", 10.0)
        self.max_retries = self.config.get("max_retries", 2)
        self.retry_delay = self.config.get("retry_delay", 1.0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._total_requests = 0
        self._total_processing_time = 0.0
        self._successful_requests = 0
        self._failed_requests = 0
        
        logger.info("ü§ñ BotHub Detector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   Min text length: {self.min_text_length}")
        logger.info(f"   Max text length: {self.max_text_length}")
        logger.info(f"   Timeout: {self.timeout}s, Retries: {self.max_retries}")

    async def detect(self, message: Message, user_context: Dict[str, Any] = None) -> DetectorResult:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é BotHub LLM

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            DetectorResult —Å –∞–Ω–∞–ª–∏–∑–æ–º LLM
        """
        start_time = time.time()
        self._total_requests += 1

        text = message.text or ""

        logger.debug(f"ü§ñ BotHub –∞–Ω–∞–ª–∏–∑: '{text[:50]}{'...' if len(text) > 50 else ''}'")

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if len(text.strip()) < self.min_text_length:
                logger.debug(f"[WARN] –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è BotHub: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return DetectorResult(
                    detector_name="BotHub",
                    is_spam=False,
                    confidence=0.0,
                    details=f"Text too short for analysis ({len(text)} chars)",
                    processing_time_ms=(time.time() - start_time) * 1000,
                )

            if len(text) > self.max_text_length:
                # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç
                text = text[:self.max_text_length]
                logger.warning(f"[WARN] –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ {self.max_text_length} —Å–∏–º–≤–æ–ª–æ–≤")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_context = self._prepare_analysis_context(message, user_context)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å retry logic
            bothub_result = await self._analyze_with_retry(text, analysis_context)

            processing_time_ms = (time.time() - start_time) * 1000
            self._total_processing_time += processing_time_ms

            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if bothub_result:
                is_spam, confidence, token_usage = bothub_result
                self._successful_requests += 1
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
                details = {
                    "model": self.gateway.model,
                    "tokens_used": token_usage.get("total_tokens", 0),
                    "processing_time_ms": processing_time_ms,
                    "user_context_provided": bool(user_context)
                }
                
                return DetectorResult(
                    detector_name="BotHub",
                    is_spam=is_spam,
                    confidence=confidence,
                    details=json.dumps(details),
                    processing_time_ms=processing_time_ms,
                )
            else:
                self._failed_requests += 1
                return DetectorResult(
                    detector_name="BotHub",
                    is_spam=False,
                    confidence=0.0,
                    details="BotHub API request failed",
                    processing_time_ms=processing_time_ms,
                )

        except Exception as e:
            self._failed_requests += 1
            processing_time_ms = (time.time() - start_time) * 1000
            self._total_processing_time += processing_time_ms
            
            logger.error(f"‚ùå BotHub detector error: {e}")
            
            return DetectorResult(
                detector_name="BotHub",
                is_spam=False,
                confidence=0.0,
                details=f"BotHub error: {str(e)}",
                processing_time_ms=processing_time_ms,
            )

    async def _analyze_with_retry(self, text: str, context: Dict[str, Any]) -> Optional[tuple]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            (is_spam, confidence, token_usage) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        last_error = None
        
        for attempt in range(self.max_retries + 1):
            try:
                if attempt > 0:
                    await asyncio.sleep(self.retry_delay * attempt)
                    logger.debug(f"üîÑ BotHub retry attempt {attempt}")
                
                # –í—ã–∑—ã–≤–∞–µ–º BotHub API
                result = await self.gateway.check_spam(text, context)
                return result
                
            except Exception as e:
                last_error = e
                logger.warning(f"‚ö†Ô∏è BotHub attempt {attempt + 1} failed: {e}")
                
                if attempt == self.max_retries:
                    logger.error(f"‚ùå BotHub –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {e}")
                    break
        
        return None

    def _prepare_analysis_context(self, message: Message, user_context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = {
            "message_id": message.id,
            "user_id": message.user_id,
            "chat_id": message.chat_id,
            "message_length": len(message.text or ""),
            "timestamp": message.created_at.isoformat() if message.created_at else None,
        }
        
        if user_context:
            context.update({
                "user_message_count": user_context.get("message_count", 0),
                "user_spam_score": user_context.get("spam_score", 0.0),
                "is_new_user": user_context.get("is_new_user", False),
                "user_join_date": user_context.get("join_date"),
                "previous_detections": user_context.get("previous_detections", 0),
            })
        
        return context

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        return {
            "total_requests": self._total_requests,
            "successful_requests": self._successful_requests,
            "failed_requests": self._failed_requests,
            "success_rate": self._successful_requests / max(self._total_requests, 1),
            "total_processing_time": self._total_processing_time,
            "avg_processing_time": self._total_processing_time / max(self._total_requests, 1),
            "config": {
                "min_text_length": self.min_text_length,
                "max_text_length": self.max_text_length,
                "timeout": self.timeout,
                "max_retries": self.max_retries,
            }
        }

    def update_config(self, new_config: Dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        
        Args:
            new_config: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        self.config.update(new_config)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.min_text_length = self.config.get("min_text_length", self.min_text_length)
        self.max_text_length = self.config.get("max_text_length", self.max_text_length)
        self.timeout = self.config.get("timeout", self.timeout)
        self.max_retries = self.config.get("max_retries", self.max_retries)
        self.retry_delay = self.config.get("retry_delay", self.retry_delay)
        
        logger.info("ü§ñ BotHub Detector –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        
        Returns:
            –°—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ gateway
            gateway_health = await self.gateway.health_check()
            
            return {
                "detector_status": "healthy" if gateway_health.get("status") == "healthy" else "unhealthy",
                "gateway_health": gateway_health,
                "stats": self.get_stats(),
                "config": {
                    "min_text_length": self.min_text_length,
                    "max_text_length": self.max_text_length,
                    "timeout": self.timeout,
                    "max_retries": self.max_retries,
                }
            }
            
        except Exception as e:
            return {
                "detector_status": "error",
                "error": str(e),
                "stats": self.get_stats()
            }
