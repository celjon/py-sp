# src/domain/service/detector/cas.py
"""
Production-Ready CAS (Combot Anti-Spam) Detector
–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
"""

import time
import logging
from typing import Dict, Any, Optional

from ...entity.message import Message
from ...entity.detection_result import DetectorResult

logger = logging.getLogger(__name__)


class CASDetector:
    """
    Production-ready –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ CAS API
    
    Features:
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - Comprehensive error handling
    - Performance monitoring
    - Graceful degradation –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CAS
    """
    
    def __init__(self, cas_gateway, config: Dict[str, Any] = None):
        """
        Args:
            cas_gateway: –®–ª—é–∑ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CAS API
            config: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        self.cas_gateway = cas_gateway
        self.config = config or {}
        
        # Performance settings
        self.cache_ttl = self.config.get("cache_ttl", 3600)  # 1 —á–∞—Å –∫—ç—à
        self.timeout = self.config.get("timeout", 1.0)  # 1 —Å–µ–∫—É–Ω–¥–∞ timeout
        
        # Confidence settings
        self.banned_confidence = self.config.get("banned_confidence", 0.95)
        self.not_banned_confidence = self.config.get("not_banned_confidence", 0.05)
        
        # Metrics
        self._total_checks = 0
        self._cache_hits = 0
        self._api_calls = 0
        self._errors = 0
        self._banned_users = 0
        
        logger.info("üõ°Ô∏è CAS Detector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   Cache TTL: {self.cache_ttl}s, Timeout: {self.timeout}s")
    
    async def detect(self, message: Message, user_context: Dict[str, Any] = None) -> DetectorResult:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ CAS
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            DetectorResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        start_time = time.time()
        self._total_checks += 1
        
        user_id = message.user_id
        username = getattr(message, 'username', None)
        
        logger.debug(f"üîç CAS –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} (@{username})")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CAS
            cas_result = await self.cas_gateway.check_cas(user_id)
            self._api_calls += 1
            
            processing_time_ms = (time.time() - start_time) * 1000
            
            if cas_result.get("banned", False):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
                self._banned_users += 1
                
                ban_reason = cas_result.get("reason", "Unknown")
                ban_date = cas_result.get("date", "Unknown")
                
                logger.warning(f"üö® CAS BAN: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
                logger.warning(f"   –ü—Ä–∏—á–∏–Ω–∞: {ban_reason}")
                logger.warning(f"   –î–∞—Ç–∞ –±–∞–Ω–∞: {ban_date}")
                
                return DetectorResult(
                    detector_name="CAS",
                    is_spam=True,
                    confidence=self.banned_confidence,
                    details=f"User banned in CAS: {ban_reason} ({ban_date})",
                    processing_time_ms=processing_time_ms
                )
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–∞–Ω–æ–≤
                logger.debug(f"‚úÖ CAS: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —á–∏—Å—Ç ({processing_time_ms:.1f}ms)")
                
                return DetectorResult(
                    detector_name="CAS",
                    is_spam=False,
                    confidence=self.not_banned_confidence,
                    details="User not found in CAS ban database",
                    processing_time_ms=processing_time_ms
                )
                
        except Exception as e:
            self._errors += 1
            processing_time_ms = (time.time() - start_time) * 1000
            
            logger.error(f"‚ö†Ô∏è CAS –ø—Ä–æ–≤–µ—Ä–∫–∞ failed –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # Graceful degradation - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–Ω–µ —Å–ø–∞–º" –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return DetectorResult(
                detector_name="CAS",
                is_spam=False,
                confidence=0.0,
                details=f"CAS check failed: {str(e)}",
                error=str(e),
                processing_time_ms=processing_time_ms
            )
    
    async def check_multiple_users(self, user_ids: list) -> Dict[int, DetectorResult]:
        """
        –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        Args:
            user_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å: user_id -> DetectorResult
        """
        results = {}
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if hasattr(self.cas_gateway, 'check_cas_batch'):
                logger.info(f"üîç CAS batch –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                batch_results = await self.cas_gateway.check_cas_batch(user_ids)
                
                for user_id, cas_result in batch_results.items():
                    if cas_result.get("banned", False):
                        results[user_id] = DetectorResult(
                            detector_name="CAS",
                            is_spam=True,
                            confidence=self.banned_confidence,
                            details=f"User banned: {cas_result.get('reason', 'Unknown')}"
                        )
                    else:
                        results[user_id] = DetectorResult(
                            detector_name="CAS",
                            is_spam=False,
                            confidence=self.not_banned_confidence,
                            details="User not banned"
                        )
            else:
                # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                logger.info(f"üîç CAS –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                for user_id in user_ids:
                    try:
                        cas_result = await self.cas_gateway.check_cas(user_id)
                        
                        if cas_result.get("banned", False):
                            results[user_id] = DetectorResult(
                                detector_name="CAS",
                                is_spam=True,
                                confidence=self.banned_confidence,
                                details=f"User banned: {cas_result.get('reason', 'Unknown')}"
                            )
                        else:
                            results[user_id] = DetectorResult(
                                detector_name="CAS",
                                is_spam=False,
                                confidence=self.not_banned_confidence,
                                details="User not banned"
                            )
                    except Exception as e:
                        logger.error(f"‚ö†Ô∏è CAS –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                        results[user_id] = DetectorResult(
                            detector_name="CAS",
                            is_spam=False,
                            confidence=0.0,
                            details=f"CAS check failed: {str(e)}",
                            error=str(e)
                        )
        
        except Exception as e:
            logger.error(f"‚ùå CAS batch –ø—Ä–æ–≤–µ—Ä–∫–∞ failed: {e}")
            
            # Fallback: –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —á–∏—Å—Ç—ã–º–∏
            for user_id in user_ids:
                results[user_id] = DetectorResult(
                    detector_name="CAS",
                    is_spam=False,
                    confidence=0.0,
                    details=f"Batch check failed: {str(e)}",
                    error=str(e)
                )
        
        return results
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        cache_hit_rate = (
            self._cache_hits / self._total_checks 
            if self._total_checks > 0 else 0
        )
        
        error_rate = (
            self._errors / self._total_checks 
            if self._total_checks > 0 else 0
        )
        
        ban_rate = (
            self._banned_users / self._total_checks 
            if self._total_checks > 0 else 0
        )
        
        return {
            "total_checks": self._total_checks,
            "cache_hits": self._cache_hits,
            "api_calls": self._api_calls,
            "errors": self._errors,
            "banned_users": self._banned_users,
            "cache_hit_rate": cache_hit_rate,
            "error_rate": error_rate,
            "ban_rate": ban_rate
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è CAS detector
        
        Returns:
            –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ CAS API
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID (–æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID = 1)
            test_result = await self.cas_gateway.check_cas(1)
            
            response_time_ms = (time.time() - start_time) * 1000
            
            return {
                "status": "healthy",
                "api_available": True,
                "response_time_ms": response_time_ms,
                "performance": self.get_performance_stats(),
                "config": {
                    "timeout": self.timeout,
                    "cache_ttl": self.cache_ttl,
                    "banned_confidence": self.banned_confidence
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå CAS health check failed: {e}")
            
            return {
                "status": "error",
                "api_available": False,
                "error": str(e),
                "performance": self.get_performance_stats()
            }
    
    async def warmup_cache(self, common_user_ids: list = None):
        """
        –ü—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç –∫—ç—à –¥–ª—è —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            common_user_ids: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        if not common_user_ids:
            return
        
        logger.info(f"üî• –ü—Ä–æ–≥—Ä–µ–≤ CAS –∫—ç—à–∞ –¥–ª—è {len(common_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            results = await self.check_multiple_users(common_user_ids)
            
            cache_entries = len([r for r in results.values() if not r.error])
            logger.info(f"‚úÖ CAS –∫—ç—à –ø—Ä–æ–≥—Ä–µ—Ç: {cache_entries} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ CAS –∫—ç—à–∞: {e}")
    
    def reset_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self._total_checks = 0
        self._cache_hits = 0
        self._api_calls = 0
        self._errors = 0
        self._banned_users = 0
        logger.info("üìä CAS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
