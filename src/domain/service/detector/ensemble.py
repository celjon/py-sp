# src/domain/service/detector/ensemble.py
"""
Production-Ready Ensemble Spam Detector v2.0
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: CAS ‚Üí RUSpam ‚Üí OpenAI (–±–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —ç–≤—Ä–∏—Å—Ç–∏–∫ –∏ ML)
"""
import asyncio
import time
import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass

from ...entity.message import Message
from ...entity.user import User
from ...entity.detection_result import DetectionResult, DetectorResult, DetectionReason
from .cas import CASDetector
from .openai import OpenAIDetector
from .ruspam_simple import RUSpamSimpleClassifier

logger = logging.getLogger(__name__)


@dataclass
class CircuitBreakerState:
    """Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""

    failure_count: int = 0
    last_failure_time: float = 0
    is_open: bool = False
    success_count: int = 0


class EnsembleDetector:
    """
    Production-ready –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞

    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (3 —Å–ª–æ—è —Å —Ä–∞–Ω–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º):
    1. üõ°Ô∏è CAS - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö (100ms)
    2. ü§ñ RUSpam - BERT –º–æ–¥–µ–ª—å –¥–ª—è —Å–ø–∞–º-–¥–µ—Ç–µ–∫—Ü–∏–∏ (300ms)
    3. üß† OpenAI - LLM –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (1.5s)

    Production Features:
    - Circuit breaker pattern –¥–ª—è external services
    - Comprehensive error handling —Å fallbacks
    - Performance monitoring
    - Graceful degradation
    """

    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}

        # –î–µ—Ç–µ–∫—Ç–æ—Ä—ã (lazy initialization)
        self.cas_detector: Optional[CASDetector] = None
        self.openai_detector: Optional[OpenAIDetector] = None
        self.ruspam_detector: Optional[RUSpamSimpleClassifier] = None

        # Production –ø–æ—Ä–æ–≥–∏
        self.spam_threshold = self.config.get("spam_threshold", 0.6)
        self.high_confidence_threshold = self.config.get("high_confidence_threshold", 0.8)
        self.auto_ban_threshold = self.config.get("auto_ban_threshold", 0.85)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RUSpam
        self.use_ruspam = self.config.get("use_ruspam", True)
        self.ruspam_min_length = self.config.get("ruspam_min_length", 10)
        self.russian_threshold = self.config.get("russian_threshold", 0.3)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
        self.openai_min_length = self.config.get("openai_min_length", 5)
        self.use_openai_fallback = self.config.get("use_openai_fallback", True)
        self.openai_timeout = self.config.get("openai_timeout", 5.0)

        # Performance settings
        self.max_processing_time = self.config.get("max_processing_time", 2.0)
        self.enable_early_exit = self.config.get("enable_early_exit", True)

        # Circuit breaker settings
        self.circuit_breaker_enabled = self.config.get("circuit_breaker_enabled", True)
        self.circuit_breaker_threshold = self.config.get("circuit_breaker_threshold", 5)
        self.circuit_breaker_timeout = self.config.get("circuit_breaker_timeout", 60)

        # Circuit breaker states
        self._circuit_breakers: Dict[str, CircuitBreakerState] = {
            "cas": CircuitBreakerState(),
            "ruspam": CircuitBreakerState(),
            "openai": CircuitBreakerState(),
        }

        # Performance metrics
        self._detection_count = 0
        self._total_processing_time = 0.0
        self._error_count = 0

        logger.info("üéØ Production –∞–Ω—Å–∞–º–±–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: CAS + RUSpam + OpenAI")
        logger.info(
            f"   –ü–æ—Ä–æ–≥–∏: spam={self.spam_threshold}, high={self.high_confidence_threshold}, auto_ban={self.auto_ban_threshold}"
        )
        logger.info(
            f"   Circuit breaker: {'enabled' if self.circuit_breaker_enabled else 'disabled'}"
        )

    def add_cas_detector(self, cas_gateway) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
        self.cas_detector = CASDetector(cas_gateway)
        logger.info("‚úÖ CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")

    def add_openai_detector(self, openai_gateway) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
        self.openai_detector = OpenAIDetector(openai_gateway)
        logger.info("‚úÖ OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")

    def add_ruspam_detector(self) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç RUSpam BERT –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
        if not self.use_ruspam:
            logger.warning("‚ö†Ô∏è RUSpam –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        try:
            self.ruspam_detector = RUSpamSimpleClassifier()
            logger.info("‚úÖ RUSpam BERT –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è RUSpam dependencies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
            logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install torch transformers ruSpam")
            self.ruspam_detector = None
        except Exception as e:
            logger.error(f"‚ö†Ô∏è RUSpam –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
            self.ruspam_detector = None

    def _is_circuit_breaker_open(self, detector_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ circuit breaker –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        if not self.circuit_breaker_enabled:
            return False

        breaker = self._circuit_breakers.get(detector_name)
        if not breaker or not breaker.is_open:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        if time.time() - breaker.last_failure_time > self.circuit_breaker_timeout:
            breaker.is_open = False
            breaker.failure_count = 0
            logger.info(f"üîÑ Circuit breaker –¥–ª—è {detector_name} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ half-open")
            return False

        return True

    def _record_detector_success(self, detector_name: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        if not self.circuit_breaker_enabled:
            return

        breaker = self._circuit_breakers.get(detector_name)
        if breaker:
            breaker.success_count += 1
            if breaker.is_open and breaker.success_count >= 3:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º circuit breaker –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
                breaker.is_open = False
                breaker.failure_count = 0
                logger.info(f"‚úÖ Circuit breaker –¥–ª—è {detector_name} –∑–∞–∫—Ä—ã—Ç")

    def _record_detector_failure(self, detector_name: str, error: Exception):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        if not self.circuit_breaker_enabled:
            return

        breaker = self._circuit_breakers.get(detector_name)
        if breaker:
            breaker.failure_count += 1
            breaker.last_failure_time = time.time()
            breaker.success_count = 0

            if breaker.failure_count >= self.circuit_breaker_threshold:
                breaker.is_open = True
                logger.warning(
                    f"üö® Circuit breaker –¥–ª—è {detector_name} –æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ {breaker.failure_count} –æ—à–∏–±–æ–∫"
                )
                logger.warning(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {error}")

    def _detect_language(self, text: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏

        Returns:
            "ru" - —Ä—É—Å—Å–∫–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç RUSpam)
            "en" - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            "mixed" - —Å–º–µ—à–∞–Ω–Ω—ã–π
            "unknown" - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        """
        if not text:
            return "unknown"

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        cyrillic_chars = sum(1 for c in text if "\u0400" <= c <= "\u04ff")
        latin_chars = sum(1 for c in text if c.isalpha() and not ("\u0400" <= c <= "\u04ff"))

        total_letters = cyrillic_chars + latin_chars
        if total_letters == 0:
            return "unknown"

        cyrillic_ratio = cyrillic_chars / total_letters

        if cyrillic_ratio >= self.russian_threshold:
            return "ru"
        elif cyrillic_ratio < 0.1:
            return "en"
        else:
            return "mixed"

    async def detect(
        self, message: Message, user_context: Dict[str, Any] = None
    ) -> DetectionResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞ —Å –ø–æ–ª–Ω—ã–º error handling

        Production –ª–æ–≥–∏–∫–∞:
        1. üõ°Ô∏è CAS –ø—Ä–æ–≤–µ—Ä–∫–∞ (100ms) - –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω ‚Üí –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –±–∞–Ω
        2. ü§ñ RUSpam BERT (300ms) - –µ—Å–ª–∏ —Å–ø–∞–º ‚â•0.8 ‚Üí —Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥
        3. üß† OpenAI LLM (1.5s) - –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            DetectionResult —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
        """
        start_time = time.time()
        results: List[DetectorResult] = []
        is_spam_detected = False
        primary_reason: Optional[DetectionReason] = None
        max_confidence = 0.0

        text = message.text or ""
        detected_language = self._detect_language(text)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–µ—Ç–µ–∫—Ü–∏–π
        self._detection_count += 1

        logger.info(
            f"üîç –î–µ—Ç–µ–∫—Ü–∏—è #{self._detection_count}: '{text[:50]}{'...' if len(text) > 50 else ''}' (—è–∑—ã–∫: {detected_language})"
        )

        try:
            # === –°–õ–û–ô 1: CAS –°–ò–°–¢–ï–ú–ê (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å) ===
            cas_result = await self._check_cas(message, user_context)
            if cas_result:
                results.append(cas_result)
                if cas_result.is_spam:
                    # CAS –±–∞–Ω –∞–±—Å–æ–ª—é—Ç–µ–Ω - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥
                    final_result = self._create_final_result(
                        message,
                        results,
                        True,
                        DetectionReason.CAS_BANNED,
                        1.0,
                        start_time,
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –≤ CAS –±–∞–∑–µ",
                    )
                    logger.warning(
                        f"üö® CAS BAN: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.user_id} ({final_result.processing_time_ms:.1f}ms)"
                    )
                    return final_result

            # === –°–õ–û–ô 2: RUSPAM BERT ===
            ruspam_result = await self._check_ruspam(text, detected_language)
            if ruspam_result:
                results.append(ruspam_result)
                if ruspam_result.is_spam:
                    is_spam_detected = True
                    primary_reason = DetectionReason.CLASSIFIER
                    max_confidence = ruspam_result.confidence

                    # –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    if (
                        self.enable_early_exit
                        and ruspam_result.confidence >= self.high_confidence_threshold
                    ):

                        final_result = self._create_final_result(
                            message,
                            results,
                            True,
                            primary_reason,
                            max_confidence,
                            start_time,
                            f"RUSpam –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ruspam_result.details}",
                        )
                        logger.warning(
                            f"üö® EARLY EXIT: RUSpam —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {ruspam_result.confidence:.3f} ({final_result.processing_time_ms:.1f}ms)"
                        )
                        return final_result

            # === –°–õ–û–ô 3: OPENAI LLM ===
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            elapsed_time = time.time() - start_time
            if elapsed_time >= self.max_processing_time:
                logger.warning(
                    f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({elapsed_time:.2f}s), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º OpenAI"
                )
            else:
                openai_result = await self._check_openai(message, user_context, text)
                if openai_result:
                    results.append(openai_result)
                    if openai_result.is_spam:
                        if not is_spam_detected:  # OpenAI –∫–∞–∫ –ø–µ—Ä–≤–∏—á–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
                            is_spam_detected = True
                            primary_reason = DetectionReason.OPENAI_DETECTED
                        max_confidence = max(max_confidence, openai_result.confidence)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            notes = self._generate_notes(results, detected_language, is_spam_detected)

            final_result = self._create_final_result(
                message,
                results,
                is_spam_detected,
                primary_reason,
                max_confidence,
                start_time,
                notes,
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self._update_performance_metrics(final_result.processing_time_ms)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_emoji = "üö®" if is_spam_detected else "‚úÖ"
            logger.info(
                f"{result_emoji} –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: spam={is_spam_detected}, confidence={max_confidence:.3f}, –≤—Ä–µ–º—è={final_result.processing_time_ms:.1f}ms"
            )

            return final_result

        except asyncio.TimeoutError:
            logger.error(f"‚è∞ Timeout –ø—Ä–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
            self._error_count += 1
            return self._create_timeout_result(message, results, start_time)
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            self._error_count += 1
            return self._create_error_result(message, results, start_time, str(e))

    async def _check_cas(
        self, message: Message, user_context: Dict[str, Any]
    ) -> Optional[DetectorResult]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ CAS –±–∞–∑—ã —Å circuit breaker"""
        detector_name = "cas"

        if not self.cas_detector:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        if self._is_circuit_breaker_open(detector_name):
            logger.warning(f"‚ö° CAS circuit breaker –æ—Ç–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return None

        try:
            start_cas = time.time()
            cas_result = await asyncio.wait_for(
                self.cas_detector.detect(message, user_context), timeout=1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ CAS
            )
            processing_time = (time.time() - start_cas) * 1000

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            self._record_detector_success(detector_name)

            if cas_result.is_spam:
                logger.warning(
                    f"üö® CAS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.user_id} –∑–∞–±–∞–Ω–µ–Ω ({processing_time:.1f}ms)"
                )
            else:
                logger.debug(f"‚úÖ CAS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∏—Å—Ç ({processing_time:.1f}ms)")

            return cas_result

        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ CAS timeout –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.user_id}")
            self._record_detector_failure(detector_name, TimeoutError("CAS timeout"))
            return None
        except Exception as e:
            logger.error(f"‚ö†Ô∏è CAS –æ—à–∏–±–∫–∞: {e}")
            self._record_detector_failure(detector_name, e)
            return None

    async def _check_ruspam(self, text: str, language: str) -> Optional[DetectorResult]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ RUSpam BERT —Å circuit breaker"""
        detector_name = "ruspam"

        if not self.ruspam_detector or len(text.strip()) < self.ruspam_min_length:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        if self._is_circuit_breaker_open(detector_name):
            logger.warning(f"‚ö° RUSpam circuit breaker –æ—Ç–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return None

        try:
            start_ruspam = time.time()
            ruspam_result = await asyncio.wait_for(
                self.ruspam_detector.classify(text), timeout=2.0  # 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ RUSpam
            )
            processing_time = (time.time() - start_ruspam) * 1000

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            self._record_detector_success(detector_name)

            detector_result = DetectorResult(
                detector_name="RUSpam",
                is_spam=ruspam_result.is_spam,
                confidence=ruspam_result.confidence,
                details=ruspam_result.details,
                processing_time_ms=processing_time,
            )

            if ruspam_result.is_spam:
                logger.warning(
                    f"üö® RUSpam: –°–ü–ê–ú –æ–±–Ω–∞—Ä—É–∂–µ–Ω ({ruspam_result.confidence:.3f}, {processing_time:.1f}ms)"
                )
            else:
                logger.debug(
                    f"‚úÖ RUSpam: –°–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–µ ({1.0 - ruspam_result.confidence:.3f}, {processing_time:.1f}ms)"
                )

            return detector_result

        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ RUSpam timeout")
            self._record_detector_failure(detector_name, TimeoutError("RUSpam timeout"))
            return None
        except Exception as e:
            logger.error(f"‚ö†Ô∏è RUSpam –æ—à–∏–±–∫–∞: {e}")
            self._record_detector_failure(detector_name, e)
            return DetectorResult(
                detector_name="RUSpam",
                is_spam=False,
                confidence=0.0,
                details=f"RUSpam error: {str(e)}",
                error=str(e),
                processing_time_ms=0.0,
            )

    async def _check_openai(
        self, message: Message, user_context: Dict[str, Any], text: str
    ) -> Optional[DetectorResult]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI LLM —Å circuit breaker"""
        detector_name = "openai"

        if (
            not self.openai_detector
            or not self.use_openai_fallback
            or len(text.strip()) < self.openai_min_length
        ):
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        if self._is_circuit_breaker_open(detector_name):
            logger.warning(f"‚ö° OpenAI circuit breaker –æ—Ç–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return None

        try:
            start_openai = time.time()
            openai_result = await asyncio.wait_for(
                self.openai_detector.detect(message, user_context), timeout=self.openai_timeout
            )
            processing_time = (time.time() - start_openai) * 1000

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            self._record_detector_success(detector_name)

            if openai_result.is_spam:
                logger.warning(
                    f"üö® OpenAI: –°–ü–ê–ú –æ–±–Ω–∞—Ä—É–∂–µ–Ω ({openai_result.confidence:.3f}, {processing_time:.1f}ms)"
                )
            else:
                logger.debug(f"‚úÖ OpenAI: –°–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–µ ({processing_time:.1f}ms)")

            return openai_result

        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ OpenAI timeout")
            self._record_detector_failure(detector_name, TimeoutError("OpenAI timeout"))
            return None
        except Exception as e:
            logger.error(f"‚ö†Ô∏è OpenAI –æ—à–∏–±–∫–∞: {e}")
            self._record_detector_failure(detector_name, e)
            return DetectorResult(
                detector_name="OpenAI",
                is_spam=False,
                confidence=0.0,
                details=f"OpenAI error: {str(e)}",
                error=str(e),
                processing_time_ms=0.0,
            )

    def _create_final_result(
        self,
        message: Message,
        results: List[DetectorResult],
        is_spam: bool,
        primary_reason: Optional[DetectionReason],
        confidence: float,
        start_time: float,
        notes: str,
    ) -> DetectionResult:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏"""

        processing_time_ms = (time.time() - start_time) * 1000

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        action = self._determine_action(confidence, is_spam, user_context=None)
        should_ban = action == "ban_and_delete"
        should_delete = action in ["ban_and_delete", "delete_and_warn"]
        should_restrict = action == "soft_warn_or_review"
        should_warn = action in ["delete_and_warn", "soft_warn_or_review"]

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω
        detection_reasons = []
        for result in results:
            if result.is_spam and result.details:
                detection_reasons.append(result.details)

        return DetectionResult(
            message_id=message.id or 0,
            user_id=message.user_id,
            is_spam=is_spam,
            overall_confidence=confidence,
            primary_reason=primary_reason,
            detector_results=results,
            processing_time_ms=processing_time_ms,
            notes=notes,
            reasons=detection_reasons,
            recommended_action=action,
            should_ban=should_ban,
            should_delete=should_delete,
            should_restrict=should_restrict,
            should_warn=should_warn,
        )

    def _determine_action(
        self, confidence: float, is_spam: bool, user_context: Dict[str, Any] = None
    ) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        Production –ø–æ—Ä–æ–≥–∏:
        - ‚â•0.85: ban_and_delete (–∞–≤—Ç–æ–±–∞–Ω)
        - 0.70-0.85: delete_and_warn (—É–¥–∞–ª–∏—Ç—å + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
        - 0.60-0.70: soft_warn_or_review (–º—è–≥–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
        - <0.60: allow (—Ä–∞–∑—Ä–µ—à–∏—Ç—å)

        –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:
        - –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ 0.1
        - –ê–¥–º–∏–Ω—ã/–≤–ª–∞–¥–µ–ª—å—Ü—ã: —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        if not is_spam:
            return "allow"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞/–≤–ª–∞–¥–µ–ª—å—Ü–∞
        if user_context and user_context.get("is_admin_or_owner", False):
            return "allow"  # –ê–¥–º–∏–Ω–æ–≤ –Ω–µ –±–∞–Ω—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        effective_confidence = confidence

        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        if user_context and user_context.get("is_new_user", False):
            effective_confidence += 0.1  # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤—ã—Ö

        # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        previous_warnings = user_context.get("previous_warnings", 0) if user_context else 0
        if previous_warnings > 0:
            effective_confidence += 0.05 * previous_warnings  # +5% –∑–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if effective_confidence >= self.auto_ban_threshold:
            return "ban_and_delete"
        elif effective_confidence >= 0.70:
            return "delete_and_warn"
        elif effective_confidence >= self.spam_threshold:
            return "soft_warn_or_review"
        else:
            return "allow"

    def _generate_notes(self, results: List[DetectorResult], language: str, is_spam: bool) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        if not results:
            return "–î–µ—Ç–µ–∫—Ç–æ—Ä—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã"

        active_detectors = [r.detector_name for r in results if r.confidence > 0]
        spam_detectors = [r.detector_name for r in results if r.is_spam]

        if is_spam and spam_detectors:
            spam_details = []
            for result in results:
                if result.is_spam and result.details:
                    spam_details.append(f"{result.detector_name}: {result.details}")

            details_str = "; ".join(spam_details) if spam_details else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã"
            return f"–°–ø–∞–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω ({', '.join(spam_detectors)}): {details_str} [—è–∑—ã–∫: {language}]"
        else:
            return f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É ({', '.join(active_detectors)}) [—è–∑—ã–∫: {language}]"

    def _create_timeout_result(
        self, message: Message, results: List[DetectorResult], start_time: float
    ) -> DetectionResult:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞"""
        processing_time_ms = (time.time() - start_time) * 1000

        return DetectionResult(
            message_id=message.id or 0,
            user_id=message.user_id,
            is_spam=False,  # –ü—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
            overall_confidence=0.0,
            primary_reason=None,
            detector_results=results,
            processing_time_ms=processing_time_ms,
            notes=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({processing_time_ms:.1f}ms)",
            reasons=["timeout"],
            recommended_action="allow",
            should_ban=False,
            should_delete=False,
            should_restrict=False,
            should_warn=False,
        )

    def _create_error_result(
        self, message: Message, results: List[DetectorResult], start_time: float, error: str
    ) -> DetectionResult:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        processing_time_ms = (time.time() - start_time) * 1000

        return DetectionResult(
            message_id=message.id or 0,
            user_id=message.user_id,
            is_spam=False,  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
            overall_confidence=0.0,
            primary_reason=None,
            detector_results=results,
            processing_time_ms=processing_time_ms,
            notes=f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {error}",
            reasons=["detection_error"],
            recommended_action="allow",
            should_ban=False,
            should_delete=False,
            should_restrict=False,
            should_warn=False,
        )

    def _update_performance_metrics(self, processing_time_ms: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self._total_processing_time += processing_time_ms

        # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è
        if processing_time_ms > self.max_processing_time * 1000:
            logger.warning(
                f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è: {processing_time_ms:.1f}ms (–ª–∏–º–∏—Ç: {self.max_processing_time * 1000}ms)"
            )

    async def get_available_detectors(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
        detectors = []

        if self.cas_detector:
            detectors.append("cas")
        if self.ruspam_detector:
            detectors.append("ruspam")
        if self.openai_detector:
            detectors.append("openai")

        return detectors

    async def get_performance_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        avg_processing_time = (
            self._total_processing_time / self._detection_count if self._detection_count > 0 else 0
        )

        error_rate = self._error_count / self._detection_count if self._detection_count > 0 else 0

        return {
            "total_detections": self._detection_count,
            "total_errors": self._error_count,
            "error_rate": error_rate,
            "average_processing_time_ms": avg_processing_time,
            "circuit_breakers": {
                name: {
                    "is_open": state.is_open,
                    "failure_count": state.failure_count,
                    "success_count": state.success_count,
                }
                for name, state in self._circuit_breakers.items()
            },
        }

    async def health_check(self) -> Dict[str, Any]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã
        """
        health = {
            "status": "unknown",
            "architecture": "modern",  # CAS + RUSpam + OpenAI
            "detectors": {},
            "timestamp": time.time(),
            "performance": {
                "max_processing_time": self.max_processing_time,
                "early_exit_enabled": self.enable_early_exit,
                "circuit_breaker_enabled": self.circuit_breaker_enabled,
            },
        }

        detectors_status = []

        # CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä
        try:
            if self.cas_detector:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
                cb_state = self._circuit_breakers.get("cas", CircuitBreakerState())
                health["detectors"]["cas"] = {
                    "status": "degraded" if cb_state.is_open else "healthy",
                    "available": not cb_state.is_open,
                    "type": "user_database",
                    "circuit_breaker": {
                        "is_open": cb_state.is_open,
                        "failure_count": cb_state.failure_count,
                    },
                }
                detectors_status.append(not cb_state.is_open)
            else:
                health["detectors"]["cas"] = {"status": "not_configured", "available": False}
        except Exception as e:
            health["detectors"]["cas"] = {"status": "error", "error": str(e), "available": False}
            detectors_status.append(False)

        # RUSpam –¥–µ—Ç–µ–∫—Ç–æ—Ä
        try:
            if self.ruspam_detector:
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
                try:
                    test_result = await asyncio.wait_for(
                        self.ruspam_detector.classify("—Ç–µ—Å—Ç"), timeout=2.0
                    )

                    cb_state = self._circuit_breakers.get("ruspam", CircuitBreakerState())
                    health["detectors"]["ruspam"] = {
                        "status": "degraded" if cb_state.is_open else "healthy",
                        "available": not cb_state.is_open,
                        "type": "bert_model",
                        "circuit_breaker": {
                            "is_open": cb_state.is_open,
                            "failure_count": cb_state.failure_count,
                        },
                    }
                    detectors_status.append(not cb_state.is_open)
                except Exception as e:
                    health["detectors"]["ruspam"] = {
                        "status": "error",
                        "error": str(e),
                        "available": False,
                    }
                    detectors_status.append(False)
            else:
                health["detectors"]["ruspam"] = {"status": "not_available", "available": False}
        except Exception as e:
            health["detectors"]["ruspam"] = {"status": "error", "error": str(e), "available": False}
            detectors_status.append(False)

        # OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä
        try:
            if self.openai_detector:
                cb_state = self._circuit_breakers.get("openai", CircuitBreakerState())
                health["detectors"]["openai"] = {
                    "status": "degraded" if cb_state.is_open else "healthy",
                    "available": not cb_state.is_open,
                    "type": "llm_model",
                    "circuit_breaker": {
                        "is_open": cb_state.is_open,
                        "failure_count": cb_state.failure_count,
                    },
                }
                detectors_status.append(not cb_state.is_open)
            else:
                health["detectors"]["openai"] = {"status": "not_configured", "available": False}
        except Exception as e:
            health["detectors"]["openai"] = {"status": "error", "error": str(e), "available": False}
            detectors_status.append(False)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        available_count = sum(1 for status in detectors_status if status)

        if available_count >= 2:
            health["status"] = "healthy"
        elif available_count >= 1:
            health["status"] = "degraded"
        else:
            health["status"] = "unhealthy"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if health["status"] != "healthy":
            health["recommendations"] = []
            if available_count == 0:
                health["recommendations"].append("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ—Ç–µ–∫—Ç–æ—Ä")
            if "cas" not in health["detectors"] or not health["detectors"]["cas"].get("available"):
                health["recommendations"].append("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ CAS –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤")
            if "ruspam" not in health["detectors"] or not health["detectors"]["ruspam"].get(
                "available"
            ):
                health["recommendations"].append("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ RUSpam –¥–ª—è BERT –∞–Ω–∞–ª–∏–∑–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º performance stats
        health["performance_stats"] = await self.get_performance_stats()

        return health
