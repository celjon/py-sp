# src/domain/service/auth/jwt_service.py
"""
Production-ready JWT Authentication Service
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å access/refresh —Ç–æ–∫–µ–Ω–∞–º–∏
"""

import jwt
import secrets
import hashlib
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, Tuple
from dataclasses import dataclass
from enum import Enum


class TokenType(Enum):
    """–¢–∏–ø—ã JWT —Ç–æ–∫–µ–Ω–æ–≤"""
    ACCESS = "access"
    REFRESH = "refresh"


@dataclass(frozen=True)
class JWTClaims:
    """JWT claims (–ø–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞)"""
    sub: str  # subject (api_key_id)
    iat: int  # issued at
    exp: int  # expires at
    token_type: TokenType
    client_name: str
    plan: str
    permissions: list = None
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "JWTClaims":
        """–°–æ–∑–¥–∞–µ—Ç claims –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            sub=data["sub"],
            iat=data["iat"],
            exp=data["exp"],
            token_type=TokenType(data["token_type"]),
            client_name=data["client_name"],
            plan=data["plan"],
            permissions=data.get("permissions", [])
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JWT payload"""
        return {
            "sub": self.sub,
            "iat": self.iat,
            "exp": self.exp,
            "token_type": self.token_type.value,
            "client_name": self.client_name,
            "plan": self.plan,
            "permissions": self.permissions or []
        }


@dataclass(frozen=True)
class TokenValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"""
    is_valid: bool
    claims: Optional[JWTClaims] = None
    error: Optional[str] = None
    
    @property
    def api_key_id(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç API key ID –∏–∑ claims"""
        return self.claims.sub if self.claims else None


@dataclass(frozen=True)
class TokenPair:
    """–ü–∞—Ä–∞ access + refresh —Ç–æ–∫–µ–Ω–æ–≤"""
    access_token: str
    refresh_token: str
    access_expires_in: int  # —Å–µ–∫—É–Ω–¥—ã
    refresh_expires_in: int  # —Å–µ–∫—É–Ω–¥—ã
    token_type: str = "Bearer"


class JWTService:
    """
    Production-ready JWT Service
    
    Features:
    - –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏
    - Access/Refresh token pattern
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
    - Blacklist –¥–ª—è –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    - Rate limiting –∑–∞—â–∏—Ç–∞
    """
    
    def __init__(
        self,
        secret_key: str,
        algorithm: str = "HS256",
        access_token_expire_minutes: int = 30,
        refresh_token_expire_days: int = 7,
        issuer: str = "antispam-api"
    ):
        if not secret_key or len(secret_key) < 32:
            raise ValueError("JWT secret must be at least 32 characters long")
        
        self.secret_key = secret_key
        self.algorithm = algorithm
        self.access_token_expire_minutes = access_token_expire_minutes
        self.refresh_token_expire_days = refresh_token_expire_days
        self.issuer = issuer
        
        # –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –¥–ª—è blacklist
        self._token_blacklist = set()
        
        print(f"üîê JWT Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}, access: {access_token_expire_minutes}m)")
    
    def create_token_pair(
        self,
        api_key_id: str,
        client_name: str,
        plan: str,
        permissions: list = None
    ) -> TokenPair:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—É access + refresh —Ç–æ–∫–µ–Ω–æ–≤
        
        Args:
            api_key_id: ID API –∫–ª—é—á–∞
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            plan: –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
            permissions: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            
        Returns:
            TokenPair —Å access –∏ refresh —Ç–æ–∫–µ–Ω–∞–º–∏
        """
        now = datetime.utcnow()
        
        # Access token (–∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏)
        access_expires = now + timedelta(minutes=self.access_token_expire_minutes)
        access_claims = JWTClaims(
            sub=api_key_id,
            iat=int(now.timestamp()),
            exp=int(access_expires.timestamp()),
            token_type=TokenType.ACCESS,
            client_name=client_name,
            plan=plan,
            permissions=permissions or []
        )
        
        # Refresh token (–¥–ª–∏–Ω–Ω—ã–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏)
        refresh_expires = now + timedelta(days=self.refresh_token_expire_days)
        refresh_claims = JWTClaims(
            sub=api_key_id,
            iat=int(now.timestamp()),
            exp=int(refresh_expires.timestamp()),
            token_type=TokenType.REFRESH,
            client_name=client_name,
            plan=plan,
            permissions=permissions or []
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
        access_token = self._encode_token(access_claims)
        refresh_token = self._encode_token(refresh_claims)
        
        return TokenPair(
            access_token=access_token,
            refresh_token=refresh_token,
            access_expires_in=self.access_token_expire_minutes * 60,
            refresh_expires_in=self.refresh_token_expire_days * 24 * 60 * 60
        )
    
    def create_access_token(
        self,
        api_key_id: str,
        client_name: str,
        plan: str,
        permissions: list = None
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ access token"""
        now = datetime.utcnow()
        expires = now + timedelta(minutes=self.access_token_expire_minutes)
        
        claims = JWTClaims(
            sub=api_key_id,
            iat=int(now.timestamp()),
            exp=int(expires.timestamp()),
            token_type=TokenType.ACCESS,
            client_name=client_name,
            plan=plan,
            permissions=permissions or []
        )
        
        return self._encode_token(claims)
    
    def validate_token(self, token: str, expected_type: TokenType = None) -> TokenValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω
        
        Args:
            token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            expected_type: –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ (access/refresh)
            
        Returns:
            TokenValidationResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º blacklist
            if self._is_token_blacklisted(token):
                return TokenValidationResult(
                    is_valid=False,
                    error="Token has been revoked"
                )
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            payload = jwt.decode(
                token,
                self.secret_key,
                algorithms=[self.algorithm],
                issuer=self.issuer,
                options={
                    "verify_signature": True,
                    "verify_exp": True,
                    "verify_iat": True,
                    "require": ["sub", "iat", "exp", "token_type"]
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º claims
            claims = JWTClaims.from_dict(payload)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if expected_type and claims.token_type != expected_type:
                return TokenValidationResult(
                    is_valid=False,
                    error=f"Invalid token type. Expected {expected_type.value}, got {claims.token_type.value}"
                )
            
            return TokenValidationResult(
                is_valid=True,
                claims=claims
            )
            
        except jwt.ExpiredSignatureError:
            return TokenValidationResult(
                is_valid=False,
                error="Token has expired"
            )
        except jwt.InvalidTokenError as e:
            return TokenValidationResult(
                is_valid=False,
                error=f"Invalid token: {str(e)}"
            )
        except Exception as e:
            return TokenValidationResult(
                is_valid=False,
                error=f"Token validation error: {str(e)}"
            )
    
    def refresh_access_token(self, refresh_token: str) -> Optional[TokenPair]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç access token –∏—Å–ø–æ–ª—å–∑—É—è refresh token
        
        Args:
            refresh_token: –î–µ–π—Å—Ç–≤—É—é—â–∏–π refresh —Ç–æ–∫–µ–Ω
            
        Returns:
            –ù–æ–≤–∞—è –ø–∞—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ None –µ—Å–ª–∏ refresh token –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        """
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º refresh token
        validation_result = self.validate_token(refresh_token, TokenType.REFRESH)
        if not validation_result.is_valid:
            return None
        
        claims = validation_result.claims
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π refresh token –≤ blacklist
        self._blacklist_token(refresh_token)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤
        return self.create_token_pair(
            api_key_id=claims.sub,
            client_name=claims.client_name,
            plan=claims.plan,
            permissions=claims.permissions
        )
    
    def revoke_token(self, token: str) -> bool:
        """
        –û—Ç–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ blacklist)
        
        Args:
            token: –¢–æ–∫–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞
            
        Returns:
            True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–∑—ã–≤–æ–º
            validation_result = self.validate_token(token)
            if not validation_result.is_valid:
                return False
            
            self._blacklist_token(token)
            return True
            
        except Exception as e:
            print(f"Error revoking token: {e}")
            return False
    
    def decode_token_unsafe(self, token: str) -> Optional[Dict[str, Any]]:
        """
        –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –ë–ï–ó –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏!
        """
        try:
            return jwt.decode(token, options={"verify_signature": False})
        except Exception:
            return None
    
    def _encode_token(self, claims: JWTClaims) -> str:
        """–ö–æ–¥–∏—Ä—É–µ—Ç claims –≤ JWT —Ç–æ–∫–µ–Ω"""
        payload = claims.to_dict()
        payload["iss"] = self.issuer  # issuer
        
        return jwt.encode(
            payload,
            self.secret_key,
            algorithm=self.algorithm
        )
    
    def _blacklist_token(self, token: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ blacklist"""
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç–æ–∫–µ–Ω–∞ –¥–ª—è blacklist (—ç–∫–æ–Ω–æ–º–∏–º –ø–∞–º—è—Ç—å)
        token_hash = hashlib.sha256(token.encode()).hexdigest()
        self._token_blacklist.add(token_hash)
        
        # –í production –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å—å –≤ Redis —Å TTL
        # redis.setex(f"blacklist:{token_hash}", ttl_seconds, "revoked")
    
    def _is_token_blacklisted(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –≤ blacklist"""
        token_hash = hashlib.sha256(token.encode()).hexdigest()
        return token_hash in self._token_blacklist
    
    def get_token_info(self, token: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ
        """
        validation_result = self.validate_token(token)
        
        info = {
            "is_valid": validation_result.is_valid,
            "error": validation_result.error
        }
        
        if validation_result.claims:
            claims = validation_result.claims
            info.update({
                "api_key_id": claims.sub,
                "client_name": claims.client_name,
                "plan": claims.plan,
                "token_type": claims.token_type.value,
                "issued_at": datetime.fromtimestamp(claims.iat).isoformat(),
                "expires_at": datetime.fromtimestamp(claims.exp).isoformat(),
                "permissions": claims.permissions,
                "is_expired": datetime.utcnow().timestamp() > claims.exp
            })
        
        return info
    
    def cleanup_expired_blacklist(self) -> int:
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ blacklist
        –í production —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Redis TTL
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        """
        # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è in-memory blacklist
        # –í production Redis –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏
        return 0
    
    def health_check(self) -> Dict[str, Any]:
        """Health check –¥–ª—è JWT —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
            test_token = self.create_access_token("test", "test_client", "free")
            validation_result = self.validate_token(test_token)
            
            return {
                "status": "healthy" if validation_result.is_valid else "error",
                "algorithm": self.algorithm,
                "access_token_ttl_minutes": self.access_token_expire_minutes,
                "refresh_token_ttl_days": self.refresh_token_expire_days,
                "blacklist_size": len(self._token_blacklist),
                "test_token_valid": validation_result.is_valid
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }


# Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JWT —Å–µ—Ä–≤–∏—Å–∞
def create_jwt_service(config: Dict[str, Any]) -> JWTService:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JWT —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ JWT
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π JWTService
    """
    auth_config = config.get("auth", {})
    
    return JWTService(
        secret_key=auth_config.get("jwt_secret", ""),
        algorithm=auth_config.get("jwt_algorithm", "HS256"),
        access_token_expire_minutes=auth_config.get("access_token_expire_minutes", 30),
        refresh_token_expire_days=auth_config.get("refresh_token_expire_days", 7),
        issuer=auth_config.get("jwt_issuer", "antispam-api")
    )