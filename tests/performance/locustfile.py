"""
Performance Tests with Locust
–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AntiSpam Bot API
–¶–µ–ª—å: 10,000+ RPS, 95th percentile < 200ms, 99th percentile < 500ms
"""

import random
import time
import json
from locust import HttpUser, task, between, events
from locust.exception import StopUser


class SpamDetectionUser(HttpUser):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞"""
    
    wait_time = between(0.1, 2.0)
    
    def on_start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.api_key = "ask_performance_test_key_12345678901234567890"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "User-Agent": "Locust-Performance-Test/1.0"
        }
        
        self.russian_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º –≤—á–µ—Ä–∞, –æ—á–µ–Ω—å –ø–æ–º–æ–≥–ª–æ",
            "–ì–¥–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ—É–∂–∏–Ω–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞?",
            "–ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –≤ 15:00 —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞",
            "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è, –ø–æ–π–¥–µ–º –≥—É–ª—è—Ç—å?",
            "–ö–∞–∫ —É—Å–ø–µ—Ö–∏ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?",
            "–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É –≤ —á–µ—Ç–≤–µ—Ä–≥",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç–∞—Ç—å—è, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è",
            "–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
            "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º?"
        ]
        
        self.english_messages = [
            "Hello! How are you today? Any plans for dinner?",
            "Thanks for the meeting notes, they were very helpful",
            "What's the best restaurant in downtown area?",
            "Let's meet tomorrow at 3 PM at the main entrance",
            "Beautiful weather today, want to go for a walk?",
            "How's your progress with the new programming language?",
            "Please remind me about Thursday's meeting",
            "Interesting article, thanks for sharing!",
            "Have a great day and good mood!",
            "When do you plan to finish this project?"
        ]
        
        self.spam_messages = [
            "üî•üî•üî• –ó–ê–†–ê–ë–û–¢–ê–ô –ú–ò–õ–õ–ò–û–ù –†–£–ë–õ–ï–ô –ó–ê –î–ï–ù–¨! üî•üî•üî•",
            "–°–†–û–ß–ù–û!!! –î–ï–ù–¨–ì–ò –ë–ï–ó –ü–†–û–¶–ï–ù–¢–û–í!!! –ó–í–û–ù–ò –°–ï–ô–ß–ê–°!!!",
            "Make money fast! Work from home! Click here!",
            "üí∞üí∞üí∞ LOTTERY WINNER! CLAIM YOUR PRIZE NOW! üí∞üí∞üí∞",
            "üöÄ –°–£–ü–ï–† –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï! –¢–û–õ–¨–ö–û –°–ï–ì–û–î–ù–Ø! –°–ö–ò–î–ö–ê 90%! üöÄ",
            "URGENT!!! LIMITED TIME OFFER!!! CLICK NOW!!!",
            "–†–∞–±–æ—Ç–∞ –¥–æ–º–∞! –õ–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏! –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π!",
            "Amazing deals! Don't miss out! Act now!",
            "üé∞ –í–´–ò–ì–†–ê–ô –î–ñ–ï–ö–ü–û–¢! –ü–ï–†–ï–•–û–î–ò –ü–û –°–°–´–õ–ö–ï! üé∞",
            "FREE MONEY! NO STRINGS ATTACHED! HURRY UP!"
        ]
        
        self.user_counter = 0
    
    def get_random_message(self, message_type="normal"):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if message_type == "spam":
            return random.choice(self.spam_messages)
        elif message_type == "english":
            return random.choice(self.english_messages)
        else:
            return random.choice(self.russian_messages)
    
    def get_user_context(self, is_new_user=False):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_counter += 1
        return {
            "user_id": 100000 + self.user_counter + random.randint(1, 10000),
            "chat_id": 67890,
            "is_new_user": is_new_user,
            "is_admin_or_owner": False
        }
    
    @task(70)
    def detect_normal_message(self):
        """70% –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_type = random.choice(["normal", "english"])
        text = self.get_random_message(message_type)
        
        payload = {
            "text": text,
            "context": self.get_user_context(is_new_user=random.random() < 0.1)
        }
        
        with self.client.post(
            "/api/v1/detect",
            json=payload,
            headers=self.headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                try:
                    data = response.json()
                    if "is_spam" in data and "confidence" in data and "processing_time_ms" in data:
                        if data["processing_time_ms"] > 2000:
                            response.failure(f"Processing time too high: {data['processing_time_ms']}ms")
                        else:
                            response.success()
                    else:
                        response.failure("Invalid response structure")
                except json.JSONDecodeError:
                    response.failure("Invalid JSON response")
            elif response.status_code == 429:
                response.success()
            else:
                response.failure(f"HTTP {response.status_code}: {response.text}")
    
    @task(20)
    def detect_spam_message(self):
        """20% –∑–∞–ø—Ä–æ—Å–æ–≤ - —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = self.get_random_message("spam")
        
        payload = {
            "text": text,
            "context": self.get_user_context(is_new_user=random.random() < 0.3)
        }
        
        with self.client.post(
            "/api/v1/detect",
            json=payload,
            headers=self.headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                try:
                    data = response.json()
                    if "is_spam" in data and "confidence" in data:
                        if data["is_spam"] and data["confidence"] > 0.6:
                            response.success()
                        elif not data["is_spam"] and data["confidence"] < 0.4:
                            response.success()
                        else:
                            response.success()
                    else:
                        response.failure("Invalid response structure")
                except json.JSONDecodeError:
                    response.failure("Invalid JSON response")
            elif response.status_code == 429:
                response.success()
            else:
                response.failure(f"HTTP {response.status_code}: {response.text}")
    
    @task(8)
    def batch_detect_messages(self):
        """8% –∑–∞–ø—Ä–æ—Å–æ–≤ - batch –¥–µ—Ç–µ–∫—Ü–∏—è"""
        batch_size = random.randint(3, 10)
        messages = []
        
        for i in range(batch_size):
            message_type = random.choice(["normal", "english", "spam"])
            text = self.get_random_message(message_type)
            
            messages.append({
                "text": text,
                "context": self.get_user_context(is_new_user=random.random() < 0.15)
            })
        
        payload = {"messages": messages}
        
        with self.client.post(
            "/api/v1/detect/batch",
            json=payload,
            headers=self.headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                try:
                    data = response.json()
                    if "results" in data and "total_processed" in data:
                        if len(data["results"]) == batch_size and data["total_processed"] == batch_size:
                            response.success()
                        else:
                            response.failure(f"Batch size mismatch: expected {batch_size}, got {len(data['results'])}")
                    else:
                        response.failure("Invalid batch response structure")
                except json.JSONDecodeError:
                    response.failure("Invalid JSON response")
            elif response.status_code == 429:
                response.success()
            else:
                response.failure(f"HTTP {response.status_code}: {response.text}")
    
    @task(2)
    def get_usage_stats(self):
        """2% –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.client.get(
            "/api/v1/stats",
            headers=self.headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                try:
                    data = response.json()
                    if "total_requests" in data:
                        response.success()
                    else:
                        response.failure("Invalid stats response")
                except json.JSONDecodeError:
                    response.failure("Invalid JSON response")
            elif response.status_code == 429:
                response.success()
            else:
                response.failure(f"HTTP {response.status_code}: {response.text}")


class HighVolumeUser(HttpUser):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    wait_time = between(0.01, 0.1)
    
    def on_start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
        self.api_key = "ask_high_volume_test_key_98765432109876543210"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "User-Agent": "Locust-HighVolume-Test/1.0"
        }
        
        self.quick_messages = [
            "–ø—Ä–∏–≤–µ—Ç",
            "—Å–ø–∞—Å–∏–±–æ",
            "hello",
            "thanks",
            "ok",
            "–¥–∞",
            "–Ω–µ—Ç",
            "yes",
            "no",
            "—Ö–æ—Ä–æ—à–æ"
        ]
        
        self.user_id_base = random.randint(200000, 300000)
    
    @task
    def rapid_detect(self):
        """–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        text = random.choice(self.quick_messages)
        user_id = self.user_id_base + random.randint(1, 1000)
        
        payload = {
            "text": text,
            "context": {
                "user_id": user_id,
                "chat_id": 67890,
                "is_new_user": False
            }
        }
        
        with self.client.post(
            "/api/v1/detect",
            json=payload,
            headers=self.headers,
            catch_response=True
        ) as response:
            if response.status_code in [200, 429]:
                response.success()
            else:
                response.failure(f"HTTP {response.status_code}")


class StressTestUser(HttpUser):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    wait_time = between(0.05, 0.5)
    
    def on_start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤"""
        self.api_key = "ask_stress_test_key_11111111111111111111"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "User-Agent": "Locust-Stress-Test/1.0"
        }
        
        self.complex_messages = [
            "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞. " * 20,
            "üî•üí∞üöÄüíéüéâüéäüéàüéÅüéÄüéÇüéÉüéÑüéÖüéÜüéá‚ú®üéåüéçüééüéèüéêüéëüéãüéìüéóüéüüé´üé™üé≠üé®üé¨üé§üéßüéºüéµüé∂üéπüé∫üéªü•Åüé∏",
            "URGENT URGENT URGENT URGENT URGENT URGENT URGENT URGENT URGENT URGENT URGENT URGENT",
            "Mixed —è–∑—ã–∫ message with —Ä–∞–∑–Ω—ã–µ languages –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã √±√°√©√≠√≥√∫ Œ±Œ≤Œ≥Œ¥Œµ ‰∏≠ÊñáÂ≠óÁ¨¶",
            "Numbers 123456789 and symbols !@#$%^&*()_+-=[]{}|;:,.<>? testing various patterns"
        ]
    
    @task
    def stress_detect(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        text = random.choice(self.complex_messages)
        
        payload = {
            "text": text,
            "context": {
                "user_id": random.randint(400000, 500000),
                "chat_id": 67890,
                "is_new_user": random.random() < 0.2
            }
        }
        
        start_time = time.time()
        
        with self.client.post(
            "/api/v1/detect",
            json=payload,
            headers=self.headers,
            catch_response=True
        ) as response:
            end_time = time.time()
            response_time = (end_time - start_time) * 1000
            
            if response.status_code == 200:
                if response_time > 5000:
                    response.failure(f"Response too slow: {response_time:.0f}ms")
                else:
                    response.success()
            elif response.status_code == 429:
                response.success()
            else:
                response.failure(f"HTTP {response.status_code}")



@events.request.add_listener
def on_request(request_type, name, response_time, response_length, response, context, exception, **kwargs):
    """–°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    if request_type == "POST" and "/api/v1/detect" in name:
        if response and response.status_code == 200:
            try:
                data = response.json()
                processing_time = data.get("processing_time_ms", 0)
                
                if processing_time > 1000:
                    print(f"‚ö†Ô∏è Slow processing: {processing_time}ms for {name}")
                
                if "is_spam" in data and "confidence" in data:
                    confidence = data["confidence"]
                    if confidence < 0.1 or confidence > 0.9:
                        pass
                    else:
                        pass
                        
            except (json.JSONDecodeError, AttributeError):
                pass


@events.test_start.add_listener
def on_test_start(environment, **kwargs):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ Starting performance tests...")
    print(f"Target host: {environment.host}")
    print("Test scenarios:")
    print("  - 70% normal messages")
    print("  - 20% spam messages") 
    print("  - 8% batch requests")
    print("  - 2% stats requests")


@events.test_stop.add_listener  
def on_test_stop(environment, **kwargs):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"""
    print("üèÅ Performance tests completed!")
    
    stats = environment.stats
    total_requests = stats.total.num_requests
    total_failures = stats.total.num_failures
    
    if total_requests > 0:
        failure_rate = (total_failures / total_requests) * 100
        avg_response_time = stats.total.avg_response_time
        
        print(f"üìä Final Results:")
        print(f"   Total requests: {total_requests}")
        print(f"   Total failures: {total_failures}")
        print(f"   Failure rate: {failure_rate:.2f}%")
        print(f"   Average response time: {avg_response_time:.0f}ms")
        print(f"   Max response time: {stats.total.max_response_time:.0f}ms")
        print(f"   Min response time: {stats.total.min_response_time:.0f}ms")
        print(f"   RPS: {stats.total.total_rps:.1f}")
        
        print("\nüéØ KPI Check:")
        
        if failure_rate <= 0.1:
            print(f"   ‚úÖ Failure rate: {failure_rate:.2f}% (target: ‚â§ 0.1%)")
        else:
            print(f"   ‚ùå Failure rate: {failure_rate:.2f}% (target: ‚â§ 0.1%)")
        
        if avg_response_time <= 200:
            print(f"   ‚úÖ Avg response time: {avg_response_time:.0f}ms (target: ‚â§ 200ms)")
        else:
            print(f"   ‚ùå Avg response time: {avg_response_time:.0f}ms (target: ‚â§ 200ms)")
        
        if stats.total.get_response_time_percentile(0.95) <= 500:
            p95 = stats.total.get_response_time_percentile(0.95)
            print(f"   ‚úÖ 95th percentile: {p95:.0f}ms (target: ‚â§ 500ms)")
        else:
            p95 = stats.total.get_response_time_percentile(0.95)
            print(f"   ‚ùå 95th percentile: {p95:.0f}ms (target: ‚â§ 500ms)")
        
        if stats.total.total_rps >= 100:
            print(f"   ‚úÖ Throughput: {stats.total.total_rps:.1f} RPS (target: ‚â• 100 RPS)")
        else:
            print(f"   ‚ùå Throughput: {stats.total.total_rps:.1f} RPS (target: ‚â• 100 RPS)")



"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:

1. –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
   locust -f locustfile.py --host=http://localhost:8080 --users=100 --spawn-rate=10 --run-time=300s

2. –¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
   locust -f locustfile.py --user-classes=HighVolumeUser --host=http://localhost:8080 --users=500 --spawn-rate=50 --run-time=300s

3. –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç:
   locust -f locustfile.py --user-classes=StressTestUser --host=http://localhost:8080 --users=200 --spawn-rate=20 --run-time=600s

4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç:
   locust -f locustfile.py --host=http://localhost:8080 --users=300 --spawn-rate=30 --run-time=600s

5. Headless —Ç–µ—Å—Ç —Å –æ—Ç—á–µ—Ç–æ–º:
   locust -f locustfile.py --host=http://localhost:8080 --users=150 --spawn-rate=15 --run-time=300s --headless --html=performance_report.html --csv=performance_results

–¶–µ–ª–µ–≤—ã–µ KPI:
- –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: 10,000+ RPS (–¥–æ—Å—Ç–∏–∂–∏–º–∞—è —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
- 95th percentile response time: < 200ms
- 99th percentile response time: < 500ms
- Failure rate: < 0.1%
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: < 2000ms (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–∏–º–∏—Ç)
"""

if __name__ == "__main__":
    import subprocess
    import sys
    
    print("üöÄ AntiSpam Bot Performance Testing")
    print("=" * 50)
    print("Available test scenarios:")
    print("1. Basic Performance Test (100 users, 5 min)")
    print("2. High Volume Test (500 users, 5 min)")
    print("3. Stress Test (200 users, 10 min)")
    print("4. Combined Test (300 users, 10 min)")
    print("5. Quick Smoke Test (20 users, 1 min)")
    
    choice = input("\nSelect scenario (1-5): ").strip()
    host = input("Enter host (default: http://localhost:8080): ").strip() or "http://localhost:8080"
    
    commands = {
        "1": f"locust -f {__file__} --host={host} --users=100 --spawn-rate=10 --run-time=300s --headless --html=basic_perf_report.html",
        "2": f"locust -f {__file__} --user-classes=HighVolumeUser --host={host} --users=500 --spawn-rate=50 --run-time=300s --headless --html=high_volume_report.html",
        "3": f"locust -f {__file__} --user-classes=StressTestUser --host={host} --users=200 --spawn-rate=20 --run-time=600s --headless --html=stress_test_report.html",
        "4": f"locust -f {__file__} --host={host} --users=300 --spawn-rate=30 --run-time=600s --headless --html=combined_test_report.html",
        "5": f"locust -f {__file__} --host={host} --users=20 --spawn-rate=5 --run-time=60s --headless"
    }
    
    if choice in commands:
        print(f"\nüöÄ Running scenario {choice}...")
        print(f"Command: {commands[choice]}")
        
        try:
            subprocess.run(commands[choice].split(), check=True)
            print("\n‚úÖ Performance test completed successfully!")
        except subprocess.CalledProcessError as e:
            print(f"\n‚ùå Performance test failed: {e}")
            sys.exit(1)
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Performance test interrupted by user")
            sys.exit(0)
    else:
        print("‚ùå Invalid choice")
        sys.exit(1)
