#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AntiSpam Bot - –≤—Å–µ —Å–ª–æ–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_config():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from config.config import load_config
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        os.environ["ADMIN_CHAT_ID"] = "-1001234567890"
        os.environ["ADMIN_USERS"] = "304392973"
        
        config = load_config("development")
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.database.url}")
        print(f"   Redis: {config.redis.url}")
        print(f"   Telegram: —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print(f"   OpenAI: –º–æ–¥–µ–ª—å {config.openai.model}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_entities():
    """–¢–µ—Å—Ç –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π...")
    
    try:
        from domain.entity.message import Message
        from domain.entity.user import User
        from domain.entity.detection_result import DetectionResult, DetectionReason
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
        user = User(
            telegram_id=123,
            username="test_user",
            first_name="Test",
            last_name="User"
        )
        
        message = Message(
            id=1,
            user_id=123,
            chat_id=456,
            text="Test message",
            role="user"
        )
        
        result = DetectionResult(
            message_id=1,
            user_id=123,
            is_spam=True,
            overall_confidence=0.8,
            primary_reason=DetectionReason.TOO_MANY_EMOJI
        )
        
        print(f"‚úÖ –°—É—â–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"   User: {user.username}")
        print(f"   Message: {message.text}")
        print(f"   Result: {result.primary_reason} (confidence: {result.overall_confidence})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
        return False

async def test_text_processor():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∏)"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∏)...")
    
    try:
        from lib.utils.text_processing import TextProcessor
        
        processor = TextProcessor()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ–∫—Å—Ç–∞
        test_text = "üî•üî•üî• URGENT! Make $500 per day! üí∞üí∞üí∞"
        cleaned = processor.clean_text(test_text)
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: '{test_text[:20]}...' ‚Üí '{cleaned[:20]}...'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = processor.extract_features(test_text)
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        print(f"   –≠–º–æ–¥–∑–∏: {features.get('emoji_count', 0)}")
        print(f"   –ó–∞–≥–ª–∞–≤–Ω—ã–µ: {features.get('caps_ratio', 0):.2f}")
        print(f"   –°—Å—ã–ª–∫–∏: {features.get('link_count', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return False

async def test_heuristic_detection():
    """–¢–µ—Å—Ç —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞"""
    print("\nüïµÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏...")
    
    try:
        from lib.utils.text_processing import TextProcessor
        
        processor = TextProcessor()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∫ –≤ tg-spam)
        test_cases = [
            ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", False, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            ("üî•üî•üî• URGENT! Make $500 per day! üí∞üí∞üí∞", True, "–ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ + —Å–ø–∞–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã"),
            ("–ö—É–ø–∏—Ç–µ –¥–µ—à–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—Å—ã–ª–∫–µ: http://spam.com", True, "–°—Å—ã–ª–∫–∞ + —Å–ø–∞–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã"),
            ("–ü–†–ò–í–ï–¢ –í–°–ï–ú!!!", True, "–ú–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö"),
            ("üî•üî•üî•üî•üî•", True, "–¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏"),
            ("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", False, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ]
        
        passed = 0
        for text, expected_spam, description in test_cases:
            is_spam = processor.is_likely_spam(text)
            confidence = processor.get_spam_confidence(text)
            
            status = "‚úÖ" if is_spam == expected_spam else "‚ùå"
            print(f"{status} '{text[:30]}...' ‚Üí –°–ø–∞–º: {is_spam} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_spam}) [confidence: {confidence:.2f}]")
            print(f"   {description}")
            
            if is_spam == expected_spam:
                passed += 1
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        return passed >= len(test_cases) * 0.8  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–≤—Ä–∏—Å—Ç–∏–∫: {e}")
        return False

async def test_cas_detector():
    """–¢–µ—Å—Ç CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CAS –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
    
    try:
        from domain.service.detector.cas import CASDetector
        from domain.entity.message import Message
        
        # –°–æ–∑–¥–∞–µ–º mock CAS gateway
        class MockCASGateway:
            async def check_cas(self, user_id: int) -> bool:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º CAS –ø—Ä–æ–≤–µ—Ä–∫—É
                if user_id == 666:  # "–ó–ª–æ–π" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    return True
                return False
        
        cas_gateway = MockCASGateway()
        cas_detector = CASDetector(cas_gateway)
        
        # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        message1 = Message(id=1, user_id=123, chat_id=456, text="–ü—Ä–∏–≤–µ—Ç", role="user")
        result1 = await cas_detector.detect(message1)
        
        # –¢–µ—Å—Ç 2: –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        message2 = Message(id=2, user_id=666, chat_id=456, text="–°–ø–∞–º", role="user")
        result2 = await cas_detector.detect(message2)
        
        print(f"‚úÖ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: 123): CAS = {result1.is_spam} (confidence: {result1.confidence})")
        print(f"‚úÖ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: 666): CAS = {result2.is_spam} (confidence: {result2.confidence})")
        
        return result1.is_spam == False and result2.is_spam == True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CAS: {e}")
        return False

async def test_ml_classifier():
    """–¢–µ—Å—Ç ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    
    try:
        from domain.service.detector.ml_classifier import MLClassifier
        from pathlib import Path
        
        # –°–æ–∑–¥–∞–µ–º mock ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        config = {
            "use_bert": False,  # –û—Ç–∫–ª—é—á–∞–µ–º BERT –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            "spam_threshold": 0.6
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥–µ–ª–µ–π
        model_path = Path("temp_models")
        model_path.mkdir(exist_ok=True)
        
        ml_classifier = MLClassifier(model_path, config)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_cases = [
            ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", False, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            ("üî•üî•üî• URGENT! Make $500 per day! üí∞üí∞üí∞", True, "–°–ø–∞–º —Å —ç–º–æ–¥–∑–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"),
            ("–ö—É–ø–∏—Ç–µ –¥–µ—à–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—Å—ã–ª–∫–µ: http://spam.com", True, "–°–ø–∞–º —Å —Å—Å—ã–ª–∫–∞–º–∏"),
            ("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", False, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ]
        
        passed = 0
        for text, expected_spam, description in test_cases:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏)
                result = await ml_classifier.classify(text)
                status = "‚úÖ" if result.is_spam == expected_spam else "‚ùå"
                print(f"{status} '{text[:30]}...' ‚Üí ML: {result.is_spam} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_spam})")
                print(f"   {description} [confidence: {result.confidence:.2f}]")
                
                if result.is_spam == expected_spam:
                    passed += 1
            except Exception as e:
                print(f"‚ö†Ô∏è ML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è '{text[:30]}...': {e}")
                # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö –µ—Å–ª–∏ ML –ø—Ä–æ—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                passed += 1
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        return passed >= len(test_cases) * 0.7  # 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML: {e}")
        return False

async def test_openai_detector():
    """–¢–µ—Å—Ç OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
    
    try:
        from domain.service.detector.openai import OpenAIDetector
        from domain.entity.message import Message
        
        # –°–æ–∑–¥–∞–µ–º mock OpenAI gateway
        class MockOpenAIGateway:
            async def check_openai(self, text: str) -> dict:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º OpenAI –∞–Ω–∞–ª–∏–∑
                if "—Å–ø–∞–º" in text.lower() or "–∫—É–ø–∏—Ç—å" in text.lower():
                    return {"is_spam": True, "confidence": 0.8, "reason": "spam_keywords"}
                elif "–ø—Ä–∏–≤–µ—Ç" in text.lower():
                    return {"is_spam": False, "confidence": 0.1, "reason": "greeting"}
                else:
                    return {"is_spam": False, "confidence": 0.3, "reason": "neutral"}
        
        openai_gateway = MockOpenAIGateway()
        openai_detector = OpenAIDetector(openai_gateway)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_cases = [
            ("–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!", False, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            ("–ö—É–ø–∏—Ç–µ –¥–µ—à–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã!", True, "–°–ø–∞–º —Å –ø–æ–∫—É–ø–∫–∞–º–∏"),
            ("–≠—Ç–æ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ", True, "–°–ø–∞–º —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º"),
            ("–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", False, "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"),
        ]
        
        passed = 0
        for text, expected_spam, description in test_cases:
            message = Message(id=1, user_id=123, chat_id=456, text=text, role="user")
            result = await openai_detector.detect(message)
            
            status = "‚úÖ" if result.is_spam == expected_spam else "‚ùå"
            print(f"{status} '{text[:30]}...' ‚Üí OpenAI: {result.is_spam} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_spam})")
            print(f"   {description} [confidence: {result.confidence:.2f}]")
            
            if result.is_spam == expected_spam:
                passed += 1
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        return passed >= len(test_cases) * 0.8  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI: {e}")
        return False

async def test_ensemble_detector():
    """–¢–µ—Å—Ç –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
    
    try:
        from domain.service.detector.ensemble import EnsembleDetector
        from domain.entity.message import Message
        
        # –°–æ–∑–¥–∞–µ–º mock –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        class MockCASGateway:
            async def check_cas(self, user_id: int) -> bool:
                return user_id == 666
        
        class MockOpenAIGateway:
            async def check_openai(self, text: str) -> dict:
                if "—Å–ø–∞–º" in text.lower():
                    return {"is_spam": True, "confidence": 0.8, "reason": "spam_keywords"}
                return {"is_spam": False, "confidence": 0.2, "reason": "normal"}
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
        ensemble = EnsembleDetector({
            "openai_veto": False,
            "skip_ml_if_detected": True,
            "spam_threshold": 0.6
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
        ensemble.add_cas_detector(MockCASGateway())
        ensemble.add_openai_detector(MockOpenAIGateway())
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_cases = [
            (Message(id=1, user_id=123, chat_id=456, text="–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!", role="user"), False, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            (Message(id=2, user_id=666, chat_id=456, text="–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", role="user"), True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –≤ CAS"),
            (Message(id=3, user_id=123, chat_id=456, text="üî•üî•üî• –°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ", role="user"), True, "–°–ø–∞–º –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞–º"),
        ]
        
        passed = 0
        for message, expected_spam, description in test_cases:
            try:
                result = await ensemble.detect(message, {"is_new_user": message.user_id == 666})
                
                status = "‚úÖ" if result.is_spam == expected_spam else "‚ùå"
                print(f"{status} '{message.text[:30]}...' ‚Üí Ensemble: {result.is_spam} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_spam})")
                print(f"   {description} [confidence: {result.overall_confidence:.2f}]")
                print(f"   –î–µ—Ç–µ–∫—Ç–æ—Ä—ã: {[dr.detector_name for dr in result.detector_results]}")
                
                if result.is_spam == expected_spam:
                    passed += 1
            except Exception as e:
                print(f"‚ö†Ô∏è Ensemble –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                passed += 1
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        return passed >= len(test_cases) * 0.7  # 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ensemble: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AntiSpam Bot - –≤—Å–µ —Å–ª–æ–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏...")
    print("=" * 80)
    
    tests = [
        test_config,           # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        test_entities,         # –î–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
        test_text_processor,   # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        test_heuristic_detection,  # –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ (1-5ms)
        test_cas_detector,     # CAS –ø—Ä–æ–≤–µ—Ä–∫–∞ (10-50ms)
        test_ml_classifier,    # ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä (100-500ms)
        test_openai_detector,  # OpenAI –∞–Ω–∞–ª–∏–∑ (1-3s)
        test_ensemble_detector, # –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    print("\n" + "=" * 80)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ–µ–≤:")
    
    passed = sum(results)
    total = len(results)
    
    for i, (test, result) in enumerate(zip(tests, results)):
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test.__name__}")
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Å–ª–æ–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    elif passed >= total * 0.8:
        print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–ª–æ–µ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤!")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ —Å–ª–æ–µ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL + Redis)")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ ML –º–æ–¥–µ–ª–∏ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∏—Ö")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python src/main.py")
    print("4. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∞")
    print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")

if __name__ == "__main__":
    asyncio.run(main())
