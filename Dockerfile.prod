# Dockerfile.prod - Multi-stage production build
# Optimized for security, performance, and size

# ===== BUILD STAGE =====
FROM python:3.11-slim as builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and build wheels
COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /build/wheels -r requirements.txt

# ===== PRODUCTION STAGE =====
FROM python:3.11-slim as production

# Create non-root user
RUN groupadd -r antispam && useradd -r -g antispam antispam

WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python packages from wheels (faster & more secure)
COPY --from=builder /build/wheels /wheels
COPY requirements.txt .
RUN pip install --no-cache-dir --no-index --find-links /wheels -r requirements.txt \
    && rm -rf /wheels requirements.txt

# Copy application code
COPY --chown=antispam:antispam . .

# Create necessary directories
RUN mkdir -p logs models cache \
    && chown -R antispam:antispam logs models cache

# Security: Remove sensitive files that shouldn't be in production
RUN rm -f .env* docker-compose*.yml .git* \
    && find . -name "*.md" -delete \
    && find . -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

# Set proper permissions
RUN chmod -R 755 /app \
    && chmod 750 /app/logs /app/models /app/cache

# Switch to non-root user
USER antispam

# Environment variables
ENV PYTHONPATH="/app"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV ENVIRONMENT=production
ENV WORKERS=4

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Production command with optimizations
CMD ["python", "-O", "-m", "src.main"]